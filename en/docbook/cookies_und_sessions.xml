<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="cookies_und_sessions"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title xml:id="cookies_und_sessions.title">Cookies and Sessions</title>

  <section xml:id="cookies">
    <title xml:id="cookies.title">Cookies</title>

    <indexterm>
      <primary>cookies</primary>
    </indexterm>

    <para>With a cookie, you can store information on the web browser's
    system, in form of strings as key-value pairs that the web server has
    previously sent to this browser. The information is later sent back from
    the browser to the server in the HTTP header. A cookie (if configured
    accordingly) is deleted from the browser system neither by restarting the
    browser nor by restarting the whole system. Of course, the browser's user
    can manually delete the cookie.</para>

    <para><important>
        <para>A browser does not have to accept cookies and it does not have
        to save them either. But we live in a world where almost every page
        uses cookies. So most users will have enabled the cookie
        functionality. For more information on cookies, please visit Wikipedia
        at <uri
        xlink:href="http://de.wikipedia.org/wiki/HTTP-Cookie">http://en.wikipedia.org/wiki/Http_cookie.</uri></para>
      </important><tip>
        <para>A cookie can only have a limited size (the maximum is 4 kB). You
        should remember that the information of the saved cookies is sent from
        the browser to the server. So you should only use cookies for storing
        small amounts of data (for example, a customer number) to avoid the
        protocol overhead becoming too big.</para>
      </tip></para>

    <para>Rails provides a hash with the name <varname>cookies[]</varname>
    that we can use transparently. Rails automatically takes care of the
    technological details in the background.</para>

    <para>To demonstrate how cookies work, we are going to build a Rails
    application that places a cookie on a page, reads it out on another page
    and displays the content, and the cookie is deleted on a third
    page.</para>

    <para><screen>$ rails new cookie_jar
  [...]
$ cd cookie_jar 
$ rails generate controller Home set_cookies show_cookies delete_cookies
      create  app/controllers/home_controller.rb
       route  get "home/delete_cookies"
       route  get "home/show_cookies"
       route  get "home/set_cookies"
      invoke  erb
      create    app/views/home
      create    app/views/home/set_cookies.html.erb
      create    app/views/home/show_cookies.html.erb
      create    app/views/home/delete_cookies.html.erb
      [...]
$ </screen></para>

    <para>We populate the controller file
    <filename>app/controllers/home_controller.rb</filename> as
    follows:<programlisting>class HomeController &lt; ApplicationController
  def set_cookies
    cookies[:user_name]   = "Horst Meier" 
    cookies[:customer_number] = "1234567890" 
  end
  
  def show_cookies
    @user_name    = cookies[:user_name]
    @customer_number = cookies[:customer_number]
  end
  
  def delete_cookies
    cookies.delete :user_name
    cookies.delete :customer_number
  end
end</programlisting></para>

    <para>And the view file
    <filename>app/views/home/show_cookies.html.erb</filename> as
    follows:<programlisting>&lt;table&gt;
 &lt;tr&gt;&lt;td&gt;User Name:&lt;/td&gt;&lt;td&gt;&lt;%= @user_name %&gt;&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;Customer Number:&lt;/td&gt;&lt;td&gt;&lt;%= @customer_number %&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;</programlisting></para>

    <para>Start the Rails server with <command>rails server</command> and go
    to the URL <uri
    xlink:href="http://0.0.0.0:3000/home/show_cookies">http://0.0.0.0:3000/home/show_cookies</uri>
    in your browser. You will not see any values. <screenshot>
        <info>
          <title>No cookies set</title>
        </info>

        <mediaobject>
          <imageobject>
            <imagedata fileref="screenshots/show_cookies_empty.jpg"/>
          </imageobject>

          <textobject>
            <simpara>Welcome aboard</simpara>

            <simpara>You're riding Ruby on Rails!</simpara>

            <para>…</para>
          </textobject>
        </mediaobject>
      </screenshot></para>

    <para>Now go to the URL <uri
    xlink:href="http://0.0.0.0:3000/home/set_cookies">http://0.0.0.0:3000/home/set_cookies</uri>
    and then back to <uri
    xlink:href="http://0.0.0.0:3000/home/show_cookies">http://0.0.0.0:3000/home/show_cookies</uri>.
    Now you will see the values that we have set in the method
    <methodname>set_cookies.</methodname><screenshot>
        <info>
          <title>Cookies set</title>
        </info>

        <mediaobject>
          <imageobject>
            <imagedata fileref="screenshots/show_cookies_set.jpg"/>
          </imageobject>

          <textobject>
            <simpara>Welcome aboard</simpara>

            <simpara>You're riding Ruby on Rails!</simpara>

            <para>…</para>
          </textobject>
        </mediaobject>
      </screenshot></para>

    <para>By going to the page <uri
    xlink:href="http://0.0.0.0:3000/home/delete_cookies">http://0.0.0.0:3000/home/delete_cookies</uri>
    you can delete the cookies again.</para>

    <important>
      <para>The cookies you have placed in this way stay "alive" in the
      browser until you close the browser completely.</para>
    </important>

    <warning>
      <para>The content of a normally placed cookie in the browser is easy to
      read and does not pose any problems to the user. It is not encrypted, so
      it should not contain any passwords or similar data. Nor is it advisable
      to save shopping baskets in an unsigned (see <xref
      linkend="cookies_signed"/>) cookie, otherwise the user could change the
      prices in this shopping basket himself.</para>
    </warning>

    <section xml:id="cookies_permanent">
      <title xml:id="cookies_permanent.title">Permanent Cookies</title>

      <indexterm>
        <primary>cookies</primary>

        <secondary>permanent</secondary>
      </indexterm>

      <para>Cookies are normally set to give the application a way of
      recognizing users when they visit again later or of saving shopping
      baskets. Between these visits to the website, much time can go by and
      the user may well close the browser in the meantime. To store cookies
      for longer than the current browser session, you can use the method
      <methodname>permanent</methodname>. Our above example can be expanded by
      adding this method in the
      <filename>app/controllers/home_controller.rb</filename>:<programlisting>class HomeController &lt; ApplicationController
  def set_cookies
    cookies.permanent[:user_name]   = "Horst Meier" 
    cookies.permanent[:customer_number] = "1234567890" 
  end
  
  def show_cookies
    @user_name    = cookies[:user_name]
    @customer_number = cookies[:customer_number]
  end
  
  def delete_cookies
    cookies.delete :user_name
    cookies.delete :customer_number
  end
  
  def debug_cookies
  end
end</programlisting></para>

      <important>
        <para>"permanent" here does not really mean permanent. You cannot set
        a cookie permanently. When you set a cookie, it always needs a "valid
        until" stamp that the browser can use to automatically delete old
        cookies. With the method permanent this value is set to today's date
        in 20 years. This is practically the same as permanent.</para>
      </important>
    </section>

    <section xml:id="cookies_signed">
      <title xml:id="cookies_signed.title">Signed Cookies)</title>

      <indexterm>
        <primary>cookies</primary>

        <secondary>signed</secondary>
      </indexterm>

      <para>With normally placed cookies, you have no option on the
      application side to find out if the user of the application has changed
      the cookie. This can quickly lead to security problems, as changing the
      content of a cookie in the browser is no great mystery. The solution is
      signing the cookies with a key that is only known to us. This key is
      automatically created via a random generator with each <command>rails
      new</command> and is located in the file
      <filename>config/initializers/secret_token.rb</filename>:<programlisting># Be sure to restart your server when you modify this file.

# Your secret key for verifying the integrity of signed cookies.
# If you change this key, all old signed cookies will become invalid!
# Make sure the secret is at least 30 characters and all random,
# no regular words or you'll be exposed to dictionary attacks.
CookieJar::Application.config.secret_token = '85ec33910d4d57f3d3c69cb8fef20f158f68a219a76db71280779454a523330874fc4e42c7e62ecb25b8e4f5fcce1dcad88c7dcc9671a9922f675d770270a25a'</programlisting></para>

      <para><warning>
          <para>If you want to set up your Rails application from scratch
          again one day and start over with a fresh Rails project, it can be
          helpful to transfer this key into the new Rails application.
          Otherwise you can no longer use the previously placed
          cookies!</para>
        </warning>To sign cookies, you can use the method
      <methodname>signed</methodname>. You have to use it for writing and
      reading the cookie. Our above example can be expanded by adding this
      method in the
      <filename>app/controllers/home_controller.rb</filename>:<programlisting>class HomeController &lt; ApplicationController
  def set_cookies
    cookies.permanent.signed[:user_name]   = "Horst Meier" 
    cookies.permanent.signed[:customer_number] = "1234567890" 
  end

  def show_cookies
    @user_name    = cookies.signed[:user_name]
    @customer_number = cookies.signed[:customer_number]
  end

  def delete_cookies
    cookies.delete :user_name
    cookies.delete :customer_number
  end

  def debug_cookies
  end
end</programlisting>The content of the cookie is now saved in encrypted form
      every time you set the cookie. The name of the cookie can still be read
      by the user, but not the value.</para>
    </section>
  </section>

  <section xml:id="sessions">
    <title xml:id="sessions.title">Sessions</title>

    <indexterm>
      <primary>sessions</primary>
    </indexterm>

    <para>As HTTP is a stateless protocol, we encounter special problems when
    developing applications. An individual web page has nothing to do with
    another web page and they do not know of one another. But as you want to
    register only once on many websites, not over and over again on each
    individual page, this can pose a problem. The solution is called session
    and Rails offers it to the programmer transparently as
    <varname>session[]</varname> hash. Rails automatically creates a new
    session for each new visitor of the web page. This session is saved by
    default as cookie (see <xref linkend="cookies"/>) and so it is subject to
    the 4 kB limit. But you can also store the sessions in the database (see
    <xref linkend="sessions_datenbank"/>). An independent and unique session
    ID is created automatically and the cookie is deleted by default when the
    web browser is closed.<warning>
        <para>Please note that only pages generated by Rails work in the
        session management. If you go to a static HTML page from
        <filename>/public</filename>, this takes place outside of the session
        management.</para>
      </warning></para>

    <para>The beauty of a Rails session is that we can not just save strings
    there as with cookies, but also hashes and arrays. So you can for example
    use it to conveniently implement a shopping cart in an online shop.</para>

    <section xml:id="session_breadcrumbs">
      <title xml:id="session_breadcrumbs.title">Breadcrumbs via
      Session</title>

      <indexterm>
        <primary>breadcrumbs</primary>
      </indexterm>

      <para>As an example, we create an application with a controller and
      three views. When a view is visited, the previously visited views are
      displayed in a little list.</para>

      <para>The basic application:<screen>MacBook:~ xyz$ <command>rails new breadcrumbs</command>
[...]
MacBook:~ xyz$ <command>cd breadcrumbs</command>
MacBook:breadcrumbs xyz$ <command>rails generate controller Home ping pong index</command>
[...]
MacBook:breadcrumbs xyz$</screen></para>

      <para>First we create a method with which we can save the last three
      URLs in the session and set an instance variable
      <varname>@breadcrumbs,</varname> to be able to neatly retrieve the
      values in the view. To that end, we set up a
      <methodname>before_filter</methodname> in the
      <filename>app/controllers/home_controller.rb</filename>:<programlisting>class HomeController &lt; ApplicationController
  
  <emphasis role="bold">before_filter :set_breadcrumbs</emphasis>
  
  def ping
  end
  
  def pong
  end
  
  def index
  end
  
<emphasis role="bold">  private
  
  def set_breadcrumbs
    @breadcrumbs = session[:breadcrumbs]
    @breadcrumbs ||= Array.new
    @breadcrumbs.push(request.url)
    @breadcrumbs.shift if @breadcrumbs.count &gt; 3
    session[:breadcrumbs] = @breadcrumbs
  end</emphasis>
  
end</programlisting></para>

      <para>Now we use the
      <filename>app/views/layouts/application.html.erb</filename> to display
      these last entries at the top of each page:<programlisting>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Breadcrumbs&lt;/title&gt;
  &lt;%= stylesheet_link_tag    "application", :media =&gt; "all" %&gt;
  &lt;%= javascript_include_tag "application" %&gt;
  &lt;%= csrf_meta_tags %&gt;
&lt;/head&gt;
&lt;body&gt;

<emphasis>&lt;% if @breadcrumbs %&gt;
  &lt;p&gt;Last pages visited:&lt;/p&gt;
  &lt;ul&gt;
    &lt;% @breadcrumbs.each do |breadcrumb| %&gt;
      &lt;li&gt;&lt;%= link_to breadcrumb, breadcrumb %&gt;&lt;/li&gt;
    &lt;% end %&gt;
  &lt;/ul&gt;
&lt;% end %&gt;</emphasis>

&lt;%= yield %&gt;

&lt;/body&gt;
&lt;/html&gt;</programlisting></para>

      <para>Now you can start the Rails server with <command>rails
      server</command> and go to <uri
      xlink:href="http://0.0.0.0:3000/home/ping">http://0.0.0.0:3000/home/ping</uri>,
      <uri
      xlink:href="http://0.0.0.0:3000/home/ping">http://0.0.0.0:3000/home/ping</uri>
      or <uri
      xlink:href="http://0.0.0.0:3000/home/index">http://0.0.0.0:3000/home/index</uri>
      and at the top you will then always see the pages that you have visited
      before. Of course, this only works on the second page, because you do
      not yet have a history on the first page you visit.<screenshot>
          <info>
            <title>Visiting the third page in a session</title>
          </info>

          <mediaobject>
            <imageobject>
              <imagedata fileref="screenshots/breadcrumbs_session_beispiel.jpg"/>
            </imageobject>
          </mediaobject>
        </screenshot></para>
    </section>

    <section xml:id="reset_session">
      <title xml:id="reset_session.title">reset_session</title>

      <indexterm>
        <primary>sessions</primary>

        <secondary>reset_session</secondary>
      </indexterm>

      <para>Occasionally, there are situations where you want to reset a
      session (in other words, delete the current session and start again with
      a new, fresh session). For example, if you log out of a web application,
      the session will be reset. This is easily done and we can quickly
      integrate it into our breadcrumb application (see <xref
      linkend="session_breadcrumbs"/>):<screen>MacBook:breadcrumbs xyz$ <command>rails generate controller Home reset -s</command>
        skip  app/controllers/home_controller.rb
       route  get "home/reset"
      invoke  erb
       exist    app/views/home
      create    app/views/home/reset.html.erb
      invoke  test_unit
        skip    test/functional/home_controller_test.rb
      invoke  helper
   identical    app/helpers/home_helper.rb
      invoke    test_unit
   identical      test/unit/helpers/home_helper_test.rb
      invoke  assets
      invoke    coffee
   identical      app/assets/javascripts/home.js.coffee
      invoke    scss
   identical      app/assets/stylesheets/home.css.scss
MacBook:breadcrumbs xyz$</screen></para>

      <para>The correspondingly expanded controller
      <filename>app/controllers/home_controller.rb</filename> then looks like
      this:<programlisting>class HomeController &lt; ApplicationController
  
  before_filter :set_breadcrumbs
  
  def ping
  end
  
  def pong
  end
  
  def index
  end
  
  <emphasis role="bold">def reset
    reset_session
    @breadcrumbs = nil
  end</emphasis>
  
  private
  
  def set_breadcrumbs
    @breadcrumbs = session[:breadcrumbs]
    @breadcrumbs ||= Array.new
    @breadcrumbs.push(request.url)
    @breadcrumbs.shift if @breadcrumbs.count &gt; 3
    session[:breadcrumbs] = @breadcrumbs
  end
  
end</programlisting></para>

      <para>So you can delete the current session by going to the URL <uri
      xlink:href="http://0.0.0.0:3000/home/reset">http://0.0.0.0:3000/home/reset</uri>.</para>

      <important>
        <para>It is not just important to invoke
        <methodname>reset_session</methodname>, but you need to also set the
        instance variable <varname>@breadcrumbs</varname> to <code>nil</code>.
        Otherwise, the old breadcrumbs would still appear in the view..</para>
      </important>
    </section>

    <section xml:id="sessions_datenbank">
      <title xml:id="sessions_datenbank.title">Saving Sessions in the
      Database</title>

      <indexterm>
        <primary>sessions</primary>

        <secondary>active_record_store</secondary>
      </indexterm>

      <para>Saving the entire session data in a cookie on the user's browser
      is not always the best solution. Amongst others, the limit of 4 kB can
      pose a problem. But it's no big obstacle, we can relocate the storing of
      the session from the cookie to the database. Then the session ID is of
      course still saved in a cookie, but the whole other session data is
      stored in the database on the server.</para>

      <para>First, we change the configuration of the session store in the
      file <filename>config/initializers/session_store.rb</filename>. We
      comment out the <code>:cookie_store</code> and take out the comment sign
      before the <code>:active_record_store</code>.<programlisting># Be sure to restart your server when you modify this file.

<emphasis># Breadcrumbs::Application.config.session_store :cookie_store, key: '_breadcrumbs_session'</emphasis>

# Use the database for sessions instead of the cookie-based default,
# which shouldn't be used to store highly confidential information
# (create the session table with "rails generate session_migration")

<emphasis>Breadcrumbs::Application.config.session_store :active_record_store</emphasis></programlisting></para>

      <para>Now we still need to create the corresponding table. We do it with
      <command>rails generate session_migration</command> and <command>rake
      db:migrate</command>:<screen>MacBook:breadcrumbs xyz$ <command>rails generate session_migration</command>
      invoke  active_record
      create    db/migrate/20120530145134_add_sessions_table.rb
MacBook:breadcrumbs xyz$ <command>rake db:migrate</command>
==  AddSessionsTable: migrating ===============================================
-- create_table(:sessions)
   -&gt; 0.0014s
-- add_index(:sessions, :session_id)
   -&gt; 0.0005s
-- add_index(:sessions, :updated_at)
   -&gt; 0.0006s
==  AddSessionsTable: migrated (0.0027s) ======================================

MacBook:breadcrumbs xyz$</screen></para>

      <para>Job done. Now you need to start the server again with
      <command>rails server</command> and Rails saves all sessions in the
      database.</para>
    </section>
  </section>
</chapter>
