<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xml:id="activerecord_named_scope"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title xml:id="activerecord_named_scope.title">Scopes</title>

  <indexterm>
    <primary>ActiveRecord</primary>

    <secondary>NamedScopes</secondary>
  </indexterm>

  <para>When programming Rails applications, it is sometimes clearer and
  simpler to define frequent searches as separate methods. In Rails speak,
  these are referred to as <foreignphrase
  xml:lang="en">NamedScope</foreignphrase>. These NamedScopes can be chained,
  just like other methods.</para>

  <section xml:id="named_scopes_vorbereitung">
    <title xml:id="named_scopes_vorbereitung.title">Preparation</title>

    <para>We are building our own little online shop:<screen>$ rails new shop
  [...]
$ cd shop
$ rails generate model product name 'price:decimal{7,2}' weight:integer in_stock:boolean expiration_date:date
  [...]
$ rake db:migrate
  [...]
$</screen></para>

    <para>Please populate the file <filename>db/seeds.rb</filename> with the
    following content:<programlisting>Product.create(name: 'Milk (1 liter)', weight: 1000, in_stock: true, price: 0.45, expiration_date: Date.today + 14.days)
Product.create(name: 'Butter (250 g)', weight: 250, in_stock: true, price: 0.75, expiration_date: Date.today + 14.days)
Product.create(name: 'Flour (1 kg)', weight: 1000, in_stock: false, price: 0.45, expiration_date: Date.today + 100.days)
Product.create(name: 'Jelly Babies (6 x 300 g)', weight: 1500, in_stock: true, price: 4.96, expiration_date: Date.today + 1.year)
Product.create(name: 'Super-Duper Cake Mix', in_stock: true, price: 11.12, expiration_date: Date.today + 1.year)
Product.create(name: 'Eggs (12)', in_stock: true, price: 2, expiration_date: Date.today + 7.days)
Product.create(name: 'Peanuts (8 x 200 g bag)', in_stock: false, weight: 1600, price: 17.49, expiration_date: Date.today + 1.year)</programlisting></para>

    <para>Now drop the database and repopulate it with the
    <filename>db/seeds.rb</filename>:<screen>$ rake db:reset
  [...]
$ </screen></para>
  </section>

  <section xml:id="einfache_named_scopes">
    <title xml:id="einfache_named_scopes.title">Defining a Scope</title>

    <para>If we want to count products that are in stock in our online shop,
    then we can use the following query each time:<screen>$ rails console
Loading development environment (Rails 4.0.0)
&gt;&gt; Product.where(in_stock: true).count
   (0.1ms)  SELECT COUNT(*) FROM "products" WHERE "products"."in_stock" = 't'
=&gt; 5
&gt;&gt; exit
$</screen></para>

    <para>But we could also define a NamedScope <code>available</code> in the
    <filename>app/models/product.rb</filename>:<programlisting>class Product &lt; ActiveRecord::Base
  scope :available, -&gt; { where(in_stock: true) }
end</programlisting></para>

    <para>And then use it:<screen>$ rails console
Loading development environment (Rails 4.0.0)
&gt;&gt; Product.available.count
   (0.2ms)  SELECT COUNT(*) FROM "products" WHERE "products"."in_stock" = 't'
=&gt; 5
&gt;&gt; exit
$</screen></para>

    <para>Let's define a second NamedScope for this example in the
    <filename>app/models/product.rb</filename>:<programlisting>class Product &lt; ActiveRecord::Base
  scope :available, -&gt; { where(in_stock: true) }
  scope :cheap, -&gt; { where(price: 0..1) }
end</programlisting></para>

    <para>Now we can chain both named scopes to output all cheap products that
    are in stock:<screen>$ rails console
Loading development environment (Rails 4.0.0)
&gt;&gt; Product.cheap.count
   (0.1ms)  SELECT COUNT(*) FROM "products" WHERE ("products"."price" BETWEEN 0 AND 1)
=&gt; 3
&gt;&gt; Product.cheap.available.count
   (0.2ms)  SELECT COUNT(*) FROM "products" WHERE "products"."in_stock" = 't' AND ("products"."price" BETWEEN 0 AND 1)
=&gt; 2
&gt;&gt; exit
&gt;&gt; exit
$</screen></para>
  </section>

  <section>
    <title>Passing in Arguments</title>

    <para>If you need a NamedScope that can also process parameters, then that
    is no problem either. The following example outputs products that are
    cheaper than the specified value. The
    <filename>app/models/product.rb</filename> looks like
    this:<programlisting>class Product &lt; ActiveRecord::Base
  scope :cheaper_than, -&gt;(price) { where("price &lt; ?", price) }
end</programlisting></para>

    <para>Now we can count all products that cost less than 50 cent:<screen>$ rails console
Loading development environment (Rails 4.0.0)
&gt;&gt; Product.cheaper_than(0.5).count
   (0.2ms)  SELECT COUNT(*) FROM "products" WHERE (price &lt; 0.5)
=&gt; 2
&gt;&gt; exit
$</screen></para>
  </section>

  <section xml:id="named_scope_create">
    <title xml:id="named_scope_create.title">Creating New Records with
    Scopes</title>

    <para>Let's use the following
    <filename>app/models/product.rb</filename>:<programlisting>class Product &lt; ActiveRecord::Base
  scope :available, -&gt; { where(in_stock: true) }
end</programlisting></para>

    <para>With this NamedScope we can not only find all products that are in
    stock, but also create new products that contain the value
    <code>true</code> in the field <varname>in_stock</varname>:<screen>$ rails console
Loading development environment (Rails 4.0.0)
&gt;&gt; product = Product.available.build
=&gt; #&lt;Product id: nil, name: nil, price: nil, weight: nil, in_stock: true, expiration_date: nil, created_at: nil, updated_at: nil&gt;
&gt;&gt; product.in_stock
=&gt; true
&gt;&gt; exit
$ </screen></para>

    <para>This works with the method <methodname>build</methodname> (see <xref
    linkend="activerecord_hinzufuegen_build"/>) and
    <methodname>create</methodname> (see <xref
    linkend="activerecord_create"/>).</para>
  </section>
</section>
