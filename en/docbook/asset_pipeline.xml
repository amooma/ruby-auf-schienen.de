<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="asset_pipeline"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title xml:id="asset_pipeline.title">Asset Pipeline</title>

  <indexterm>
    <primary>asset pipeline</primary>
  </indexterm>

  <section xml:id="asset_pipeline_einleitung">
    <title xml:id="asset_pipeline_einleitung.title">Introduction</title>

    <para>The asset pipeline is integrated and used by default as of Rails
    3.1. It offers the Rails developer the opportunity of delivering CSS,
    JavaScript and image files to the browser more optimally - in other words,
    in a more compressed form and therefore more quickly. Different CSS files
    are combined into one big file and delivered to the browser with a
    fingerprint in the file name. This fingerprinting enables the browser and
    any proxy in between to optimally cache the data, so the browser can load
    these files more quickly.</para>

    <para>Within the asset pipeline, you can program CSS, SASS, JavaScript and
    CoffeeScript extensively and clearly, in order to let them be delivered
    later as automatically compressed CSS and JavaScript files.</para>

    <para>As an example we use once more our web shop with a product
    scaffold:<screen>Stefan-Wintermeyers-MacBook-Air:~ xyz$ <command>rails new webshop</command>
[...]
Stefan-Wintermeyers-MacBook-Air:~ xyz$ <command>cd webshop</command> 
Stefan-Wintermeyers-MacBook-Air:webshop xyz$ <command>rails generate scaffold product name 'price:decimal{7,2}'</command>
[...]
Stefan-Wintermeyers-MacBook-Air:webshop xyz$ <command>rake db:migrate</command>
[...]
Stefan-Wintermeyers-MacBook-Air:webshop xyz$</screen></para>

    <para>In the directory <filename>app/assets</filename> you will then find
    the following files:<screen>app/assets
|-- images
|   `-- rails.png
|-- javascripts
|   |-- application.js
|   `-- products.js.coffee
`-- stylesheets
    |-- application.css
    |-- products.css.scss
    `-- scaffolds.css.scss</screen></para>

    <para>The files <filename>app/assets/javascripts/application.js</filename>
    and <filename>app/assets/stylesheets/application.css</filename> are what
    is referred to as manifest files. They automatically include the other
    files in the relevant directory.</para>

    <section xml:id="manifest_dateien">
      <title xml:id="manifest_dateien.title">Manifest Files</title>

      <indexterm>
        <primary>manifest files</primary>
      </indexterm>

      <para>In <filename>app/assets/javascripts</filename> and
      <filename>app/assets/stylesheets</filename> there are always manifest
      files that contain instructions to the asset pipeline. They define
      everything that is to be integrated.</para>

      <section xml:id="application.js_manifest">
        <title xml:id="application.js_manifest.title">application.js</title>

        <indexterm>
          <primary>application.js</primary>
        </indexterm>

        <para>The file
        <filename>app/assets/javascripts/application.js</filename> has the
        following content:<programlisting>// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or vendor/assets/javascripts of plugins, if any, can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// the compiled file.
//
// WARNING: THE FIRST BLANK LINE MARKS THE END OF WHAT'S TO BE PROCESSED, ANY BLANK LINE SHOULD
// GO AFTER THE REQUIRES BELOW.
//
//= require jquery
//= require jquery_ujs
//= require_tree .</programlisting></para>

        <para>In the <filename>application.js</filename>, the jQuery files
        defined in the <code>jquery-rails</code> gem are automatically
        integrated (for further information on jQuery, please visit <uri
        xlink:href="http://jquery.com/">http://jquery.com/</uri>). Plus all
        other files in this directory are integrated via <code>require_tree
        .</code> as shown above.</para>

        <para>The not yet optimized result can be viewed in the development
        environment at the URL <uri
        xlink:href="http://0.0.0.0:3000/assets/application.js">http://0.0.0.0:3000/assets/application.js</uri>.</para>
      </section>

      <section xml:id="application.css_manifest">
        <title xml:id="application.css_manifest.title">application.css</title>

        <indexterm>
          <primary>application.css</primary>
        </indexterm>

        <para>The file
        <filename>app/assets/stylesheets/application.css</filename> has the
        following content:<programlisting>/*
 * This is a manifest file that'll be compiled into application.css, which will include all the files
 * listed below.
 *
 * Any CSS and SCSS file within this directory, lib/assets/stylesheets, vendor/assets/stylesheets,
 * or vendor/assets/stylesheets of plugins, if any, can be referenced here using a relative path.
 *
 * You're free to add application-wide styles to this file and they'll appear at the top of the
 * compiled file, but it's generally better to create a new file per style scope.
 *
 *= require_self
 *= require_tree .
 */
</programlisting></para>

        <para>With the command <code>require_tree .</code> all files in this
        directory are automatically integrated.</para>
      </section>
    </section>

    <section xml:id="asset_precompile">
      <title xml:id="asset_precompile.title">rake assets:precompile</title>

      <indexterm>
        <primary>rake assets:precompile</primary>
      </indexterm>

      <para>When using the asset pipeline, you need to remember that you have
      to precompile the assets before starting the Rails server in the
      production environment. This happens via the command <command>rake
      assets:precompile:</command><screen>Stefan-Wintermeyers-MacBook-Air:webshop xyz$ <command>rake assets:precompile</command>
/Users/xyz/.rvm/rubies/ruby-1.9.3-p194/bin/ruby /Users/xyz/.rvm/gems/ruby-1.9.3-p194@global/bin/rake assets:precompile:all RAILS_ENV=production RAILS_GROUPS=assets
Stefan-Wintermeyers-MacBook-Air:webshop xyz$</screen></para>

      <note>
        <para>If you forget to do this, you will find the following error
        message in the log:<screen>ActionView::Template::Error (application.css isn't precompiled)</screen></para>
      </note>

      <para>The files created by <command>rake assets:precompile</command>
      appear in the directory <filename>public/assets</filename><screen>public/assets
|-- application-0149f820dbdd285aa65e241569d8c256.css
|-- application-0149f820dbdd285aa65e241569d8c256.css.gz
|-- application-f8ca698e63b86d217c88772a65d2d20e.js
|-- application-f8ca698e63b86d217c88772a65d2d20e.js.gz
|-- application.css
|-- application.css.gz
|-- application.js
|-- application.js.gz
|-- manifest.yml
|-- rails-be8732dac73d845ac5b142c8fb5f9fb0.png
`-- rails.png</screen></para>

      <para>Go ahead and use your favorite editor to have a look at the
      created <filename>css</filename> and <filename>js</filename> files. You
      will find optimized code. If the web server supports it, the zipped
      <filename>gz</filename> files are delivered directly, which speeds
      things up a bit more.</para>

      <note>
        <para>The difference in file size is enormous. The file
        <filename>application.js</filename> created in the development
        environment has a file size of 100 KB. The file
        <filename>js.gz</filename> created by <command>rake
        assets:precompile</command> is only 36 KB. Users of cellphones in
        particular will be grateful for smaller file sizes.</para>

        <para>The speed advantage incidentally lies not just in the file size,
        but also in the fact that only one file is downloaded, not several.
        The HTTP overhead for loading a file is time-consuming.</para>
      </note>
    </section>

    <section xml:id="asset_pipeline_fingerabdruck">
      <title xml:id="asset_pipeline_fingerabdruck.title">The
      Fingerprint</title>

      <indexterm>
        <primary>asset pipeline fingerprint</primary>
      </indexterm>

      <para>The fingerprint in the file name consists of a hash sum generated
      from the content of the relevant file. This fingerprint ensures optimal
      caching and prevents an old cache being used if any changes are made to
      the content. A simple but very effective method.</para>
    </section>
  </section>

  <section xml:id="coding_links_zu_assets">
    <title xml:id="coding_links_zu_assets.title">Coding Links to an
    Asset</title>

    <indexterm>
      <primary>coding links</primary>
    </indexterm>

    <para>All files below the directory <filename>app/assets</filename> are
    delivered in normal form by the Rails server. For example, you can go to
    the URL <uri
    xlink:href="http://0.0.0.0:3000/assets/rails.png">http://0.0.0.0:3000/assets/rails.png</uri>
    to view the Rails logo saved under
    <filename>app/assets/images/rails.png</filename> and to <uri
    xlink:href="http://0.0.0.0:3000/assets/application.js">http://0.0.0.0:3000/assets/application.js</uri>
    to view the content of
    <filename>app/assets/javascripts/application.js</filename>. The Rails
    image <filename>rails.png</filename> is delivered 1:1 and the file
    <filename>application.js</filename> is first created by the asset
    pipeline.</para>

    <para>But you should never enter these files as hard-wired in a view. To
    make the most of the asset pipeline, you must use the helpers described
    here.</para>

    <section xml:id="coding_link_image_tag">
      <title xml:id="coding_link_image_tag.title">Coding Link to an
      Image</title>

      <indexterm>
        <primary>image_tag</primary>
      </indexterm>

      <para>You can retrieve an image via the helper <code>image_tag</code>.
      This is what it would look like in the view for the file
      <filename>app/assets/images/rails.png</filename>:<programlisting>&lt;%= image_tag "rails.png" %&gt;</programlisting></para>

      <para>In development mode, the following HTML code results from
      this:<programlisting>&lt;img alt="Rails" src="/assets/rails.png" /&gt;</programlisting></para>

      <para>In production mode, you get an HTML code that points to a
      precompiled file with fingerprint:<programlisting>&lt;img alt="Rails" src="/assets/rails-be8732dac73d845ac5b142c8fb5f9fb0.png" /&gt;</programlisting></para>
    </section>

    <section xml:id="coding_link_javascript_include_tag">
      <title xml:id="coding_link_javascript_include_tag.title">Coding Link to
      a JavaScript File</title>

      <indexterm>
        <primary>javascript_include_tag</primary>
      </indexterm>

      <para>You can use the helper <code>javascript_include_tag</code> to
      retrieve a JavaScript file compiled by the asset pipeline. This is what
      it would look like in the view for the file
      <filename>app/assets/javascripts/application.js</filename>:<programlisting>%= javascript_include_tag "application" %&gt;</programlisting></para>

      <para>In development mode, the following HTML code results from
      this:<programlisting>&lt;link href="/assets/application.css?body=1" media="all" rel="stylesheet" type="text/css" /&gt;
&lt;link href="/assets/products.css?body=1" media="all" rel="stylesheet" type="text/css" /&gt;
&lt;link href="/assets/scaffolds.css?body=1" media="all" rel="stylesheet" type="text/css" /&gt;</programlisting></para>

      <para>In production mode, you get an HTML code that points to a
      precompiled file with fingerprint:<programlisting>&lt;link href="/assets/application-0149f820dbdd285aa65e241569d8c256.css" media="all" rel="stylesheet" type="text/css" /&gt;
</programlisting></para>
    </section>

    <section xml:id="coding_link_stylesheet_link_tag">
      <title xml:id="coding_link_stylesheet_link_tag.title">Coding Link to a
      CSS File</title>

      <indexterm>
        <primary>stylesheet_link_tag</primary>
      </indexterm>

      <para>A stylesheet compiled by the asset pipeline can be retrieved via
      the helper <code>stylesheet_link_tag</code>. In the view, it would look
      like this for the file
      <filename>app/assets/stylesheets/application.css</filename>:<programlisting>&lt;%= stylesheet_link_tag "application" %&gt;</programlisting></para>

      <para>In development mode, the following HTML code results from
      this:<programlisting>&lt;script src="/assets/jquery.js?body=1" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="/assets/jquery_ujs.js?body=1" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="/assets/products.js?body=1" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="/assets/application.js?body=1" type="text/javascript"&gt;&lt;/script&gt;</programlisting></para>

      <para>In production mode, you get an HTML code that points to a
      precompiled file with fingerprint:<programlisting>&lt;script src="/assets/application-f8ca698e63b86d217c88772a65d2d20e.js" type="text/javascript"&gt;&lt;/script&gt;</programlisting></para>
    </section>

    <section xml:id="coding_links_application_html_erb_defaults">
      <title
      xml:id="coding_links_application_html_erb_defaults.title">Defaults in
      the application.html.erb</title>

      <para>Incidentally, the file
      <filename>app/views/layouts/application.html.erb</filename> that the
      scaffold generator creates by default already contains the coding links
      for these JavaScript and stylesheet files:<programlisting>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Webshop&lt;/title&gt;
<emphasis>  &lt;%= stylesheet_link_tag    "application", :media =&gt; "all" %&gt;
  &lt;%= javascript_include_tag "application" %&gt;</emphasis>
  &lt;%= csrf_meta_tags %&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;%= yield %&gt;

&lt;/body&gt;
&lt;/html&gt;</programlisting></para>
    </section>
  </section>
</chapter>
