<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="bundler_und_gems"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title xml:id="bundler_und_gems.title">Bundler and Gems</title>

  <section xml:id="gems">
    <title xml:id="gems.title">Gems</title>

    <indexterm>
      <primary>gems</primary>
    </indexterm>

    <para>In <xref linkend="installation-und-versionsauswahl"/> you have
    already seen that you can use the command <command>gem install rails
    --version '~&gt; 3.2.0'</command> to install a current Rails 3.2. Gems
    constitute the package management in the world of Ruby. If a Ruby
    developer wants to offer a specific feature or a certain program or
    collection of programs to other Ruby developers, he can create a "gem"
    from these. This gem can then be installed via <command>gem
    install</command>. How to create a gem and where it can be hosted goes
    beyond the scope of this introduction chapter. The important thing for our
    purposes is that for example Rails in itself is also available as
    gem.</para>
  </section>

  <section xml:id="bundler">
    <title xml:id="bundler.title">Bundler</title>

    <indexterm>
      <primary>Bundler</primary>
    </indexterm>

    <indexterm>
      <primary>bundle</primary>

      <see>Bundler</see>
    </indexterm>

    <para>In a Rails project, different gems are used (see <xref
    linkend="gems"/>) and a developer can also add further gems. Bundler helps
    the developer to install all these gems in the right version and to take
    into account important dependencies. In previous Rails versions, you as
    developer had to always call a <command>bundle install</command> after a
    <command>rails new</command>. Now, this is done automatically within
    <command>rails new</command>. In the output you can see which gems are
    installed by <command>bundle install</command>:<screen>$ rails new webshop
  [...]
         run  bundle install
Fetching gem metadata from https://rubygems.org/...........
Fetching gem metadata from https://rubygems.org/..
Using rake (10.0.2) 
Using i18n (0.6.1) 
Using multi_json (1.3.7) 
Using activesupport (3.2.9) 
Using builder (3.0.4) 
Using activemodel (3.2.9) 
Using erubis (2.7.0) 
Using journey (1.0.4) 
Using rack (1.4.1) 
Using rack-cache (1.2) 
Using rack-test (0.6.2) 
Using hike (1.2.1) 
Using tilt (1.3.3) 
Using sprockets (2.2.1) 
Using actionpack (3.2.9) 
Using mime-types (1.19) 
Using polyglot (0.3.3) 
Using treetop (1.4.12) 
Using mail (2.4.4) 
Using actionmailer (3.2.9) 
Using arel (3.0.2) 
Using tzinfo (0.3.35) 
Using activerecord (3.2.9) 
Using activeresource (3.2.9) 
Using bundler (1.2.1) 
Using coffee-script-source (1.4.0) 
Using execjs (1.4.0) 
Using coffee-script (2.2.0) 
Using rack-ssl (1.3.2) 
Using json (1.7.5) 
Using rdoc (3.12) 
Using thor (0.16.0) 
Using railties (3.2.9) 
Using coffee-rails (3.2.2) 
Using jquery-rails (2.1.3) 
Using rails (3.2.9) 
Using sass (3.2.3) 
Using sass-rails (3.2.5) 
Using sqlite3 (1.3.6) 
Using uglifier (1.3.0) 
Your bundle is complete! Use `bundle show [gemname]` to see where a bundled gem is installed.
$ cd webshop 
$ </screen></para>

    <para>The file <filename>Gemfile</filename> generated by <command>rails
    new</command> indicates which gems are to be installed by
    Bundler:<programlisting>source 'https://rubygems.org'

gem 'rails', '3.2.9'

# Bundle edge Rails instead:
# gem 'rails', :git =&gt; 'git://github.com/rails/rails.git'

gem 'sqlite3'


# Gems used only for assets and not required
# in production environments by default.
group :assets do
  gem 'sass-rails',   '~&gt; 3.2.3'
  gem 'coffee-rails', '~&gt; 3.2.1'

  # See https://github.com/sstephenson/execjs#readme for more supported runtimes
  # gem 'therubyracer', :platforms =&gt; :ruby

  gem 'uglifier', '&gt;= 1.0.3'
end

gem 'jquery-rails'

# To use ActiveModel has_secure_password
# gem 'bcrypt-ruby', '~&gt; 3.0.0'

# To use Jbuilder templates for JSON
# gem 'jbuilder'

# Use unicorn as the app server
# gem 'unicorn'

# Deploy with Capistrano
# gem 'capistrano'

# To use debugger
# gem 'debugger'</programlisting></para>

    <para>The format used is easy to explain: the word <code>gem</code> is
    followed by the name of the gem and then, if required, a specification of
    the version of the gem.</para>

    <para>For example, the line <code>gem 'rails', '3.2.9'</code> stands for
    "install the gem with the name <code>rails</code> in the version
    3.2.9".</para>

    <para>With <code>~&gt;</code> before the version number you can determine
    that the newest version after this version number should be installed. As
    a result, the last digit is incremented, so for example <code>gem 'rails',
    '~&gt; 3.2.3'</code> would correspondingly install a Rails 3.2.9, but not
    a 3.3 (for the latter, you would need to specify <code>gem 'rails', '~&gt;
    3.2'</code>).</para>

    <important>
      <para>You have the option of installing certain gems only in certain
      environments. To do so, you need to enclose the corresponding lines in a
      <code>group :name do</code> loop.</para>
    </important>

    <para>Apart from the file <filename>Gemfile</filename> there is also the
    file <filename>Gemfile.lock</filename> and the exact versions of the
    installed gems are listed there. In the above example, it looks like
    this:<programlisting>GEM
  remote: https://rubygems.org/
  specs:
    actionmailer (3.2.9)
      actionpack (= 3.2.9)
      mail (~&gt; 2.4.4)
    actionpack (3.2.9)
      activemodel (= 3.2.9)
      activesupport (= 3.2.9)
      builder (~&gt; 3.0.0)
      erubis (~&gt; 2.7.0)
      journey (~&gt; 1.0.4)
      rack (~&gt; 1.4.0)
      rack-cache (~&gt; 1.2)
      rack-test (~&gt; 0.6.1)
      sprockets (~&gt; 2.2.1)
    activemodel (3.2.9)
      activesupport (= 3.2.9)
      builder (~&gt; 3.0.0)
    activerecord (3.2.9)
      activemodel (= 3.2.9)
      activesupport (= 3.2.9)
      arel (~&gt; 3.0.2)
      tzinfo (~&gt; 0.3.29)
    activeresource (3.2.9)
      activemodel (= 3.2.9)
      activesupport (= 3.2.9)
    activesupport (3.2.9)
      i18n (~&gt; 0.6)
      multi_json (~&gt; 1.0)
    arel (3.0.2)
    builder (3.0.4)
    coffee-rails (3.2.2)
      coffee-script (&gt;= 2.2.0)
      railties (~&gt; 3.2.0)
    coffee-script (2.2.0)
      coffee-script-source
      execjs
    coffee-script-source (1.4.0)
    erubis (2.7.0)
    execjs (1.4.0)
      multi_json (~&gt; 1.0)
    hike (1.2.1)
    i18n (0.6.1)
    journey (1.0.4)
    jquery-rails (2.1.3)
      railties (&gt;= 3.1.0, &lt; 5.0)
      thor (~&gt; 0.14)
    json (1.7.5)
    mail (2.4.4)
      i18n (&gt;= 0.4.0)
      mime-types (~&gt; 1.16)
      treetop (~&gt; 1.4.8)
    mime-types (1.19)
    multi_json (1.3.7)
    polyglot (0.3.3)
    rack (1.4.1)
    rack-cache (1.2)
      rack (&gt;= 0.4)
    rack-ssl (1.3.2)
      rack
    rack-test (0.6.2)
      rack (&gt;= 1.0)
    rails (3.2.9)
      actionmailer (= 3.2.9)
      actionpack (= 3.2.9)
      activerecord (= 3.2.9)
      activeresource (= 3.2.9)
      activesupport (= 3.2.9)
      bundler (~&gt; 1.0)
      railties (= 3.2.9)
    railties (3.2.9)
      actionpack (= 3.2.9)
      activesupport (= 3.2.9)
      rack-ssl (~&gt; 1.3.2)
      rake (&gt;= 0.8.7)
      rdoc (~&gt; 3.4)
      thor (&gt;= 0.14.6, &lt; 2.0)
    rake (10.0.2)
    rdoc (3.12)
      json (~&gt; 1.4)
    sass (3.2.3)
    sass-rails (3.2.5)
      railties (~&gt; 3.2.0)
      sass (&gt;= 3.1.10)
      tilt (~&gt; 1.3)
    sprockets (2.2.1)
      hike (~&gt; 1.2)
      multi_json (~&gt; 1.0)
      rack (~&gt; 1.0)
      tilt (~&gt; 1.1, != 1.3.0)
    sqlite3 (1.3.6)
    thor (0.16.0)
    tilt (1.3.3)
    treetop (1.4.12)
      polyglot
      polyglot (&gt;= 0.3.1)
    tzinfo (0.3.35)
    uglifier (1.3.0)
      execjs (&gt;= 0.3.0)
      multi_json (~&gt; 1.0, &gt;= 1.0.2)

PLATFORMS
  ruby

DEPENDENCIES
  coffee-rails (~&gt; 3.2.1)
  jquery-rails
  rails (= 3.2.9)
  sass-rails (~&gt; 3.2.3)
  sqlite3
  uglifier (&gt;= 1.0.3)</programlisting></para>

    <para>The advantage of <filename>Gemfile.lock</filename> is that it makes
    it possible for several developers to work on the same Rails project
    independently from one another and to still be sure that they are all
    working with the same gem versions. If a file is
    <filename>Gemfile.lock</filename>, this will be used by the Bundler. This
    is also useful for deploying the Rails project later on a web
    server.</para>

    <para>Thanks to this mechanism you can use and develop several Rails
    projects with different gem version numbers in parallel.</para>

    <section xml:id="bundle_update">
      <title xml:id="bundle_update.title">bundle update</title>

      <para>With <command>bundle update</command> you can update gems to new
      versions. As an example, I have a Rails project with the Rails version
      3.2.5:<screen>$ rails -v
Rails 3.2.5
$</screen></para>

      <para>In the file <filename>Gemfile</filename>, this version is
      listed:<screen>$ head -n 4 Gemfile
source 'https://rubygems.org'

gem 'rails', '3.2.5'

$ </screen></para>

      <para>And also in the <filename>Gemfile.lock</filename>:<screen>$ grep 'rails' Gemfile.lock 
    coffee-rails (3.2.2)
    jquery-rails (2.0.2)
    rails (3.2.5)
    sass-rails (3.2.5)
  coffee-rails (~&gt; 3.2.1)
  jquery-rails
  rails (= 3.2.5)
  sass-rails (~&gt; 3.2.3)
$</screen></para>

      <para>If we want to update this Rails project to the Rails version
      3.2.6, we need to change the entry in the <filename>Gemfile</filename>
      as follows:<programlisting>source 'https://rubygems.org'

gem 'rails', '3.2.6'

# Bundle edge Rails instead:
# gem 'rails', :git =&gt; 'git://github.com/rails/rails.git'

gem 'sqlite3'


# Gems used only for assets and not required
# in production environments by default.
group :assets do
  gem 'sass-rails',   '~&gt; 3.2.3'
  gem 'coffee-rails', '~&gt; 3.2.1'

  # See https://github.com/sstephenson/execjs#readme for more supported runtimes
  # gem 'therubyracer', :platforms =&gt; :ruby

  gem 'uglifier', '&gt;= 1.0.3'
end

gem 'jquery-rails'
</programlisting></para>

      <para>After this change, you can use <command>bundle update
      rails</command> to install the new Rails version (required dependencies
      are automatically taken into account by Bundler):<screen>$ bundle update rails
Fetching gem metadata from https://rubygems.org/.........
Using rake (0.9.2.2) 
Using i18n (0.6.0) 
Using multi_json (1.3.6) 
Installing activesupport (3.2.6) 
Using builder (3.0.0) 
Installing activemodel (3.2.6) 
Using erubis (2.7.0) 
Using journey (1.0.4) 
Using rack (1.4.1) 
Using rack-cache (1.2) 
Using rack-test (0.6.1) 
Using hike (1.2.1) 
Using tilt (1.3.3) 
Using sprockets (2.1.3) 
Installing actionpack (3.2.6) 
Using mime-types (1.19) 
Using polyglot (0.3.3) 
Using treetop (1.4.10) 
Using mail (2.4.4) 
Installing actionmailer (3.2.6) 
Using arel (3.0.2) 
Using tzinfo (0.3.33) 
Installing activerecord (3.2.6) 
Installing activeresource (3.2.6) 
Using bundler (1.1.4) 
Using coffee-script-source (1.3.3) 
Using execjs (1.4.0) 
Using coffee-script (2.2.0) 
Using rack-ssl (1.3.2) 
Using json (1.7.3) 
Using rdoc (3.12) 
Using thor (0.15.4) 
Installing railties (3.2.6) 
Using coffee-rails (3.2.2) 
Using jquery-rails (2.0.2) 
Installing rails (3.2.6) 
Using sass (3.1.20) 
Using sass-rails (3.2.5) 
Using sqlite3 (1.3.6) 
Using uglifier (1.2.6) 
Your bundle is updated! Use `bundle show [gemname]` to see where a bundled gem is installed.
$ rails -v
Rails 3.2.6
$</screen></para>

      <important>
        <para>After every gem update, you should first run your tests to make
        sure that a new gem version does not add any unwanted side
        effects.</para>
      </important>
    </section>

    <section xml:id="bundle_outdated">
      <title xml:id="bundle_updated.title">bundle outdated</title>

      <para>If you want to know which of the gems used by your Rails project
      are now available in a new version, you can do this via the command
      <command>bundle outdated</command>. Example:<screen>$ bundle outdated
Fetching gem metadata from https://rubygems.org/.........

Outdated gems included in the bundle:
  * sprockets (2.4.4 &gt; 2.1.3)

$</screen></para>
    </section>

    <section xml:id="bundle_exec">
      <title xml:id="bundle_exec.title">bundle exec</title>

      <para><command>bundle exec</command> is probably one of the commands
      Rails developers hate the most. It is required whenever a program such
      as <command>rake</command> is used in a Rails project and is present in
      a different version than the rest of the system. The resulting error
      message is always easy to implement:<screen>You have already activated rake 0.10, but your Gemfile requires rake 0.9.2.2. Using bundle exec may solve this.</screen></para>

      <para>In this case, it helps to invoke the command with a preceding
      <command>bundle exec</command>:<screen>$ bundle exec rake db:migrate</screen></para>

      <section>
        <title>binstubs</title>

        <para>In some environments, using <command>bundle exec</command> is
        too complicated. In that case, you can install programs with the
        correct version via <command>bundle install --binstubs</command> in
        the directory bin:<screen>$ bundle install --binstubs
Using rake (0.9.2.2) 
Using i18n (0.6.0) 
Using multi_json (1.3.6) 
Using activesupport (3.2.6) 
Using builder (3.0.0) 
Using activemodel (3.2.6) 
Using erubis (2.7.0) 
Using journey (1.0.4) 
Using rack (1.4.1) 
Using rack-cache (1.2) 
Using rack-test (0.6.1) 
Using hike (1.2.1) 
Using tilt (1.3.3) 
Using sprockets (2.1.3) 
Using actionpack (3.2.6) 
Using mime-types (1.19) 
Using polyglot (0.3.3) 
Using treetop (1.4.10) 
Using mail (2.4.4) 
Using actionmailer (3.2.6) 
Using arel (3.0.2) 
Using tzinfo (0.3.33) 
Using activerecord (3.2.6) 
Using activeresource (3.2.6) 
Using coffee-script-source (1.3.3) 
Using execjs (1.4.0) 
Using coffee-script (2.2.0) 
Using rack-ssl (1.3.2) 
Using json (1.7.3) 
Using rdoc (3.12) 
Using thor (0.15.4) 
Using railties (3.2.6) 
Using coffee-rails (3.2.2) 
Using jquery-rails (2.0.2) 
Using bundler (1.1.4) 
Using rails (3.2.6) 
Using sass (3.1.20) 
Using sass-rails (3.2.5) 
Using sqlite3 (1.3.6) 
Using uglifier (1.2.6) 
Your bundle is complete! Use `bundle show [gemname]` to see where a bundled gem is installed.
$ ls bin
erubis  rake  ri  scss  tt
rackup  rake2thor sass  thor
rails   rdoc      sass-convert   tilt
$</screen></para>

        <para>Afterwards, you can always use these programs. Example:<screen>$ bin/rake db:migrate
==  CreateUsers: migrating ====================================================
-- create_table(:users)
   -&gt; 0.0018s
==  CreateUsers: migrated (0.0019s) ===========================================

$</screen></para>
      </section>
    </section>

    <section xml:id="weitere_informationen_zu_bundler">
      <title xml:id="weitere_informationen_zu_bundler.title">Further
      Information on Bundler</title>

      <para>The topic Bundler is far more complex than can be described here.
      If you want to find out more on Bundler, please visit the following
      websites to find further information:<itemizedlist>
          <listitem>
            <para><link
            xlink:href="http://railscasts.com/episodes/201-bundler-revised">http://railscasts.com/episodes/201-bundler-revised</link></para>
          </listitem>

          <listitem>
            <para><link
            xlink:href="http://gembundler.com/">http://gembundler.com/</link></para>
          </listitem>
        </itemizedlist></para>
    </section>
  </section>
</chapter>
