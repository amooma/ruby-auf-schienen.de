<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xml:id="activerecord_validation"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title xml:id="activerecord_validation.title">Validation</title>

  <indexterm>
    <primary>ActiveRecord</primary>

    <secondary>validation</secondary>
  </indexterm>

  <para>Non-valid records are frequently a source of errors in programs. With
  <methodname>validates</methodname>, Rails offers a quick and easy way of
  validating them. That way you can be sure that only meaningful records will
  find their way into your database.</para>

  <section xml:id="validation_vorbereitung">
    <title
    xml:id="activerecord_validation_vorbereitung.title">Preparation</title>

    <para>Let's create a new application for this chapter:<screen>$ rails new shop
  [...]
$ cd shop
$ rails generate model product name 'price:decimal{7,2}' weight:integer in_stock:boolean expiration_date:date
  [...]
$ rake db:migrate
  [...]
$</screen></para>
  </section>

  <section>
    <title>The Basic Idea</title>

    <para>For each model, there is a matching model file in the directory
    <filename>app/models/</filename>. In this Ruby code, we can not only
    define database dependencies, but also implement all validations. The
    advantage: Every programmer knows where to find it.</para>

    <para>Without any validation, we can create an empty record in a model
    without a problem:<screen>$ rails console
Loading development environment (Rails 4.0.0)
&gt;&gt; Product.create
   (0.1ms)  begin transaction
  SQL (2.6ms)  INSERT INTO "products" ("created_at", "updated_at") VALUES (?, ?)  [["created_at", Tue, 16 Jul 2013 17:50:34 UTC +00:00], ["updated_at", Tue, 16 Jul 2013 17:50:34 UTC +00:00]]
   (3.4ms)  commit transaction
=&gt; #&lt;Product id: 1, name: nil, price: nil, weight: nil, in_stock: nil, expiration_date: nil, created_at: "2013-07-16 17:50:34", updated_at: "2013-07-16 17:50:34"&gt;
&gt;&gt; puts Product.first.to_yaml
  Product Load (0.3ms)  SELECT "products".* FROM "products" ORDER BY "products"."id" ASC LIMIT 1
--- !ruby/object:Product
attributes:
  id: 1
  name: 
  price: 
  weight: 
  in_stock: 
  expiration_date: 
  created_at: 2013-07-16 17:50:34.791368000 Z
  updated_at: 2013-07-16 17:50:34.791368000 Z
=&gt; nil
&gt;&gt; exit
$</screen></para>

    <para>But in practice, this record with no content doesn't make any sense.
    A <classname>Product</classname> needs to have a <varname>name</varname>
    and a <methodname>price</methodname>. That's why we can define validations
    in ActiveRecord. Then you can ensure as programmer that only records that
    are valid for you are saved in your database.</para>

    <para>To make the mechanism easier to understand, I am going to jump ahead
    a bit and use the <code>presence</code> helper. Please fill your
    <filename>app/model/product.rb</filename> with the following
    content:<programlisting>class Product &lt; ActiveRecord::Base
  validates :name,
            presence: true

  validates :price,
            presence: true
end</programlisting></para>

    <para>Now we try again to create an empty record in the console:<screen>$ rails console
Loading development environment (Rails 4.0.0)
&gt;&gt; product = Product.create
   (0.1ms)  begin transaction
   (0.1ms)  rollback transaction
=&gt; #&lt;Product id: nil, name: nil, price: nil, weight: nil, in_stock: nil, expiration_date: nil, created_at: nil, updated_at: nil&gt;
&gt;&gt; </screen></para>

    <para>Watch out for the <code>rollback transaction</code> part and the
    misssing <varname>id</varname> of the <classname>Product</classname>
    object! Rails began the transaction of creating a new record but for some
    reason it couldn't do it. So it had to rollback the transaction. The
    validation method intervened before the record was saved. So validating
    happens before saving.</para>

    <para>Can we access the errors? Yes, via the method
    <methodname>errors</methodname> or with
    <methodname>errors.messages</methodname> we can look at the errors that
    occurred:<screen>&gt;&gt; product.errors
=&gt; #&lt;ActiveModel::Errors:0x007fec75067a20 @base=#&lt;Product id: nil, name: nil, price: nil, weight: nil, in_stock: nil, expiration_date: nil, created_at: nil, updated_at: nil&gt;, @messages={:name=&gt;["can't be blank"], :price=&gt;["can't be blank"]}&gt;
&gt;&gt; product.errors.messages
=&gt; {:name=&gt;["can't be blank"], :price=&gt;["can't be blank"]}
&gt;&gt; </screen></para>

    <para>This error message was defined for a human and English-speaking user
    (more on this and how the errors can be translated into another language
    in <xref linkend="i18n"/>).</para>

    <para>Only once we assign a value to the attributes
    <varname>name</varname> and <methodname>price</methodname>, we can save
    the object:<screen>&gt;&gt; product.name = 'Milk (1 liter)'
=&gt; "Milk (1 liter)"
&gt;&gt; product.price = 0.45
=&gt; 0.45
&gt;&gt; product.save
   (0.2ms)  begin transaction
  SQL (2.9ms)  INSERT INTO "products" ("created_at", "name", "price", "updated_at") VALUES (?, ?, ?, ?)  [["created_at", Tue, 16 Jul 2013 17:52:50 UTC +00:00], ["name", "Milk (1 liter)"], ["price", #&lt;BigDecimal:7fec739394c0,'0.45E0',9(45)&gt;], ["updated_at", Tue, 16 Jul 2013 17:52:50 UTC +00:00]]
   (2.9ms)  commit transaction
=&gt; true
&gt;&gt; </screen></para>

    <section xml:id="validation_valid">
      <title xml:id="validation_valid.title">valid?</title>

      <indexterm>
        <primary>ActiveRecord</primary>

        <secondary>methods</secondary>

        <tertiary>valid?()</tertiary>
      </indexterm>

      <para>The method <methodname>valid?</methodname> indicates in boolean
      form if an object is valid. So you can check the validity already before
      you save:<screen>&gt;&gt; product = Product.new
=&gt; #&lt;Product id: nil, name: nil, price: nil, weight: nil, in_stock: nil, expiration_date: nil, created_at: nil, updated_at: nil&gt;
&gt;&gt; product.valid?
=&gt; false
&gt;&gt;</screen></para>
    </section>

    <section xml:id="validation_save_validate_false">
      <title xml:id="validation_save_validate_false.title">save( validate:
      false )</title>

      <indexterm>
        <primary>ActiveRecord</primary>

        <secondary>methods</secondary>

        <tertiary>save()</tertiary>
      </indexterm>

      <para>As so often in life, you can find a way around everything. If you
      pass the parameter <code>:validate =&gt; false</code> to the method
      <methodname>save</methodname>, the data of <code>Validation</code> is
      saved:<screen>&gt;&gt; product = Product.new
=&gt; #&lt;Product id: nil, name: nil, price: nil, weight: nil, in_stock: nil, expiration_date: nil, created_at: nil, updated_at: nil&gt;
&gt;&gt; product.valid?
=&gt; false
&gt;&gt; product.save
   (0.1ms)  begin transaction
   (0.1ms)  rollback transaction
=&gt; false
&gt;&gt; product.save(validate: false)
   (0.1ms)  begin transaction
  SQL (0.8ms)  INSERT INTO "products" ("created_at", "expiration_date", "in_stock", "name", "price", "updated_at", "weight") VALUES (?, ?, ?, ?, ?, ?, ?)  [["created_at", Mon, 19 Nov 2012 09:28:29 UTC +00:00], ["expiration_date", nil], ["in_stock", nil], ["name", nil], ["price", nil], ["updated_at", Mon, 19 Nov 2012 09:28:29 UTC +00:00], ["weight", nil]]
   (2.3ms)  commit transaction
=&gt; true
&gt;&gt; exit
$ </screen></para>

      <warning>
        <para>I assume that you understand the problems involved here. Please
        only use this option if there is a good reason to do so. Otherwise you
        might as well do without the whole validation process.</para>
      </warning>
    </section>
  </section>

  <section xml:id="validates_presence_of">
    <title xml:id="validates_presence_of.title">presence</title>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>methods</secondary>

      <tertiary>validates_presence_of()</tertiary>
    </indexterm>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>validates</secondary>

      <tertiary>presence</tertiary>
    </indexterm>

    <para>In our model <varname>product</varname> there are a few fields that
    must be filled in in any case. We can achieve this via
    <methodname>presence</methodname>.</para>

    <para><filename>app/models/product.rb</filename><programlisting>class Product &lt; ActiveRecord::Base
  validates :name,
            presence: true

  validates :price,
            presence: true
end
</programlisting></para>

    <para>If we try to create an empty user record with this, we get lots of
    validation errors:<screen>$ rails console
Loading development environment (Rails 4.0.0)
&gt;&gt; product = Product.create
   (0.1ms)  begin transaction
   (0.1ms)  rollback transaction
=&gt; #&lt;Product id: nil, name: nil, price: nil, weight: nil, in_stock: nil, expiration_date: nil, created_at: nil, updated_at: nil&gt;
&gt;&gt; product.errors.messages
=&gt; {:name=&gt;["can't be blank"], :price=&gt;["can't be blank"]}
&gt;&gt;</screen></para>

    <para>Only once we have entered all the data, the record can be
    saved:<screen>&gt;&gt; product.name = 'Milk (1 liter)'
=&gt; "Milk (1 liter)"
&gt;&gt; product.price = 0.45
=&gt; 0.45
&gt;&gt; product.save
   (0.2ms)  begin transaction
  SQL (6.3ms)  INSERT INTO "products" ("created_at", "expiration_date", "in_stock", "name", "price", "updated_at", "weight") VALUES (?, ?, ?, ?, ?, ?, ?)  [["created_at", Mon, 19 Nov 2012 09:30:21 UTC +00:00], ["expiration_date", nil], ["in_stock", nil], ["name", "Milk (1 liter)"], ["price", #&lt;BigDecimal:7fc7044fad08,'0.45E0',9(45)&gt;], ["updated_at", Mon, 19 Nov 2012 09:30:21 UTC +00:00], ["weight", nil]]
   (2.5ms)  commit transaction
=&gt; true
&gt;&gt; exit
$</screen></para>
  </section>

  <section xml:id="validates_length_of">
    <title xml:id="validates_length_of.title">length</title>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>methods</secondary>

      <tertiary>validates_length_of()</tertiary>
    </indexterm>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>validates</secondary>

      <tertiary>length</tertiary>
    </indexterm>

    <para>With <methodname>length</methodname> you can limit the length of a
    specific attribute. It's easiest to explain using an example. Let us limit
    the maximum length of the name to 20 and the minimum to 2.</para>

    <para><filename>app/models/product.rb</filename><programlisting>class Product &lt; ActiveRecord::Base
  validates :name,
            presence: true,
            length: { in: 2..20 }

  validates :price,
            :presence =&gt; true
end
</programlisting></para>

    <para>If we now try to save a <classname>Product</classname> with a
    <methodname>name</methodname> that consists in one letter, we get an error
    message:<screen>$ rails console
Loading development environment (Rails 4.0.0)
&gt;&gt; product = Product.create(:name =&gt; 'M', :price =&gt; 0.45)
   (0.1ms)  begin transaction
   (0.1ms)  rollback transaction
=&gt; #&lt;Product id: nil, name: "M", price: #&lt;BigDecimal:7f9f3d0943c0,'0.45E0',9(45)&gt;, weight: nil, in_stock: nil, expiration_date: nil, created_at: nil, updated_at: nil&gt;
&gt;&gt; product.errors.messages
=&gt; {:name=&gt;["is too short (minimum is 2 characters)"]}
&gt;&gt; exit
$</screen></para>

    <section xml:id="validates_length_of_optionen">
      <title xml:id="validates_length_of_optionen.title">Options</title>

      <para><methodname>length</methodname> can be called with the following
      options.</para>

      <section>
        <title>minimum</title>

        <para>The minimum length of an attribute. Example:</para>

        <para><programlisting>validates :name,
          presence: true,
          length: { minimum: 2 }</programlisting></para>

        <section>
          <title>too_short</title>

          <para>Defines the error message of
          <methodname>:minimum</methodname>. Default: "is too short (min is %d
          characters)". Example:<programlisting>validates :name,
          presence: true,
          length: { minimum: 5 ,
          too_short: "must have at least %{count} characters"}
</programlisting><note>
              <para>For all error messages, please note <xref
              linkend="i18n"/>.</para>
            </note></para>
        </section>
      </section>

      <section>
        <title>maximum</title>

        <para>The maximum length of an attribute. Example:<programlisting>validates :name,
          presence: true,
          length: { maximum: 20 }</programlisting></para>

        <section>
          <title>too_long</title>

          <para>Defines the error message of
          <methodname>:maximum</methodname>. Default: "is too long (maximum is
          %d characters)". Example:<programlisting>validates :name,
          presence: true,
          length: { maximum: 20 ,
          too_long: "must have at most %{count} characters" }
</programlisting><note>
              <para>For all error messages, please note <xref
              linkend="i18n"/>.</para>
            </note></para>
        </section>
      </section>

      <section>
        <title>is</title>

        <para>Is exactly the specified number of characters long.
        Example:<programlisting>validates :name,
          presence: true,
          length: { is: 8 }</programlisting></para>
      </section>

      <section>
        <title>:in or :within</title>

        <para>Defines a length interval. The first number specifies the
        minimum number of the range and the second the maximum.
        Example:<programlisting>validates :name,
          presence: true,
          length: { in: 2..20 }</programlisting></para>
      </section>

      <section>
        <title>tokenizer</title>

        <para>You can use this to define how the attribute should be split for
        counting. Default: <code>lambda{ |value| value.split(//) }</code>
        (individual characters are counted). Example (for counting
        words):<programlisting>validates :content,
          presence: true,
          length: { in: 2..20 },
          tokenizer: lambda {|str| str.scan(/\w+/)}
</programlisting></para>
      </section>
    </section>
  </section>

  <section xml:id="validates_numericality_of">
    <title xml:id="validates_numericality_of.title">numericality</title>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>methods</secondary>

      <tertiary>validates_numericality_of()</tertiary>
    </indexterm>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>validates</secondary>

      <tertiary>numericality</tertiary>
    </indexterm>

    <para>With <methodname>numericality</methodname> you can check if an
    attribute is a number. It's easier to explain if we use an example.</para>

    <para><filename>app/models/product.rb</filename><programlisting>class Product &lt; ActiveRecord::Base
  validates :name,
            presence: true,
            length: { in: 2..20 }

  validates :price,
            presence: true

  validates :weight,
            numericality: true
end
</programlisting></para>

    <para>If we now use a <varname>weight</varname> that consists of letters
    or contains letters instead of numbers, we will get an error
    message:<screen>$ rails console
Loading development environment (Rails 4.0.0)
&gt;&gt; product = Product.create(name: 'Milk (1 liter)', price: 0.45, weight: 'abc') 
   (0.1ms)  begin transaction
   (0.1ms)  rollback transaction
=&gt; #&lt;Product id: nil, name: "Milk (1 liter)", price: #&lt;BigDecimal:7ff4a4380b30,'0.45E0',9(45)&gt;, weight: 0, in_stock: nil, expiration_date: nil, created_at: nil, updated_at: nil&gt;
&gt;&gt; product.errors.messages
=&gt; {:weight=&gt;["is not a number"]}
&gt;&gt; exit
$ </screen></para>

    <tip>
      <para>You can use <methodname>numericality</methodname> to define the
      content as number even if an attribute is saved as string in the
      database.</para>
    </tip>

    <section xml:id="validates_numericality_of_optionen">
      <title xml:id="validates_numericality_of_optionen.title">Options</title>

      <para><methodname>numericality</methodname> can be called with the
      following options.</para>

      <section>
        <title>only_integer</title>

        <para>The attribute can only contain an integer. Default: false.
        Example:<programlisting>validates :weight, 
          numericality: { only_integer: true }
</programlisting></para>
      </section>

      <section>
        <title>greater_than</title>

        <para>The number saved in the attribute must be greater than the
        specified value. Example:<programlisting>validates :weight, 
          numericality: { greater_than: 100 }
</programlisting></para>
      </section>

      <section>
        <title>greater_than_or_equal_to</title>

        <para>The number saved in the attribute must be greater than or equal
        to the specified value. Example:<programlisting>validates :weight, 
          numericality: { greater_than_or_equal_to: 100 }
</programlisting></para>
      </section>

      <section>
        <title>equal_to</title>

        <para>Defines a specific value that the attribute must have.
        Example:<programlisting>validates :weight, 
          numericality: { equal_to: 100 }
</programlisting></para>
      </section>

      <section>
        <title>less_than</title>

        <para>The number saved in the attribute must be less than the
        specified value. Example:<programlisting>validates :weight, 
          numericality: { less_than: 100 }
</programlisting></para>
      </section>

      <section>
        <title>less_than_or_equal_to</title>

        <para>The number saved in the attribute must be less than or equal to
        the specified value. Example:<programlisting>validates :weight, 
          numericality: { less_than_or_equal_to: 100 }
</programlisting></para>
      </section>

      <section>
        <title>odd</title>

        <para>The number saved in the attribute must be an odd number.
        Example:<programlisting>validates :weight, 
          numericality: { odd: true }
</programlisting></para>
      </section>

      <section>
        <title>even</title>

        <para>The number saved in the attribute must be an even number.
        Example:<programlisting>validates :weight, 
          numericality: { even: true }
</programlisting></para>
      </section>
    </section>
  </section>

  <section xml:id="validates_uniqueness_of">
    <title xml:id="validates_uniqueness_of.title">uniqueness</title>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>methods</secondary>

      <tertiary>validates_uniqueness_of()</tertiary>
    </indexterm>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>validates</secondary>

      <tertiary>uniqueness</tertiary>
    </indexterm>

    <para>With <methodname>uniqueness</methodname> you can define that the
    value of this attribute must be unique in the database. If you want a
    product in the database to have a unique name that appears nowhere else,
    then you can use this validation:</para>

    <para><filename>app/models/product.rb</filename><programlisting>class Product &lt; ActiveRecord::Base
  validates :name,
            presence: true,
            uniqueness: true
end
</programlisting></para>

    <para>If we now try to create a new <classname>Product</classname> with a
    <methodname>name</methodname> that already exists, then we get an error
    message:<screen>$ rails console
Loading development environment (Rails 4.0.0)
&gt;&gt; Product.last
  Product Load (1.9ms)  SELECT "products".* FROM "products" ORDER BY "products"."id" DESC LIMIT 1
=&gt; #&lt;Product id: 4, name: "Milk (1 liter)", price: #&lt;BigDecimal:7f90649840a8,'0.45E0',9(45)&gt;, weight: nil, in_stock: nil, expiration_date: nil, created_at: "2012-11-19 09:30:21", updated_at: "2012-11-19 09:30:21"&gt;
&gt;&gt; product = Product.create(name: 'Milk (1 liter)')
   (0.1ms)  begin transaction
  Product Exists (0.1ms)  SELECT 1 AS one FROM "products" WHERE "products"."name" = 'Milk (1 liter)' LIMIT 1
   (0.1ms)  rollback transaction
=&gt; #&lt;Product id: nil, name: "Milk (1 liter)", price: nil, weight: nil, in_stock: nil, expiration_date: nil, created_at: nil, updated_at: nil&gt;
&gt;&gt; product.errors.messages
=&gt; {:name=&gt;["has already been taken"]}
&gt;&gt; exit
$</screen></para>

    <warning>
      <para>The validation via <methodname>uniqueness</methodname> is no
      absolute guarantee that the attribute is unique in the database. A race
      condition could occur (see <uri
      xlink:href="http://de.wikipedia.org/wiki/Race_Condition">http://en.wikipedia.org/wiki/Race_condition</uri>).
      A detailled discussion of this effect would go beyond the scope of book
      aimed at beginners (this phenomenon is extremely rare).</para>
    </warning>

    <section xml:id="validates_uniqueness_of_optionen">
      <title xml:id="validates_uniqueness_of_optionen.title">Options</title>

      <para><methodname>uniqueness</methodname> can be called with the
      following options.</para>

      <section>
        <title>scope</title>

        <para>Defines a scope for the uniqueness. If we had a differently
        structured phone number database (with just one field for the phone
        number), then we could use this option to specify that a phone number
        must only be saved once per user. Here is what it would look
        like:</para>

        <para><programlisting>validates :name,
          presence: true,
          uniqueness: { scope: :user_id }</programlisting></para>
      </section>

      <section>
        <title>case_sensitive</title>

        <para>Checks for uniqueness of upper and lower case as well. Default:
        false. Example:<programlisting>validates :name,
          presence: true,
          uniqueness: { case_sensitive: true }
</programlisting></para>
      </section>
    </section>
  </section>

  <section xml:id="validates_inclusion_of">
    <title xml:id="validates_inclusion_of.title">inclusion</title>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>methods</secondary>

      <tertiary>validates_inclusion_of()</tertiary>
    </indexterm>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>validates</secondary>

      <tertiary>inclusion</tertiary>
    </indexterm>

    <para>With <methodname>inclusion</methodname> you can define from which
    values the content of this attribute can be created. For our example, we
    can demonstrate it using the attribute
    <methodname>in_stock</methodname>.</para>

    <para><filename>app/models/product.rb</filename><programlisting>class Product &lt; ActiveRecord::Base
  attr_accessible :expiration_date, :in_stock, :name, :price, :weight

  validates :name,
            presence: true

  validates :in_stock,
            inclusion: { in: [true, false] }
end</programlisting></para>

    <para>In our data model, a <classname>Product</classname> must be either
    <code>true</code> or <code>false</code> for
    <methodname>in_stock</methodname> (there must not be a nil). If we enter a
    different value than <code>true</code> or <code>false</code>, a validation
    error is returned:<screen>$ rails console
Loading development environment (Rails 4.0.0)
&gt;&gt; product = Product.create(name: 'Milk low-fat (1 liter)')
   (0.1ms)  begin transaction
   (0.1ms)  rollback transaction
=&gt; #&lt;Product id: nil, name: "Milk low-fat (1 liter)", price: nil, weight: nil, in_stock: nil, expiration_date: nil, created_at: nil, updated_at: nil&gt;
&gt;&gt; product.errors.messages
=&gt; {:in_stock=&gt;["is not included in the list"]}
&gt;&gt; exit
$</screen></para>

    <tip>
      <para>Always remember the power of Ruby! For example, you can generate
      the enumerable object always live from another database. In other words,
      the validation is not defined statically.</para>
    </tip>

    <section xml:id="validates_inclusion_of_optionen">
      <title xml:id="validates_inclusion_of_optionen.title">Options</title>

      <para><methodname>inclusion</methodname> can be called with the
      following option.</para>

      <section>
        <title>message</title>

        <para>For outputting custom error messages. Default: "is not included
        in the list". Example:<programlisting>validates :in_stock,
          inclusion: { in: [true, false], 
                          message: 'this one is not allowed' }
</programlisting><note>
            <para>For all error messages, please note <xref
            linkend="i18n"/>.</para>
          </note></para>
      </section>
    </section>
  </section>

  <section xml:id="validates_exclusion_of">
    <title xml:id="validates_exclusion_of.title">exclusion</title>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>methods</secondary>

      <tertiary>validates_exclusion_of()</tertiary>
    </indexterm>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>validates</secondary>

      <tertiary>exclusion</tertiary>
    </indexterm>

    <para><methodname>exclusion</methodname> is the inversion of <xref
    linkend="validates_inclusion_of"/>. You can define from which values the
    content of this attribute must not be created.</para>

    <para><filename>app/models/product.rb</filename><programlisting>class Product &lt; ActiveRecord::Base
  attr_accessible :expiration_date, :in_stock, :name, :price, :weight

  validates :name,
            presence: true

  validates :in_stock,
            exclusion: { in: [nil] }
end
</programlisting></para>

    <tip>
      <para>Always remember the power of Ruby! For example, you can generate
      the enumerable object always live from another database. In other words,
      the validation does not have to be defined statically.</para>
    </tip>

    <section xml:id="validates_exclusion_of_optionen">
      <title xml:id="validates_exclusion_of_optionen.title">Options</title>

      <para><methodname>exclusion</methodname> can be called with the
      following option.</para>

      <section>
        <title>message</title>

        <para>For outputting custom error messages. Example:<programlisting>validates :in_stock,
          inclusion: { in: [nil], 
                          message: 'this one is not allowed' }
</programlisting><note>
            <para>For all error messages, please note <xref
            linkend="i18n"/>.</para>
          </note></para>
      </section>
    </section>
  </section>

  <section xml:id="validates_format_of">
    <title xml:id="validates_format_of.title">format</title>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>methods</secondary>

      <tertiary>validates_format_of()</tertiary>
    </indexterm>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>validates</secondary>

      <tertiary>format</tertiary>
    </indexterm>

    <para>With <methodname>format</methodname> you can define via a regular
    expression (see <uri
    xlink:href="http://de.wikipedia.org/wiki/Regul%C3%A4rer_Ausdruck">http://en.wikipedia.org/wiki/Regular_expression</uri>)
    how the content of an attribute can be structured.</para>

    <para>With <methodname>format</methodname> you can for example carry out a
    simple validation of the syntax of an e-mail address:</para>

    <para><programlisting>validates :email, 
          format: { with: /\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\Z/i }</programlisting></para>

    <warning>
      <para>It should be obvious that the e-mail address validation shown here
      is not complete. It is just meant to be an example. You can only use it
      to check the syntactic correctness of an e-mail address.</para>
    </warning>

    <section xml:id="validates_format_of_optionen">
      <title xml:id="validates_format_of_optionen.title">Options</title>

      <para><methodname>validates_format_of</methodname> can be called with
      the following options:<itemizedlist>
          <listitem>
            <para><code>:message</code></para>

            <para>For outputting a custom error message. Default: "is
            invalid". Example:<programlisting>validates :email, 
          format: { with: /\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\Z/i,
                       message: 'is not a valid email address' }
</programlisting><note>
                <para>For all error messages, please note <xref
                linkend="i18n"/>.</para>
              </note></para>
          </listitem>
        </itemizedlist></para>
    </section>
  </section>

  <section xml:id="validates_allgemeine_validierungs_optionen">
    <title xml:id="validates_allgemeine_validierungs_optionen.title">General
    Validation Options</title>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>validates</secondary>

      <tertiary>allow_nil</tertiary>
    </indexterm>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>validates</secondary>

      <tertiary>allow_blank</tertiary>
    </indexterm>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>validates</secondary>

      <tertiary>on</tertiary>
    </indexterm>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>validates</secondary>

      <tertiary>if</tertiary>
    </indexterm>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>validates</secondary>

      <tertiary>unless</tertiary>
    </indexterm>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>validates</secondary>

      <tertiary>proc</tertiary>
    </indexterm>

    <para>There are some options that can be used for all validations.</para>

    <section>
      <title>allow_nil</title>

      <para>Allows the value <code>nil</code>. Example:<programlisting>validates :email, 
          format: { with: /\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\Z/i },
          allow_nil: true</programlisting></para>
    </section>

    <section>
      <title>allow_blank</title>

      <para>As <code>allow_nil</code>, but additionally with an empty string.
      Example:<programlisting>validates :email, 
          format: { with: /\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\Z/i },
          allow_blank: true</programlisting></para>
    </section>

    <section>
      <title>on</title>

      <para>With <code>on</code>, a validation can be limited to the events
      <code>create</code>, <code>update</code> or <code>safe</code>. In the
      following example, the validation only takes effect when the record is
      initially created (during the <code>create</code>):<programlisting>validates :email, 
          format: { with: /\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\Z/i },
          on: :create</programlisting></para>
    </section>

    <section>
      <title><code>if</code> and <code>unless</code></title>

      <para><code>if</code> or <code>unless</code> call the specified method
      and only execute the validation if the result of the method is
      true:<programlisting>validates :name,
          presence: true,
          if: :today_is_monday?

def today_is_monday?
  Date.today.monday?
end
</programlisting></para>

      <section>
        <title>proc</title>

        <para><code>:</code><code>proc</code> calls a
        <classname>Proc</classname> object.<programlisting>validates :name,
          presence: true,
          if: Proc.new { |a| a.email == 'test@test.com' }
</programlisting></para>
      </section>
    </section>
  </section>

  <section xml:id="validates_eigene_validations_definieren">
    <title xml:id="validates_eigene_validations_definieren.title">Writing
    Custom Validations</title>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>custom validations</secondary>
    </indexterm>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>validate</secondary>
    </indexterm>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>errors</secondary>

      <tertiary>add</tertiary>
    </indexterm>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>errors</secondary>

      <tertiary>add_to_base</tertiary>
    </indexterm>

    <para>Now and then, you want to do a validation where you need custom
    program logic. For such cases, you can define custom validations.</para>

    <section>
      <title>Defining Validations with Your Own Methods</title>

      <para>Let's assume you are a big shot hotel mogul and need a reservation
      system. <screen>$ rails new my_hotel
  [...]
$ cd my_hotel 
$ rails generate model reservation start_date:date end_date:date room_type
  [...]
$ rake db:migrate
  [...]
$ </screen></para>

      <para>Then we specify in the
      <filename>app/model/reservation.rb</filename> that the attributes
      <varname>start_date</varname> and <varname>end_date</varname> must be
      present in any case, plus we use the method
      <methodname>reservation_dates_must_make_sense</methodname> to make sure
      that the <varname>start_date</varname> is before the
      <varname>end_date</varname>:<programlisting>class Reservation &lt; ActiveRecord::Base
  validates :start_date,
            presence: true

  validates :end_date,
            presence: true

  validate :reservation_dates_must_make_sense

  private
  def reservation_dates_must_make_sense
    if end_date &lt;= start_date
      errors.add(:start_date, 'has to be before the end date')
    end
  end
end</programlisting></para>

      <para>With <methodname>errors.add</methodname> we can add error messages
      for individual attributes. With
      <methodname>errors.add_to_base</methodname> you can add error messages
      for the whole object.</para>

      <para>Let's test the validation in the console:<screen>$ rails console
Loading development environment (Rails 4.0.0)
&gt;&gt; reservation = Reservation.new(start_date: Date.today, end_date: Date.today)
=&gt; #&lt;Reservation id: nil, start_date: "2012-11-19", end_date: "2012-11-19", room_type: nil, created_at: nil, updated_at: nil&gt;
&gt;&gt; reservation.valid?
=&gt; false
&gt;&gt; reservation.errors.messages
=&gt; {:start_date=&gt;["has to be before the end date"]}
&gt;&gt; reservation.end_date = Date.today + 1.day
=&gt; Tue, 20 Nov 2012
&gt;&gt; reservation.valid?
=&gt; true
&gt;&gt; reservation.save
   (0.1ms)  begin transaction
  SQL (8.7ms)  INSERT INTO "reservations" ("created_at", "end_date", "room_type", "start_date", "updated_at") VALUES (?, ?, ?, ?, ?)  [["created_at", Mon, 19 Nov 2012 14:00:50 UTC +00:00], ["end_date", Tue, 20 Nov 2012], ["room_type", nil], ["start_date", Mon, 19 Nov 2012], ["updated_at", Mon, 19 Nov 2012 14:00:50 UTC +00:00]]
   (3.4ms)  commit transaction
=&gt; true
&gt;&gt; exit
$</screen></para>
    </section>
  </section>

  <section xml:id="validates_weitere_doku">
    <title xml:id="validates_weitere_doku.title">Further Documentation</title>

    <para>The topic validations is described very well in the official Rails
    documentation at <uri
    xlink:href="http://guides.rubyonrails.org/active_record_validations.html">http://guides.rubyonrails.org/active_record_validations.html</uri>.</para>
  </section>
</section>
