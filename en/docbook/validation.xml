<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xml:id="activerecord_validation"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title xml:id="activerecord_validation.title">Validation</title>

  <indexterm>
    <primary>ActiveRecord</primary>

    <secondary>validation</secondary>
  </indexterm>

  <para>Non-valid records are frequently a source of errors in programs. With
  <methodname>validates</methodname>, ActiveRecord offers a quick and easy way
  of validating records. That way you can be sure that only meaningful records
  will find their way into your database.</para>

  <section xml:id="validation_vorbereitung">
    <title
    xml:id="activerecord_validation_vorbereitung.title">Preparation</title>

    <para>Let's create a new application for this chapter:<screen>MacBook:~ xyz$ <command>rails new shop</command>
[...]
MacBook:~ xyz$ <command>cd shop</command>
MacBook:shop xyz$ <command>rails generate model product name 'price:decimal{7,2}' weight:integer in_stock:boolean expiration_date:date</command>
[...]
MacBook:shop xyz$ <command>rake db:migrate</command>
[...]
MacBook:shop xyz$</screen></para>
  </section>

  <section>
    <title>The Basic Idea</title>

    <para>For each model, there is a matching file in the directory
    <filename>app/models/</filename>. In this file, we can not only define
    database dependencies, but also implement all validations. The advantage:
    we have everything in one place. Convention over configuration!</para>

    <para>Without any validation, we can create an empty record in both models
    without any problems:<screen>SW:shop stefan$ <command>rails console</command>
Loading development environment (Rails 3.2.8)
1.9.3p194 :001 &gt; <command>Product.create</command>
   (0.1ms)  begin transaction
  SQL (8.9ms)  INSERT INTO "products" ("created_at", "expiration_date", "in_stock", "name", "price", "updated_at", "weight") VALUES (?, ?, ?, ?, ?, ?, ?)  [["created_at", Mon, 10 Sep 2012 14:45:33 UTC +00:00], ["expiration_date", nil], ["in_stock", nil], ["name", nil], ["price", nil], ["updated_at", Mon, 10 Sep 2012 14:45:33 UTC +00:00], ["weight", nil]]
   (0.9ms)  commit transaction
 =&gt; #&lt;Product id: 1, name: nil, price: nil, weight: nil, in_stock: nil, expiration_date: nil, created_at: "2012-09-10 14:45:33", updated_at: "2012-09-10 14:45:33"&gt; 
1.9.3p194 :002 &gt; <command>exit</command>
SW:shop stefan$</screen></para>

    <para>But in practice, this record does not make any sense. A
    <classname>Product</classname> needs to have a <varname>name</varname> and
    a <methodname>price</methodname>. That's why we can define validations in
    ActiveRecord. Then you can ensure as programmer that only records that are
    valid for you are saved in your database.</para>

    <para>To make the mechanism easier to understand, I am going to jump ahead
    a bit and use the <code>presence</code> helper. Please fill your
    <filename>app/model/product.rb</filename> with the following
    content:<programlisting>class Product &lt; ActiveRecord::Base
  attr_accessible :expiration_date, :in_stock, :name, :price, :weight

  validates :name,
            :presence =&gt; true

  validates :price,
            :presence =&gt; true
end</programlisting></para>

    <para>Now we try again to create an empty record in the console:<screen>SW:shop stefan$ <command>rails console</command>
Loading development environment (Rails 3.2.8)
1.9.3p194 :001 &gt; <command>product = Product.create</command>
   (0.0ms)  begin transaction
   (0.1ms)  rollback transaction
 =&gt; #&lt;Product id: nil, name: nil, price: nil, weight: nil, in_stock: nil, expiration_date: nil, created_at: nil, updated_at: nil&gt; 
1.9.3p194 :002 &gt; <command>product.valid?</command>
 =&gt; false 
1.9.3p194 :003 &gt; </screen></para>

    <para>Although we tried to create a new record with the method
    <methodname>create</methodname> (see <xref
    linkend="activerecord_create"/>), this did not happen. The validation
    method intervened before the record was saved. So validating happens
    before saving.</para>

    <para>Can we access the errors? Yes, via the method
    <methodname>errors</methodname> or with
    <methodname>errors.messages</methodname> we can look at the errors that
    occurred:<screen>1.9.3p194 :003 &gt; <command>product.errors</command>
 =&gt; #&lt;ActiveModel::Errors:0x007ff88537fae8 @base=#&lt;Product id: nil, name: nil, price: nil, weight: nil, in_stock: nil, expiration_date: nil, created_at: nil, updated_at: nil&gt;, @messages={:name=&gt;["can't be blank"], :price=&gt;["can't be blank"]}&gt; 
1.9.3p194 :004 &gt; <command>product.errors.messages</command>
 =&gt; {:name=&gt;["can't be blank"], :price=&gt;["can't be blank"]} 
1.9.3p194 :005 &gt;</screen></para>

    <para>This error message was defined for a human and English-speaking user
    (more on this and how the errors can be translated into another language
    in <xref linkend="i18n"/>).</para>

    <para>Only once we assign a value to the attributes
    <varname>name</varname> and <methodname>price</methodname>, we can save
    the object:<screen>1.9.3p194 :005 &gt; <command>product.name = 'Milk (1 liter)'</command>
 =&gt; "Milk (1 liter)" 
1.9.3p194 :006 &gt; <command>product.price = 0.45</command>
 =&gt; 0.45 
1.9.3p194 :007 &gt; <command>product.save</command>
   (0.1ms)  begin transaction
  SQL (6.4ms)  INSERT INTO "products" ("created_at", "expiration_date", "in_stock", "name", "price", "updated_at", "weight") VALUES (?, ?, ?, ?, ?, ?, ?)  [["created_at", Mon, 10 Sep 2012 14:52:44 UTC +00:00], ["expiration_date", nil], ["in_stock", nil], ["name", "Milch (1 Liter)"], ["price", #&lt;BigDecimal:7ff8852ea5d8,'0.45E0',9(45)&gt;], ["updated_at", Mon, 10 Sep 2012 14:52:44 UTC +00:00], ["weight", nil]]
   (0.8ms)  commit transaction
 =&gt; true 
1.9.3p194 :008 &gt;</screen></para>

    <section xml:id="validation_valid">
      <title xml:id="validation_valid.title">valid?</title>

      <indexterm>
        <primary>ActiveRecord</primary>

        <secondary>methods</secondary>

        <tertiary>valid?()</tertiary>
      </indexterm>

      <para>The method <methodname>valid?</methodname> indicates in boolean
      form if an object is valid. So you can check the validity already before
      you save:<screen>1.9.3p194 :008 &gt; <command>product = Product.new</command>
 =&gt; #&lt;Product id: nil, name: nil, price: nil, weight: nil, in_stock: nil, expiration_date: nil, created_at: nil, updated_at: nil&gt; 
1.9.3p194 :009 &gt; <command>product.valid?</command>
 =&gt; false 
1.9.3p194 :010 &gt;</screen></para>
    </section>

    <section xml:id="validation_save_validate_false">
      <title xml:id="validation_save_validate_false.title">save( :validate
      =&gt; false )</title>

      <indexterm>
        <primary>ActiveRecord</primary>

        <secondary>methods</secondary>

        <tertiary>save()</tertiary>
      </indexterm>

      <para>As so often in life, you can find a way around everything. If you
      pass the parameter <code>:validate =&gt; false</code> to the method
      <methodname>save</methodname>, the data of <code>Validation</code> is
      saved:<screen>1.9.3p194 :010 &gt; <command>product = Product.new</command>
 =&gt; #&lt;Product id: nil, name: nil, price: nil, weight: nil, in_stock: nil, expiration_date: nil, created_at: nil, updated_at: nil&gt; 
1.9.3p194 :011 &gt; <command>product.save</command>
   (0.1ms)  begin transaction
   (0.1ms)  rollback transaction
 =&gt; false 
1.9.3p194 :012 &gt; <command>product.valid?</command>
 =&gt; false 
1.9.3p194 :013 &gt; <command>product.save(:validate =&gt; false)</command>
   (0.1ms)  begin transaction
  SQL (0.6ms)  INSERT INTO "products" ("created_at", "expiration_date", "in_stock", "name", "price", "updated_at", "weight") VALUES (?, ?, ?, ?, ?, ?, ?)  [["created_at", Tue, 08 May 2012 15:20:44 UTC +00:00], ["expiration_date", nil], ["in_stock", nil], ["name", nil], ["price", nil], ["updated_at", Tue, 08 May 2012 15:20:44 UTC +00:00], ["weight", nil]]
   (3.5ms)  commit transaction
 =&gt; true 
1.9.3p194 :014 &gt; <command>exit</command>
MacBook:shop xyz$</screen></para>

      <warning>
        <para>I assume that you understand the problems involved here. Please
        only use this option if there is a good reason to do so. Otherwise you
        might as well do without the whole validation process.</para>
      </warning>
    </section>
  </section>

  <section xml:id="validates_presence_of">
    <title xml:id="validates_presence_of.title">presence</title>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>methods</secondary>

      <tertiary>validates_presence_of()</tertiary>
    </indexterm>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>validates</secondary>

      <tertiary>presence</tertiary>
    </indexterm>

    <para>In our model <varname>product</varname> there are a few fields that
    must be filled in in any case. We can achieve this via
    <methodname>presence</methodname>.</para>

    <para><filename>app/models/product.rb</filename><programlisting>class Product &lt; ActiveRecord::Base
  attr_accessible :expiration_date, :in_stock, :name, :price, :weight

  validates :name,
            :presence =&gt; true

  validates :price,
            :presence =&gt; true
end
</programlisting></para>

    <para>If we try to create an empty user record with this, we get lots of
    validation errors:<screen>MacBook:shop xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.3)
1.9.3p194 :001 &gt; <command>product = Product.create</command>
   (0.1ms)  begin transaction
   (0.1ms)  rollback transaction
 =&gt; #&lt;Product id: nil, name: nil, price: nil, weight: nil, in_stock: nil, expiration_date: nil, created_at: nil, updated_at: nil&gt; 
1.9.3p194 :002 &gt; p<command>roduct.errors</command>
 =&gt; #&lt;ActiveModel::Errors:0x007ffe9189e0d0 @base=#&lt;Product id: nil, name: nil, price: nil, weight: nil, in_stock: nil, expiration_date: nil, created_at: nil, updated_at: nil&gt;, @messages={:name=&gt;["can't be blank"], :price=&gt;["can't be blank"]}&gt; 
1.9.3p194 :003 &gt;</screen></para>

    <para>Only once we have entered all the data, the record can be
    saved:<screen>1.9.3p194 :003 &gt; <command>product.name = 'Milk (1 liter)'</command>
 =&gt; "Milch (1 Liter)" 
1.9.3p194 :004 &gt; <command>product.price = 0.45</command>
 =&gt; 0.45 
1.9.3p194 :005 &gt; <command>product.save</command>
   (0.1ms)  begin transaction
  SQL (5.2ms)  INSERT INTO "products" ("created_at", "expiration_date", "in_stock", "name", "price", "updated_at", "weight") VALUES (?, ?, ?, ?, ?, ?, ?)  [["created_at", Tue, 08 May 2012 15:25:22 UTC +00:00], ["expiration_date", nil], ["in_stock", nil], ["name", "Milch (1 Liter)"], ["price", #&lt;BigDecimal:7ffe91a2d270,'0.45E0',9(45)&gt;], ["updated_at", Tue, 08 May 2012 15:25:22 UTC +00:00], ["weight", nil]]
   (3.9ms)  commit transaction
 =&gt; true 
1.9.3p194 :006 &gt; <command>exit</command>
MacBook:shop xyz$</screen></para>
  </section>

  <section xml:id="validates_length_of">
    <title xml:id="validates_length_of.title">length</title>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>methods</secondary>

      <tertiary>validates_length_of()</tertiary>
    </indexterm>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>validates</secondary>

      <tertiary>length</tertiary>
    </indexterm>

    <para>With <methodname>length</methodname> you can limit the length of a
    specific attribute. It's easiest to explain using an example.</para>

    <para><filename>app/models/product.rb</filename><programlisting>class Product &lt; ActiveRecord::Base
  attr_accessible :expiration_date, :in_stock, :name, :price, :weight

  validates :name,
            :presence =&gt; true,
            <emphasis>:length =&gt; { :in =&gt; 2..20 }</emphasis>

  validates :price,
            :presence =&gt; true
end
</programlisting></para>

    <para>If we now try to save a <classname>Product</classname> with a
    <methodname>name</methodname> that consists in one letter, we get an error
    message:<screen>MacBook:shop xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.8)
1.9.3p194 :001 &gt; <command>product = Product.create(:name =&gt; 'M', :price =&gt; 0.45)</command>
   (0.1ms)  begin transaction
   (0.1ms)  rollback transaction
 =&gt; #&lt;Product id: nil, name: "M", price: #&lt;BigDecimal:7fd6ad8cec28,'0.45E0',9(45)&gt;, weight: nil, in_stock: nil, expiration_date: nil, created_at: nil, updated_at: nil&gt; 
1.9.3p194 :002 &gt; <command>product.errors</command>
 =&gt; #&lt;ActiveModel::Errors:0x007fd6ad88fe38 @base=#&lt;Product id: nil, name: "M", price: #&lt;BigDecimal:7fd6ad8d19c8,'0.45E0',9(45)&gt;, weight: nil, in_stock: nil, expiration_date: nil, created_at: nil, updated_at: nil&gt;, @messages={:name=&gt;["is too short (minimum is 2 characters)"]}&gt; 
1.9.3p194 :003 &gt; <command>exit</command>
MacBook:shop xyz$</screen></para>

    <section xml:id="validates_length_of_optionen">
      <title xml:id="validates_length_of_optionen.title">Options</title>

      <para><methodname>length</methodname> can be called with the following
      options:<itemizedlist>
          <listitem>
            <para><code>:minimum</code></para>

            <para>The minimum length of an attribute. Example:</para>

            <para><programlisting>validates :name,
          :presence =&gt; true,
          <emphasis>:length =&gt; { :minimum =&gt; 2 }</emphasis></programlisting></para>
          </listitem>

          <listitem>
            <para><methodname>:maximum</methodname></para>

            <para>The maximum length of an attribute. Example:<programlisting>validates :name,
          :presence =&gt; true,
          <emphasis>:length =&gt; { :maximum =&gt; 20 }</emphasis></programlisting></para>
          </listitem>

          <listitem>
            <para><code>:is</code></para>

            <para>Is exactly the specified number of characters long.
            Example:<programlisting>validates :name,
          :presence =&gt; true,
          <emphasis>:length =&gt; { :is =&gt; 8 }</emphasis></programlisting></para>
          </listitem>

          <listitem>
            <para><code>:in oder :within</code></para>

            <para>Defines a length interval. The first number specifies the
            minimum number of the range and the second the maximum.
            Example:<programlisting>validates :name,
          :presence =&gt; true,
          <emphasis>:length =&gt; { :in =&gt; 2..20 }</emphasis></programlisting></para>
          </listitem>

          <listitem>
            <para><code>:tokenizer</code></para>

            <para>You can use this to define how the attribute should be split
            for counting. Default: <code>lambda{ |value| value.split(//)
            }</code> (individual characters are counted). Example (for
            counting words):<programlisting>validates :content,
          :presence =&gt; true,
          :length =&gt; { :in =&gt; 2..20 },
          <emphasis>:tokenizer =&gt; lambda {|str| str.scan(/\w+/)}
</emphasis></programlisting></para>
          </listitem>

          <listitem>
            <para><code>:too_long</code></para>

            <para>Defines the error message of
            <methodname>:maximum</methodname>. Default: "is too long (maximum
            is %d characters)". Example:<programlisting>validates :name,
          :presence =&gt; true,
          :length =&gt; { :maximum =&gt; 20 },
          <emphasis>:too_long =&gt; "must have at most %{count} characters"</emphasis>
</programlisting><note>
                <para>For all error messages, please note <xref
                linkend="i18n"/>.</para>
              </note></para>
          </listitem>

          <listitem>
            <para><code>:too_short</code></para>

            <para>Defines the error message of
            <methodname>:minimum</methodname>. Default: "is too short (min is
            %d characters)". Example:<programlisting>validates :name,
          :presence =&gt; true,
          :length =&gt; { :minimum =&gt; 5 },
          <emphasis>:too_short =&gt; "must have at least %{count} characters"</emphasis>
</programlisting><note>
                <para>For all error messages, please note <xref
                linkend="i18n"/>.</para>
              </note></para>
          </listitem>
        </itemizedlist></para>
    </section>
  </section>

  <section xml:id="validates_numericality_of">
    <title xml:id="validates_numericality_of.title">numericality</title>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>methods</secondary>

      <tertiary>validates_numericality_of()</tertiary>
    </indexterm>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>validates</secondary>

      <tertiary>numericality</tertiary>
    </indexterm>

    <para>With <methodname>numericality</methodname> you can check if an
    attribute is a number. It's easier to explain if we use an example.</para>

    <para><filename>app/models/product.rb</filename><programlisting>class Product &lt; ActiveRecord::Base
  attr_accessible :expiration_date, :in_stock, :name, :price, :weight

  validates :name,
            :presence =&gt; true,
            :length =&gt; { :in =&gt; 2..20 }

  validates :price,
            :presence =&gt; true

  validates :weight,
            <emphasis>:numericality =&gt; true</emphasis>
end
</programlisting></para>

    <para>If we now use a <varname>weight</varname> that consists of letters
    or contains letters instead of numbers, we will get an error
    message:<screen>MacBook:shop xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.8)
1.9.3p194 :001 &gt; <command>product = Product.create(:name =&gt; 'Milk (1 liter)', :price =&gt; 0.45, :weight =&gt; 'abc')</command>
   (0.1ms)  begin transaction
   (0.1ms)  rollback transaction
 =&gt; #&lt;Product id: nil, name: "Milk (1 liter)", price: #&lt;BigDecimal:7f8594def848,'0.45E0',9(45)&gt;, weight: 0, in_stock: nil, expiration_date: nil, created_at: nil, updated_at: nil&gt; 
1.9.3p194 :002 &gt; <command>product.errors</command>
 =&gt; #&lt;ActiveModel::Errors:0x007f8594ba3878 @base=#&lt;Product id: nil, name: "Milk (1 liter)", price: #&lt;BigDecimal:7f8594df3588,'0.45E0',9(45)&gt;, weight: 0, in_stock: nil, expiration_date: nil, created_at: nil, updated_at: nil&gt;, @messages={:weight=&gt;["is not a number"]}&gt; 
1.9.3p194 :003 &gt; <command>exit</command>
MacBook:shop xyz$</screen></para>

    <tip>
      <para>You can use <methodname>numericality</methodname> to define the
      content as number even if an attribute is saved as string in the
      database.</para>
    </tip>

    <section xml:id="validates_numericality_of_optionen">
      <title xml:id="validates_numericality_of_optionen.title">Options</title>

      <para><methodname>numericality</methodname> can be called with the
      following options:<itemizedlist>
          <listitem>
            <para><code>:only_integer</code></para>

            <para>The attribute can only contain an integer. Default: false.
            Example:<programlisting>validates :weight, 
          :numericality =&gt; { :only_integer =&gt; true }
</programlisting></para>
          </listitem>

          <listitem>
            <para><code>:greater_than</code></para>

            <para>The number saved in the attribute must be greater than the
            specified value. Example:<programlisting>validates :weight, 
          :numericality =&gt; { :greater_than =&gt; 100 }
</programlisting></para>
          </listitem>

          <listitem>
            <para><code>:greater_than_or_equal_to</code></para>

            <para>The number saved in the attribute must be greater than or
            equal to the specified value. Example:<programlisting>validates :weight, 
          :numericality =&gt; { :greater_than_or_equal_to =&gt; 100 }
</programlisting></para>
          </listitem>

          <listitem>
            <para><code>:equal_to</code></para>

            <para>Defines a specific value that the attribute must have.
            Example:<programlisting>validates :weight, 
          :numericality =&gt; { :equal_to =&gt; 100 }
</programlisting></para>
          </listitem>

          <listitem>
            <para><code>:less_than</code></para>

            <para>The number saved in the attribute must be less than the
            specified value. Example:<programlisting>validates :weight, 
          :numericality =&gt; { :less_than =&gt; 100 }
</programlisting></para>
          </listitem>

          <listitem>
            <para><code>:less_than_or_equal_to</code></para>

            <para>The number saved in the attribute must be less than or equal
            to the specified value. Example:<programlisting>validates :weight, 
          :numericality =&gt; { :less_than_or_equal_to =&gt; 100 }
</programlisting></para>
          </listitem>

          <listitem>
            <para><code>:odd</code></para>

            <para>the number saved in the attribute must be an odd number.
            Example:<programlisting>validates :weight, 
          :numericality =&gt; { :odd =&gt; true }
</programlisting></para>
          </listitem>

          <listitem>
            <para><code>:even</code></para>

            <para>The number saved in the attribute must be an even number.
            Example:<programlisting>validates :weight, 
          :numericality =&gt; { :even =&gt; true }
</programlisting></para>
          </listitem>
        </itemizedlist><note>
          <para>The following validations can also contain a proc or symbol
          that corresponds to a method:
          <methodname>:greater_than</methodname>,
          <methodname>:greater_than_or_equal_to</methodname>,
          <methodname>:equal_to</methodname>,
          <methodname>:less_than</methodname>,
          <methodname>:less_than_or_equal_to</methodname></para>

          <para>Example from <command>ri
          validates_numericality_of</command>:<programlisting>validates_numericality_of :width, :less_than =&gt; Proc.new { |person| person.height }
</programlisting></para>
        </note></para>
    </section>
  </section>

  <section xml:id="validates_uniqueness_of">
    <title xml:id="validates_uniqueness_of.title">uniqueness</title>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>methods</secondary>

      <tertiary>validates_uniqueness_of()</tertiary>
    </indexterm>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>validates</secondary>

      <tertiary>uniqueness</tertiary>
    </indexterm>

    <para>With <methodname>uniqueness</methodname> you can define that the
    value of this attribute must be unique in the database. If you want a
    product in the database to have a unique name that appears nowhere else,
    then you can use this validation:</para>

    <para><filename>app/models/product.rb</filename><programlisting>class Product &lt; ActiveRecord::Base
  attr_accessible :expiration_date, :in_stock, :name, :price, :weight

  validates :name,
            :presence =&gt; true,
            <emphasis>:uniqueness =&gt; true</emphasis>
end
</programlisting></para>

    <para>If we now try to create a new <classname>Product</classname> with a
    <methodname>name</methodname> that already exists, then we get an error
    message:<screen>MacBook:shop xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.8)
1.9.3p194 :001 &gt; <command>Product.last</command>
  Product Load (0.2ms)  SELECT "products".* FROM "products" ORDER BY "products"."id" DESC LIMIT 1
 =&gt; #&lt;Product id: 4, name: "Milk (1 liter)", price: #&lt;BigDecimal:7fc6e9695160,'0.45E0',9(45)&gt;, weight: nil, in_stock: nil, expiration_date: nil, created_at: "2012-05-08 15:25:22", updated_at: "2012-05-08 15:25:22"&gt; 
1.9.3p194 :002 &gt; <command>product = Product.create(:name =&gt; 'Milk (1 liter)', :price =&gt; 0.45, :weight =&gt; 1000)</command>
   (0.1ms)  begin transaction
  Product Exists (0.2ms)  SELECT 1 FROM "products" WHERE "products"."name" = 'Milk (1 liter)' LIMIT 1
   (0.1ms)  rollback transaction
 =&gt; #&lt;Product id: nil, name: "Milch (1 Liter)", price: #&lt;BigDecimal:7fc6e9f7cb70,'0.45E0',9(45)&gt;, weight: 1000, in_stock: nil, expiration_date: nil, created_at: nil, updated_at: nil&gt; 
1.9.3p194 :003 &gt; <command>product.errors</command>
 =&gt; #&lt;ActiveModel::Errors:0x007fc6e9432300 @base=#&lt;Product id: nil, name: "Milk (1 liter)", price: #&lt;BigDecimal:7fc6e9b09250,'0.45E0',9(45)&gt;, weight: 1000, in_stock: nil, expiration_date: nil, created_at: nil, updated_at: nil&gt;, @messages={:name=&gt;["has already been taken"]}&gt; 
1.9.3p194 :004 &gt; <command>exit</command>
MacBook:shop xyz$</screen></para>

    <warning>
      <para>The validation via <methodname>uniqueness</methodname> is no
      absolute guarantee that the attribute is unique in the database. A race
      condition could occur (see <uri
      xlink:href="http://de.wikipedia.org/wiki/Race_Condition">http://en.wikipedia.org/wiki/Race_condition</uri>).
      A detailled discussion of this effect would go beyond the scope of book
      aimed at beginners (this phenomenon is extremely rare).</para>
    </warning>

    <section xml:id="validates_uniqueness_of_optionen">
      <title xml:id="validates_uniqueness_of_optionen.title">Options</title>

      <para><methodname>uniqueness</methodname> can be called with the
      following options:<itemizedlist>
          <listitem>
            <para><code>:scope</code></para>

            <para>Defines a scope for the uniqueness. If we had a differently
            structured phone number database (with just one field for the
            phone number), then we could use this option to specify that a
            phone number must only be saved once per user. Here is what it
            would look like:</para>

            <para><programlisting>validates :name,
          :presence =&gt; true,
          <emphasis>:uniqueness =&gt; { :scope =&gt; :user_id }</emphasis></programlisting></para>
          </listitem>

          <listitem>
            <para><methodname>:case_sensitive</methodname></para>

            <para>Checks for uniqueness of upper and lower case as well.
            Default: false. Example:<programlisting>validates :name,
          :presence =&gt; true,
          <emphasis>:uniqueness =&gt; { :case_sensitive =&gt; true }</emphasis>
</programlisting></para>
          </listitem>
        </itemizedlist></para>
    </section>
  </section>

  <section xml:id="validates_inclusion_of">
    <title xml:id="validates_inclusion_of.title">inclusion</title>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>methods</secondary>

      <tertiary>validates_inclusion_of()</tertiary>
    </indexterm>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>validates</secondary>

      <tertiary>inclusion</tertiary>
    </indexterm>

    <para>With <methodname>inclusion</methodname> you can define from which
    values the content of this attribute can be created. For our example, we
    can demonstrate it using the attribute
    <methodname>in_stock</methodname>.</para>

    <para><filename>app/models/product.rb</filename><programlisting>class Product &lt; ActiveRecord::Base
  attr_accessible :expiration_date, :in_stock, :name, :price, :weight

  validates :name,
            :presence =&gt; true,
            :length =&gt; { :in =&gt; 2..20 }

  validates :price,
            :presence =&gt; true

  validates :in_stock,
            <emphasis>:inclusion =&gt; { :in =&gt; [true, false] }</emphasis>
end
</programlisting></para>

    <para>In our data model, a <classname>Product</classname> must be either
    <code>true</code> or <code>false</code> for
    <methodname>in_stock</methodname> (there must not be a nil). If we enter a
    different value than <code>true</code> or <code>false</code>, a validation
    error is returned:<screen>MacBook:shop xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.8)
1.9.3p194 :001 &gt; <command>product = Product.create(:name =&gt; 'Milk low-fat (1 liter)', :price =&gt; 0.45, :weight =&gt; 1000)</command>
   (0.1ms)  begin transaction
  Product Exists (0.2ms)  SELECT 1 FROM "products" WHERE "products"."name" = 'Milk low-fat (1 liter)' LIMIT 1
   (0.1ms)  rollback transaction
 =&gt; #&lt;Product id: nil, name: "Milk low-fat (1 liter)", price: #&lt;BigDecimal:7fd125470f38,'0.45E0',9(45)&gt;, weight: 1000, in_stock: nil, expiration_date: nil, created_at: nil, updated_at: nil&gt; 
1.9.3p194 :002 &gt; <command>product.errors</command>
 =&gt; #&lt;ActiveModel::Errors:0x007fd12513a648 @base=#&lt;Product id: nil, name: "Milk low-fat (1 liter)", price: #&lt;BigDecimal:7fd125475bf0,'0.45E0',9(45)&gt;, weight: 1000, in_stock: nil, expiration_date: nil, created_at: nil, updated_at: nil&gt;, @messages={:in_stock=&gt;["is not included in the list"]}&gt; 
1.9.3p194 :003 &gt; <command>exit</command>
MacBook:shop xyz$</screen></para>

    <tip>
      <para>Always remember the power of Ruby! For example, you can generate
      the enumerable object always live from another database. In other words,
      the validation is not defined statically.</para>
    </tip>

    <section xml:id="validates_inclusion_of_optionen">
      <title xml:id="validates_inclusion_of_optionen.title">Options</title>

      <para><methodname>inclusion</methodname> can be called with the
      following options:<itemizedlist>
          <listitem>
            <para><code>:message</code></para>

            <para>For outputting custom error messages. Default: "is not
            included in the list". Example:<programlisting>validates :in_stock,
          :inclusion =&gt; { :in =&gt; [true, false], 
                          <emphasis>:message =&gt; 'this one is not allowed'</emphasis> }
</programlisting><note>
                <para>For all error messages, please note <xref
                linkend="i18n"/>.</para>
              </note></para>
          </listitem>
        </itemizedlist></para>
    </section>
  </section>

  <section xml:id="validates_exclusion_of">
    <title xml:id="validates_exclusion_of.title">exclusion</title>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>methods</secondary>

      <tertiary>validates_exclusion_of()</tertiary>
    </indexterm>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>validates</secondary>

      <tertiary>exclusion</tertiary>
    </indexterm>

    <para><methodname>exclusion</methodname> is the inversion of <xref
    linkend="validates_inclusion_of"/>. You can define from which values the
    content of this attribute must not be created.</para>

    <para><filename>app/models/product.rb</filename><programlisting>class Product &lt; ActiveRecord::Base
  attr_accessible :expiration_date, :in_stock, :name, :price, :weight

  validates :name,
            :presence =&gt; true,
            :length =&gt; { :in =&gt; 2..20 }

  validates :price,
            :presence =&gt; true

  validates :in_stock,
            <emphasis>:exclusion =&gt; { :in =&gt; [nil] }</emphasis>
end
</programlisting></para>

    <tip>
      <para>Always remember the power of Ruby! For example, you can generate
      the enumerable object always live from another database. In other words,
      the validation does not have to be defined statically.</para>
    </tip>

    <section xml:id="validates_exclusion_of_optionen">
      <title xml:id="validates_exclusion_of_optionen.title">Options</title>

      <para><methodname>exclusion</methodname> can be called with the
      following options:<itemizedlist>
          <listitem>
            <para><code>:message</code></para>

            <para>For outputting a custom error message. Default: "is not
            included in the list". Example:<programlisting>validates :in_stock,
          :exclusion =&gt; { :in =&gt; [nil], 
                          <emphasis>:message =&gt; 'xyz'</emphasis> }
</programlisting><note>
                <para>For all error messages, please note <xref
                linkend="i18n"/>.</para>
              </note></para>
          </listitem>
        </itemizedlist></para>
    </section>
  </section>

  <section xml:id="validates_format_of">
    <title xml:id="validates_format_of.title">format</title>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>methods</secondary>

      <tertiary>validates_format_of()</tertiary>
    </indexterm>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>validates</secondary>

      <tertiary>format</tertiary>
    </indexterm>

    <para>With <methodname>format</methodname> you can define via a regular
    expression (see <uri
    xlink:href="http://de.wikipedia.org/wiki/Regul%C3%A4rer_Ausdruck">http://en.wikipedia.org/wiki/Regular_expression</uri>)
    how the content of an attribute can be structured.</para>

    <para>With <methodname>format</methodname> you can for example carry out a
    simple validation of the syntax of an e-mail address:</para>

    <para><programlisting>validates :email, 
          <emphasis>:format =&gt; { :with =&gt; /\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\Z/i }</emphasis></programlisting></para>

    <warning>
      <para>It should be obvious that the e-mail address validation shown here
      is not complete. It is just meant to be an example. You can only use it
      to check the syntactic correctness of an e-mail address.</para>
    </warning>

    <section xml:id="validates_format_of_optionen">
      <title xml:id="validates_format_of_optionen.title">Options</title>

      <para><methodname>validates_format_of</methodname> can be called with
      the following options:<itemizedlist>
          <listitem>
            <para><code>:message</code></para>

            <para>For outputting a custom error message. Default: "is
            invalid". Example:<programlisting>validates :email, 
          :format =&gt; { :with =&gt; /\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\Z/i,
                       <emphasis>:message =&gt; 'is not a valid email address'</emphasis> }
</programlisting><note>
                <para>For all error messages, please note <xref
                linkend="i18n"/>.</para>
              </note></para>
          </listitem>
        </itemizedlist></para>
    </section>
  </section>

  <section xml:id="validates_allgemeine_validierungs_optionen">
    <title xml:id="validates_allgemeine_validierungs_optionen.title">General
    Validation Options</title>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>validates</secondary>

      <tertiary>allow_nil</tertiary>
    </indexterm>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>validates</secondary>

      <tertiary>allow_blank</tertiary>
    </indexterm>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>validates</secondary>

      <tertiary>on</tertiary>
    </indexterm>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>validates</secondary>

      <tertiary>if</tertiary>
    </indexterm>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>validates</secondary>

      <tertiary>unless</tertiary>
    </indexterm>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>validates</secondary>

      <tertiary>proc</tertiary>
    </indexterm>

    <para>There are some options that can be used for all
    validations:<itemizedlist>
        <listitem>
          <para><code>:allow_nil</code></para>

          <para>Allows the value <code>nil</code>. Example:<programlisting>validates :email, 
          :format =&gt; { :with =&gt; /\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\Z/i },
          <emphasis>:allow_nil =&gt; true</emphasis></programlisting></para>
        </listitem>

        <listitem>
          <para><code>:allow_blank</code></para>

          <para>As <code>allow_nil</code>, but additionally with an empty
          string. Example:<programlisting>validates :email, 
          :format =&gt; { :with =&gt; /\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\Z/i },
          <emphasis>:allow_blank =&gt; true</emphasis></programlisting></para>
        </listitem>

        <listitem>
          <para><code>:on</code></para>

          <para>With <code>on</code>, a validation can be limited to the
          events <code>create</code>, <code>update</code> or
          <code>safe</code>. In the following example, the validation only
          takes effect when the record is initially created (during the
          <code>create</code>):<programlisting>validates :email, 
          :format =&gt; { :with =&gt; /\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\Z/i },
          <emphasis>:on =&gt; :create</emphasis></programlisting></para>
        </listitem>

        <listitem>
          <para><code>:if</code> and <code>:unless</code></para>

          <para><code>:if</code> or <code>:unless</code> call the specified
          method and only execute the validation if the result of the method
          is true:<programlisting>validates :name,
          :presence =&gt; true,
          :if =&gt; :today_is_monday?

def today_is_monday?
  Date.today.monday?
end
</programlisting></para>
        </listitem>

        <listitem>
          <para><code>:proc</code></para>

          <para><code>:</code><code>proc</code> calls a
          <classname>Proc</classname> object.<programlisting>validates :name,
          :presence =&gt; true,
          :if =&gt; Proc.new { |a| a.email == 'test@test.com' }
</programlisting></para>
        </listitem>
      </itemizedlist></para>
  </section>

  <section xml:id="validates_eigene_validations_definieren">
    <title xml:id="validates_eigene_validations_definieren.title">Writing
    Custom Validations</title>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>custom validations</secondary>
    </indexterm>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>validate</secondary>
    </indexterm>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>errors</secondary>

      <tertiary>add</tertiary>
    </indexterm>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>errors</secondary>

      <tertiary>add_to_base</tertiary>
    </indexterm>

    <para>Now and then, you want to do a validation where you need custom
    program logic. For such cases, you can define custom validations.</para>

    <section>
      <title>Defining Validations with Your Own Methods</title>

      <para>Let's assume you have a class HotelReservation and the end of the
      reservation must logically not be before the start of the reservation.
      Let's first create the model:<screen>MacBook:shop xyz$ <command>rails generate model HotelReservation start_date:date end_date:date room_type</command>
[...]
MacBook:shop xyz$ <command>rake db:migrate</command>
[...]
MacBook:shop xyz$</screen></para>

      <para>Then we specify in the
      <filename>app/model/hotel_reservation.rb</filename> that the attributes
      <varname>start_date</varname> and <varname>end_date</varname> must be
      present in any case, plus we use the method
      <methodname>start_has_to_be_before_end</methodname> to make sure that
      the <varname>start_date</varname> is before the
      <varname>end_date</varname>:<programlisting>class HotelReservation &lt; ActiveRecord::Base
  attr_accessible :end_date, :room_type, :start_date

  validates :start_date,
            :presence =&gt; true

  validates :end_date,
            :presence =&gt; true

<emphasis>  validate :start_has_to_be_before_end

  def start_has_to_be_before_end
    if end_date &lt; start_date
      errors.add(:start_date, 'has to be before the end date')
    end
  end</emphasis>

end</programlisting></para>

      <para>With <methodname>errors.add</methodname> we can add error messages
      for individual attributes. With
      <methodname>errors.add_to_base</methodname> you can add error messages
      for the whole object.</para>

      <para>Let's test the validation in the console:<screen>MacBook:shop stefan$ <command>rails console</command>
Loading development environment (Rails 3.2.8)
1.9.3p194 :001 &gt; <command>new_reservation = HotelReservation.new(:start_date =&gt; Date.today, :end_date =&gt; Date.today - 1.day)</command>
 =&gt; #&lt;HotelReservation id: nil, start_date: "2012-09-16", end_date: "2012-09-15", room_type: nil, created_at: nil, updated_at: nil&gt; 
1.9.3p194 :002 &gt; <command>new_reservation.valid?</command>
 =&gt; false 
1.9.3p194 :003 &gt; <command>new_reservation.errors.messages</command>
 =&gt; {:start_date=&gt;["has to be before the end date"]} 
1.9.3p194 :004 &gt; <command>new_reservation.end_date = Date.today + 10.days</command>
 =&gt; Wed, 26 Sep 2012 
1.9.3p194 :005 &gt; <command>new_reservation.valid?</command>
 =&gt; true 
1.9.3p194 :006 &gt; <command>exit</command>
MacBook:shop stefan$ </screen></para>
    </section>
  </section>

  <section xml:id="validates_weitere_doku">
    <title xml:id="validates_weitere_doku.title">Further Documentation</title>

    <para>The topic validations is described very well in the official Rails
    documentation at <uri
    xlink:href="http://guides.rubyonrails.org/active_record_validations_callbacks.html">http://guides.rubyonrails.org/active_record_validations_callbacks.html</uri>.
    In the system, you can access the system documentation with <command>ri
    validates</command> on the command line.</para>
  </section>
</section>
