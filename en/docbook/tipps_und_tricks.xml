<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="tipps_und_tricks"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title xml:id="tipps_und_tricks.title">Tips and Tricks</title>

  <section xml:id="abkuerzungen">
    <title xml:id="abkuerzungen.title">Abbreviations</title>

    <indexterm>
      <primary>abbreviations</primary>
    </indexterm>

    <para>There are a handful of abbreviations that make your life as a
    developer much easier. In the rest of this book, I have always used the
    full version of these commands, to make it clearer for beginners, but in
    practice, you will soon find that the abbreviations are easier to
    use.</para>

    <itemizedlist>
      <listitem>
        <para><command>rails console</command></para>

        <para>Shorthand notation: <command>rails c</command></para>
      </listitem>

      <listitem>
        <para><command>rails server</command></para>

        <para>Shorthand notation: <command>rails s</command></para>
      </listitem>

      <listitem>
        <para><command>rails generate scaffold</command></para>

        <para>Shorthand notation: <command>rails g scaffold</command></para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="templates">
    <title xml:id="templates.title">Templates</title>

    <indexterm>
      <primary>templates</primary>
    </indexterm>

    <para>Once you have been working with Rails for a while, you will always
    make the same changes after calling <command>rails generate
    scaffold</command> or <command>rails generate model</command>. You are
    going to adapt the scaffold to your requirements. Fortunately, you can
    replace the Rails templates for creating the controller or model files
    with your own custom templates. This saves a lot of time.</para>

    <para>I am going to show you the basic principle by using the controller
    and model template as an example.</para>

    <tip>
      <para>15 minutes spent optimizing a template in accordance with your
      requirements will save you many hours of work later in every Rails
      project!</para>
    </tip>

    <section xml:id="scaffold_controller_template">
      <title xml:id="scaffold_controller_template.title">Scaffold Controller
      Template</title>

      <para>Let's assume you want to create a scaffold User:<screen>$ rails generate scaffold User first_name last_name login
      [...]
      invoke  scaffold_controller
      create    app/controllers/users_controller.rb
      [...]
$</screen></para>

      <para>The controller
      <filename>app/controllers/users_controller.rb</filename> generated by
      default then looks like this in Rails 3.2:<programlisting>class UsersController &lt; ApplicationController
  # GET /users
  # GET /users.json
  def index
    @users = User.all

    respond_to do |format|
      format.html # index.html.erb
      format.json { render json: @users }
    end
  end

  # GET /users/1
  # GET /users/1.json
  def show
    @user = User.find(params[:id])

    respond_to do |format|
      format.html # show.html.erb
      format.json { render json: @user }
    end
  end

  # GET /users/new
  # GET /users/new.json
  def new
    @user = User.new

    respond_to do |format|
      format.html # new.html.erb
      format.json { render json: @user }
    end
  end

  # GET /users/1/edit
  def edit
    @user = User.find(params[:id])
  end

  # POST /users
  # POST /users.json
  def create
    @user = User.new(params[:user])

    respond_to do |format|
      if @user.save
        format.html { redirect_to @user, notice: 'User was successfully created.' }
        format.json { render json: @user, status: :created, location: @user }
      else
        format.html { render action: "new" }
        format.json { render json: @user.errors, status: :unprocessable_entity }
      end
    end
  end

  # PUT /users/1
  # PUT /users/1.json
  def update
    @user = User.find(params[:id])

    respond_to do |format|
      if @user.update_attributes(params[:user])
        format.html { redirect_to @user, notice: 'User was successfully updated.' }
        format.json { head :no_content }
      else
        format.html { render action: "edit" }
        format.json { render json: @user.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /users/1
  # DELETE /users/1.json
  def destroy
    @user = User.find(params[:id])
    @user.destroy

    respond_to do |format|
      format.html { redirect_to users_url }
      format.json { head :no_content }
    end
  end
end
</programlisting></para>

      <para>But if we only need HTML and no JSON, then the file could also
      look like this:<programlisting>class UsersController &lt; ApplicationController
  def index
    @users = User.all
  end

  def show
    @user = User.find(params[:id])
  end

  def new
    @user = User.new
  end

  def edit
    @user = User.find(params[:id])
  end

  def create
    @user = User.new(params[:user])

    if @user.save
      redirect_to @user, notice: 'User was successfully created.'
    else
      render action: "new"
    end
  end

  def update
    @user = User.find(params[:id])

    if @user.update_attributes(params[:user])
      redirect_to @user, notice: 'User was successfully updated.'
    else
      render action: "edit"
    end
  end

  def destroy
    @user = User.find(params[:id])
    @user.destroy

    redirect_to users_url
  end
end
</programlisting></para>

      <para>The original template used by <command>rails generate
      scaffold</command> for generating the controller can be found in the
      Rails Github repository at <uri
      xlink:href="https://github.com/rails/rails/blob/3-2-stable/railties/lib/rails/generators/rails/scaffold_controller/templates/controller.rb">https://github.com/rails/rails/blob/3-2-stable/railties/lib/rails/generators/rails/scaffold_controller/templates/controller.rb</uri></para>

      <para>It is a normal ERB file that you can download and then save as new
      file
      <filename>lib/templates/rails/scaffold_controller/controller.rb</filename>
      (you may need to create the corresponding directories manually). To get
      the above desired result, you need to change the template as
      follows:<programlisting>&lt;% if namespaced? -%&gt;
require_dependency "&lt;%= namespaced_file_path %&gt;/application_controller"

&lt;% end -%&gt;
&lt;% module_namespacing do -%&gt;
class &lt;%= controller_class_name %&gt;Controller &lt; ApplicationController
  def index
    @&lt;%= plural_table_name %&gt; = &lt;%= orm_class.all(class_name) %&gt;
  end

  def show
    @&lt;%= singular_table_name %&gt; = &lt;%= orm_class.find(class_name, "params[:id]") %&gt;
  end

  def new
    @&lt;%= singular_table_name %&gt; = &lt;%= orm_class.build(class_name) %&gt;
  end

  def edit
    @&lt;%= singular_table_name %&gt; = &lt;%= orm_class.find(class_name, "params[:id]") %&gt;
  end

  def create
    @&lt;%= singular_table_name %&gt; = &lt;%= orm_class.build(class_name, "params[:#{singular_table_name}]") %&gt;

    if @&lt;%= orm_instance.save %&gt;
      redirect_to @&lt;%= singular_table_name %&gt;, &lt;%= key_value :notice, "'#{human_name} was successfully created.'" %&gt;
    else
      render &lt;%= key_value :action, '"new"' %&gt;
    end
  end

  def update
    @&lt;%= singular_table_name %&gt; = &lt;%= orm_class.find(class_name, "params[:id]") %&gt;

    if @&lt;%= orm_instance.update_attributes("params[:#{singular_table_name}]") %&gt;
      redirect_to @&lt;%= singular_table_name %&gt;, &lt;%= key_value :notice, "'#{human_name} was successfully updated.'" %&gt;
    else
      render &lt;%= key_value :action, '"edit"' %&gt;
    end
  end

  def destroy
    @&lt;%= singular_table_name %&gt; = &lt;%= orm_class.find(class_name, "params[:id]") %&gt;
    @&lt;%= orm_instance.destroy %&gt;

    redirect_to &lt;%= index_helper %&gt;_url
  end
end
&lt;% end -%&gt;
</programlisting></para>

      <para>Each time you now use <command>rails generate scaffold</command>,
      you get the controller in the variation you want.</para>
    </section>

    <section>
      <title>Model Template</title>

      <para>The basic idea is the same as with the controller in <xref
      linkend="scaffold_controller_template"/>: it's all about adapting the
      model created by the Rails generator to your own needs. The model
      template used by <command>rails generate model</command> and therefore
      also by <command>rails generate scaffold</command> can be found in the
      Rails Github repository at <uri
      xlink:href="https://github.com/rails/rails/blob/3-2-stable/activerecord/lib/rails/generators/active_record/model/templates/model.rb">https://github.com/rails/rails/blob/3-2-stable/activerecord/lib/rails/generators/active_record/model/templates/model.rb.</uri></para>

      <para>Save this file in your Rails project under
      <filename>lib/templates/active_record/model/model.rb</filename>. If you
      want to edit the method <methodname>to_s</methodname> per default, your
      <filename>model.rb</filename> could for example look like
      this:<programlisting>&lt;% module_namespacing do -%&gt;
class &lt;%= class_name %&gt; &lt; &lt;%= parent_class_name.classify %&gt;
&lt;% attributes.select {|attr| attr.reference? }.each do |attribute| -%&gt;
  belongs_to :&lt;%= attribute.name %&gt;&lt;%= ', polymorphic: true' if attribute.polymorphic? %&gt;
&lt;% end -%&gt;
&lt;% if !accessible_attributes.empty? -%&gt;
  attr_accessible &lt;%= accessible_attributes.map {|a| ":#{a.name}" }.sort.join(', ') %&gt;
&lt;% else -%&gt;
  # attr_accessible :title, :body
&lt;% end -%&gt;

  def to_s
    &lt;%- if attributes.map{ |a| a.name }.include?('name') -%&gt;
    name
    &lt;%- else -%&gt;
    "&lt;%= class_name %&gt; #{id}"
    &lt;%- end -%&gt;
  end

end
&lt;% end -%&gt;</programlisting></para>

      <para>If you now create a new model with <command>rails generate model
      Book name number_of_pages:integer</command>, the file
      <filename>app/models/book.rb</filename> will look like
      this:<programlisting>class Book &lt; ActiveRecord::Base
  attr_accessible :name, :number_of_pages

  def to_s
    name
  end

end</programlisting></para>
    </section>
  </section>
</chapter>
