<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="javascript"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title xml:id="javascript.title">JavaScript</title>

  <indexterm>
    <primary>JavaScript</primary>
  </indexterm>

  <section xml:id="javascript_einleitung">
    <title xml:id="javascript_einleitung.title">Introduction</title>

    <para>The focus of this chapter is not on explaining JavaScript. The aim
    is to show you as a Rails programmer how you can integrate JavaScript in a
    Rails application. Correspondingly, the chapters do not explain JavaScript
    in detail. I am assuming that you can read and understand JavaScript. If
    not, it may be better to skip this chapter. You can happily get by without
    JavaScript.</para>

    <section xml:id="jquery">
      <title xml:id="jquery.title">jQuery</title>

      <para>By default, Rails 4 uses the jQuery Javascript library (<uri
      xlink:href="http://jquery.com/">http://jquery.com/</uri>). If you do not
      require this library, you should delete the following items from the
      file <filename>app/assets/javascripts/application.js</filename> within
      the asset pipeline (see <xref
      linkend="asset_pipeline"/>):<programlisting>//= require jquery
//= require jquery_ujs</programlisting></para>

      <para>With jQuery, you can implement animations and Ajax interactions on
      your web page relatively easily.</para>

      <para>You will find a good introduction to this topic in the jQuery
      documentation at <uri
      xlink:href="http://learn.jquery.com/">http://learn.jquery.com/</uri></para>
    </section>

    <section xml:id="coffeescript">
      <title xml:id="coffeescript.title">CoffeeScript</title>

      <para>For many Rails developers, CoffeeScript is the best thing invented
      since the introduction of sliced bread. CoffeeScript is a simple
      programming language that is converted to JavaScript via the asset
      pipeline. I am going to use JavaScript and CoffeeScript in this chapter.
      If you would like to know more about CoffeeScript, please look at the
      CoffeeScript documentation at <uri
      xlink:href="http://coffeescript.org/">http://coffeescript.org/</uri> and
      as so often there is also an excellent Railscast on CoffeeScript
      available at <uri
      xlink:href="http://railscasts.com/episodes/267-coffeescript-basics">http://railscasts.com/episodes/267-coffeescript-basics.</uri></para>
    </section>
  </section>

  <section xml:id="javascript_helper">
    <title xml:id="javascript_helper.title">JavaScript Helpers</title>

    <para>For using JavaScript in the view, there are some useful helpers
    available.</para>

    <section xml:id="javascript_tag">
      <title xml:id="javascript_tag.title">javascript_tag</title>

      <indexterm>
        <primary>javascript_tag</primary>
      </indexterm>

      <para>The easiest way of using JavaScript in a view is via<code>
      javascript_tag</code>.</para>

      <para>With the following line in the view, you can execute an alert when
      the page is accessed:</para>

      <para><programlisting>&lt;%= javascript_tag "alert('Just an example.')" %&gt;</programlisting></para>

      <para>The HTML code generated is this:<programlisting>&lt;script type="text/javascript"&gt;
//&lt;![CDATA[
alert('Just an example.')
//]]&gt;
&lt;/script&gt;</programlisting></para>
    </section>

    <section xml:id="link_to_function">
      <title xml:id="link_to_function.title">link_to_function</title>

      <indexterm>
        <primary>link_to_function</primary>
      </indexterm>

      <para>The helper <code>link_to_function</code> creates a link whose
      <code>onclick</code> handler executes a JavaScript.</para>

      <para>Again, here is a example for an alert. The ERB code in the view
      looks like this:<programlisting>&lt;%= link_to_function "trigger alert", "alert('Just an example.')" %&gt;
</programlisting></para>

      <para>The generated HTML code:<programlisting>&lt;a href="#" onclick="alert('Just an example.'); return false;"&gt;trigger alert&lt;/a&gt;
</programlisting></para>
    </section>

    <section xml:id="button_to_function">
      <title xml:id="button_to_function.title">button_to_function</title>

      <indexterm>
        <primary>button_to_function</primary>
      </indexterm>

      <para>The helper <code>button_to_function</code> creates a button whose
      <code>onclick</code> handler executes a JavaScript.</para>

      <para>Once more the example with the alert. The ERB code in the view
      looks like this:<programlisting>&lt;%= button_to_function "trigger alert", "alert('Just an example.')" %&gt;
</programlisting></para>

      <para>The generated HTML code:<programlisting>&lt;input onclick="alert('Just an example.');" type="button" value="trigger alert" /&gt;
</programlisting></para>
    </section>
  </section>

  <section xml:id="javascript_in_der_asset_pipeline">
    <title xml:id="javascript_in_der_asset_pipeline.title">Example</title>

    <para>The easiest way of explaining how you go about programming with
    JavaScript and the asset pipeline in a Rails project is by using a little
    example. As always, the main focus is not on creating an amazingly
    meaningful application. ;-)</para>

    <section xml:id="javascript_formular_veraendern_beispiel">
      <title xml:id="javascript_formular_veraendern_beispiel.title">Changing
      Form Depending on Input</title>

      <para>Let's build a room reservation where you can book a single or
      double room and then have to enter either one or two guest names in the
      same form. The basic structure:<screen>$ <command>rails new hotel</command>
  [...]
$ <command>cd hotel</command> 
$ <command>rails generate scaffold reservation start:date end:date room_type:string guest_name1 guest_name2</command>
  [...]
$ <command>rake db:migrate</command>
  [...]
$ <command>rails server</command>
  [...]
</screen></para>

      <para>With this setup we will get a very spartanic <uri
      xlink:href="http://0.0.0.0:3000/reservations/new">http://0.0.0.0:3000/reservations/new</uri><screenshot>
          <info>
            <title>The Basic Form</title>
          </info>

          <mediaobject>
            <imageobject>
              <imagedata fileref="screenshots/hotel_zimmer_basic_form.jpg"/>
            </imageobject>
          </mediaobject>
        </screenshot></para>

      <para>That is not userfriendly. The aim is to display the following page
      when you go to <uri
      xlink:href="http://0.0.0.0:3000/reservations/new">http://0.0.0.0:3000/reservations/new</uri>:</para>

      <screenshot>
        <info>
          <title>Form with a single room</title>
        </info>

        <mediaobject>
          <imageobject>
            <imagedata fileref="screenshots/hotel_einzelzimmer_form.jpg"/>
          </imageobject>
        </mediaobject>
      </screenshot>

      <para>As soon as the user selects a double room instead of a single, we
      want a second name field to appear:</para>

      <screenshot>
        <info>
          <title>Form with a double room</title>
        </info>

        <mediaobject>
          <imageobject>
            <imagedata fileref="screenshots/hotel_doppelzimmer_form.jpg"/>
          </imageobject>
        </mediaobject>
      </screenshot>

      <para>So I am changing two things in the
      <filename>app/views/reservations/_form.html.erb</filename>:<itemizedlist>
          <listitem>
            <para>Set the <varname>room_type</varname> via a dropdown
            box.</para>

            <para><code>&lt;%= f.select :room_type,
            options_for_select(['single room', 'double room'])
            %&gt;</code></para>
          </listitem>

          <listitem>
            <para>In the div element around the second name, I set an ID
            'second_name'.</para>

            <para><code>&lt;div class="field"
            id='second_name'&gt;</code></para>
          </listitem>
        </itemizedlist></para>

      <para>Here is the whole new code for
      <filename>app/views/reservations/_form.html.erb</filename><programlisting>&lt;%= form_for(@reservation) do |f| %&gt;
  &lt;% if @reservation.errors.any? %&gt;
    &lt;div id="error_explanation"&gt;
      &lt;h2&gt;&lt;%= pluralize(@reservation.errors.count, "error") %&gt; prohibited this reservation from being saved:&lt;/h2&gt;

      &lt;ul&gt;
      &lt;% @reservation.errors.full_messages.each do |msg| %&gt;
        &lt;li&gt;&lt;%= msg %&gt;&lt;/li&gt;
      &lt;% end %&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;% end %&gt;

  &lt;div class="field"&gt;
    &lt;%= f.label :start %&gt;&lt;br&gt;
    &lt;%= f.date_select :start %&gt;
  &lt;/div&gt;
  &lt;div class="field"&gt;
    &lt;%= f.label :end %&gt;&lt;br&gt;
    &lt;%= f.date_select :end %&gt;
  &lt;/div&gt;
  &lt;div class="field"&gt;
    &lt;%= f.label :room_type %&gt;&lt;br&gt;
    &lt;%= f.select :room_type, options_for_select(['single room', 'double room']) %&gt;
  &lt;/div&gt;
  &lt;div class="field"&gt;
    &lt;%= f.label :guest_name1 %&gt;&lt;br&gt;
    &lt;%= f.text_field :guest_name1 %&gt;
  &lt;/div&gt;
  &lt;div class="field" id='second_name'&gt;
    &lt;%= f.label :guest_name2 %&gt;&lt;br&gt;
    &lt;%= f.text_field :guest_name2 %&gt;
  &lt;/div&gt;
  &lt;div class="actions"&gt;
    &lt;%= f.submit %&gt;
  &lt;/div&gt;
&lt;% end %&gt;</programlisting></para>

      <para>In the file
      <filename>app/assets/javascripts/reservations.js.coffee</filename> I
      define the CoffeeScript code that toggles the element with the ID
      <varname>second_name</varname> between visible (<code>show</code>) or
      invisible (<code>hide</code>) depending on the content of
      <varname>reservation_room_type</varname>:<programlisting>ready = -&gt;
  $('#second_name').hide()
  $('#reservation_room_type').change -&gt;
    room_type = $('#reservation_room_type :selected').text()
    if room_type == 'single room'
      $('#second_name').hide()
    else
      $('#second_name').show()

$(document).ready(ready)
$(document).on('page:load', ready)</programlisting></para>

      <note>
        <para>In reality, you would surely integrate the guest names in a 1:n
        has_many association, but in this example we just want to demonstrate
        how you can change the content of a form via JavaScript.</para>
      </note>
    </section>
  </section>
</chapter>
