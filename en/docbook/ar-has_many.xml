<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xml:id="activerecord_has_many"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title xml:id="activerecord_has_many.title">has_many â€“ 1:n
  Association</title>

  <indexterm>
    <primary>ActiveRecord</primary>

    <secondary>relations</secondary>

    <tertiary>has_many()</tertiary>
  </indexterm>

  <indexterm>
    <primary>ActiveRecord</primary>

    <secondary>relations</secondary>

    <tertiary>belongs_to()</tertiary>
  </indexterm>

  <indexterm>
    <primary>ActiveRecord</primary>

    <secondary>associations</secondary>

    <see>ActiveRecord, relations</see>
  </indexterm>

  <para>In order to explain <methodname>has_many</methodname>, let's create a
  bookshelf application. In this database, there is a model with books and a
  model with authors. As a book can have multiple authors, we need a 1:n
  association (<foreignphrase xml:lang="en">one-to-many
  association</foreignphrase>) to represent it.</para>

  <note>
    <para>Associations are also sometimes referred to as <foreignphrase
    xml:lang="en">relations</foreignphrase> or <foreignphrase
    xml:lang="en">relationships</foreignphrase>.</para>
  </note>

  <para>First, we create a Rails application:<screen>$ rails new bookshelf
  [...]
$ cd bookshelf 
$ </screen></para>

  <para>Now we create the model for the books:<screen>$ rails generate model book title
  [...]
$</screen></para>

  <para>And finally, we create the database table for the authors. In this, we
  need an assignment field to the books table. This <foreignphrase
  xml:lang="en">foreign key</foreignphrase> is always set by default as name
  of the referenced object (here: <literal>book</literal>) with an attached
  <literal>_id</literal>:<screen>$ rails generate model author book_id:integer first_name last_name
  [...]
$</screen></para>

  <para>Then execute a <command>rake db:migrate</command> so that the database
  tables are actually created:<screen>$  rake db:migrate
  [...]
$</screen></para>

  <para>Let's have a look at this on the <foreignphrase
  xml:lang="en">console</foreignphrase>:<screen>$ rails console
Loading development environment (Rails 4.0.0)
&gt;&gt; Book
=&gt; Book(id: integer, title: string, created_at: datetime, updated_at: datetime)
&gt;&gt; Author
=&gt; Author(id: integer, book_id: integer, first_name: string, last_name: string, created_at: datetime, updated_at: datetime)
&gt;&gt; exit
$</screen></para>

  <para>The two database tables are set up and can be used with ActiveRecord.
  But ActiveRecord does not yet know anything of the 1:n relation between
  them. But this can be done in two small steps.</para>

  <para>First we add the line <code>has_many :authors</code> in the
  <filename>app/models/book.rb</filename> file to set the 1:n
  relationship:<programlisting>class Book &lt; ActiveRecord::Base
  has_many :authors
end</programlisting></para>

  <para>Than we add <code>belongs_to :book</code> in the
  <filename>app/models/author.rb</filename> file to get the other way around
  configured (this is not always needed but often comes in
  handy):<programlisting>class Author &lt; ActiveRecord::Base
  belongs_to :book
end</programlisting></para>

  <para>These two simple definitions form the basis for a good deal of
  ActiveRecord magic. It will generate a bunch of cool new methods for us to
  link both models.</para>

  <section xml:id="activerecord_1n_erstellen">
    <title xml:id="activerecord_1n_erstellen.title">Creating Records</title>

    <para>In this example, we want to save a record for the book "Homo faber"
    by Max Frisch.</para>

    <section xml:id="activerecord_hinzufuegen_manuell">
      <title xml:id="activerecord_hinzufuegen_manuell.title">Manually</title>

      <para>We drop the database with <command>rake db:reset</command><screen>$ rake db:reset
  [...]
$  </screen></para>

      <para>Befor using the magic we'll insert a book with an author manually.
      For that we have to use the book's id in the <varname>book_id</varname>
      attribute to create the author.<screen>$ rails console
Loading development environment (Rails 4.0.0)
&gt;&gt; book = Book.create(title: 'Homo faber')
   (0.1ms)  begin transaction
  SQL (2.3ms)  INSERT INTO "books" ("created_at", "title", "updated_at") VALUES (?, ?, ?)  [["created_at", Tue, 16 Jul 2013 11:58:17 UTC +00:00], ["title", "Homo faber"], ["updated_at", Tue, 16 Jul 2013 11:58:17 UTC +00:00]]
   (3.0ms)  commit transaction
=&gt; #&lt;Book id: 1, title: "Homo faber", created_at: "2013-07-16 11:58:17", updated_at: "2013-07-16 11:58:17"&gt;
&gt;&gt; author = Author.create(book_id: book.id, first_name: 'Max', last_name: 'Frisch')
   (0.1ms)  begin transaction
  SQL (0.5ms)  INSERT INTO "authors" ("book_id", "created_at", "first_name", "last_name", "updated_at") VALUES (?, ?, ?, ?, ?)  [["book_id", 1], ["created_at", Tue, 16 Jul 2013 11:58:21 UTC +00:00], ["first_name", "Max"], ["last_name", "Frisch"], ["updated_at", Tue, 16 Jul 2013 11:58:21 UTC +00:00]]
   (3.1ms)  commit transaction
=&gt; #&lt;Author id: 1, book_id: 1, first_name: "Max", last_name: "Frisch", created_at: "2013-07-16 11:58:21", updated_at: "2013-07-16 11:58:21"&gt;
&gt;&gt; exit
$</screen></para>

      <indexterm>
        <primary>ActiveRecord</primary>

        <secondary>methods</secondary>

        <tertiary>id()</tertiary>
      </indexterm>

      <para>Entering the <literal>book_id</literal> manually in this way is of
      course not very practical and susceptible to errors. That's why there is
      the method <xref linkend="activerecord_has_many_create"/>.</para>
    </section>

    <section xml:id="activerecord_has_many_create">
      <title xml:id="activerecord_has_many_create.title">create</title>

      <indexterm>
        <primary>ActiveRecord</primary>

        <secondary>methods</secondary>

        <tertiary>create()</tertiary>
      </indexterm>

      <para>Now we try doing the same as in <xref
      linkend="activerecord_hinzufuegen_manuell"/>, but this time we use a bit
      of ActiveRecord magic. We can use the method
      <methodname>create</methodname> of <literal>authors</literal> to add new
      authors to each <classname>Book</classname> object. These automatically
      get the correct <literal>book_id</literal>:<screen>$ rake db:reset
  [...]
$ rails console
Loading development environment (Rails 4.0.0)
&gt;&gt; book = Book.create(title: 'Homo faber')
   (0.1ms)  begin transaction
  SQL (2.2ms)  INSERT INTO "books" ("created_at", "title", "updated_at") VALUES (?, ?, ?)  [["created_at", Tue, 16 Jul 2013 12:01:01 UTC +00:00], ["title", "Homo faber"], ["updated_at", Tue, 16 Jul 2013 12:01:01 UTC +00:00]]
   (3.1ms)  commit transaction
=&gt; #&lt;Book id: 1, title: "Homo faber", created_at: "2013-07-16 12:01:01", updated_at: "2013-07-16 12:01:01"&gt;
&gt;&gt; author = book.authors.create(first_name: 'Max', last_name: 'Frisch')
   (0.0ms)  begin transaction
  SQL (0.4ms)  INSERT INTO "authors" ("book_id", "created_at", "first_name", "last_name", "updated_at") VALUES (?, ?, ?, ?, ?)  [["book_id", 1], ["created_at", Tue, 16 Jul 2013 12:01:23 UTC +00:00], ["first_name", "Max"], ["last_name", "Frisch"], ["updated_at", Tue, 16 Jul 2013 12:01:23 UTC +00:00]]
   (0.8ms)  commit transaction
=&gt; #&lt;Author id: 1, book_id: 1, first_name: "Max", last_name: "Frisch", created_at: "2013-07-16 12:01:23", updated_at: "2013-07-16 12:01:23"&gt;
&gt;&gt; exit
$</screen></para>

      <para>You could also place the <methodname>authors.create()</methodname>
      directly behind the <methodname>Book.create()</methodname>:<screen>$ rake db:reset
  [...]
$ rails console
Loading development environment (Rails 4.0.0)
&gt;&gt; Book.create(title: 'Homo faber').authors.create(first_name: 'Max', last_name: 'Frisch')
   (0.1ms)  begin transaction
  SQL (2.2ms)  INSERT INTO "books" ("created_at", "title", "updated_at") VALUES (?, ?, ?)  [["created_at", Tue, 16 Jul 2013 12:02:36 UTC +00:00], ["title", "Homo faber"], ["updated_at", Tue, 16 Jul 2013 12:02:36 UTC +00:00]]
   (2.6ms)  commit transaction
   (0.0ms)  begin transaction
  SQL (0.4ms)  INSERT INTO "authors" ("book_id", "created_at", "first_name", "last_name", "updated_at") VALUES (?, ?, ?, ?, ?)  [["book_id", 1], ["created_at", Tue, 16 Jul 2013 12:02:36 UTC +00:00], ["first_name", "Max"], ["last_name", "Frisch"], ["updated_at", Tue, 16 Jul 2013 12:02:36 UTC +00:00]]
   (0.9ms)  commit transaction
=&gt; #&lt;Author id: 1, book_id: 1, first_name: "Max", last_name: "Frisch", created_at: "2013-07-16 12:02:36", updated_at: "2013-07-16 12:02:36"&gt;
&gt;&gt; exit
$</screen></para>

      <para>As <methodname>create</methodname> also accepts an array of hashes
      as an alternative to a single hash, you can also create multiple authors
      for a book in one go:<screen>$ rake db:reset
  [...]
$ rails console
Loading development environment (Rails 4.0.0)
&gt;&gt; Book.create(title: 'Example').authors.create([{last_name: 'A'}, {last_name: 'B'}])
   (0.1ms)  begin transaction
  SQL (2.1ms)  INSERT INTO "books" ("created_at", "title", "updated_at") VALUES (?, ?, ?)  [["created_at", Tue, 16 Jul 2013 12:03:30 UTC +00:00], ["title", "Example"], ["updated_at", Tue, 16 Jul 2013 12:03:30 UTC +00:00]]
   (3.0ms)  commit transaction
   (0.0ms)  begin transaction
  SQL (0.4ms)  INSERT INTO "authors" ("book_id", "created_at", "last_name", "updated_at") VALUES (?, ?, ?, ?)  [["book_id", 1], ["created_at", Tue, 16 Jul 2013 12:03:30 UTC +00:00], ["last_name", "A"], ["updated_at", Tue, 16 Jul 2013 12:03:30 UTC +00:00]]
   (0.8ms)  commit transaction
   (0.0ms)  begin transaction
  SQL (0.3ms)  INSERT INTO "authors" ("book_id", "created_at", "last_name", "updated_at") VALUES (?, ?, ?, ?)  [["book_id", 1], ["created_at", Tue, 16 Jul 2013 12:03:30 UTC +00:00], ["last_name", "B"], ["updated_at", Tue, 16 Jul 2013 12:03:30 UTC +00:00]]
   (0.8ms)  commit transaction
=&gt; [#&lt;Author id: 1, book_id: 1, first_name: nil, last_name: "A", created_at: "2013-07-16 12:03:30", updated_at: "2013-07-16 12:03:30"&gt;, #&lt;Author id: 2, book_id: 1, first_name: nil, last_name: "B", created_at: "2013-07-16 12:03:30", updated_at: "2013-07-16 12:03:30"&gt;]
&gt;&gt; exit
$ </screen></para>
    </section>

    <section xml:id="activerecord_hinzufuegen_build">
      <title xml:id="activerecord_hinzufuegen_build.title">build</title>

      <indexterm>
        <primary>ActiveRecord</primary>

        <secondary>methods</secondary>

        <tertiary>build()</tertiary>
      </indexterm>

      <para>The method <methodname>build</methodname> resembles
      <methodname>create</methodname>. But the record is not saved. This only
      happens after a <methodname>save</methodname>:<screen>$ rake db:reset
  [...]
$ rails console
Loading development environment (Rails 4.0.0)
&gt;&gt; book = Book.create(title: 'Homo faber')
   (0.1ms)  begin transaction
  SQL (24.5ms)  INSERT INTO "books" ("created_at", "title", "updated_at") VALUES (?, ?, ?)  [["created_at", Sun, 18 Nov 2012 11:35:35 UTC +00:00], ["title", "Homo faber"], ["updated_at", Sun, 18 Nov 2012 11:35:35 UTC +00:00]]
   (3.0ms)  commit transaction
=&gt; #&lt;Book id: 1, title: "Homo faber", created_at: "2012-11-18 11:35:35", updated_at: "2012-11-18 11:35:35"&gt;
&gt;&gt; author = book.authors.build(first_name: 'Max', last_name: 'Frisch')
=&gt; #&lt;Author id: nil, book_id: 1, first_name: "Max", last_name: "Frisch", created_at: nil, updated_at: nil&gt;
&gt;&gt; author.new_record?
=&gt; true
&gt;&gt; author.save
   (0.1ms)  begin transaction
  SQL (0.7ms)  INSERT INTO "authors" ("book_id", "created_at", "first_name", "last_name", "updated_at") VALUES (?, ?, ?, ?, ?)  [["book_id", 1], ["created_at", Sun, 18 Nov 2012 11:36:12 UTC +00:00], ["first_name", "Max"], ["last_name", "Frisch"], ["updated_at", Sun, 18 Nov 2012 11:36:12 UTC +00:00]]
   (2.5ms)  commit transaction
=&gt; true
&gt;&gt; author.new_record?
=&gt; false
&gt;&gt; exit
$ </screen></para>

      <warning>
        <para>When using <methodname>create</methodname> and
        <methodname>build</methodname>, you of course have to observe logical
        dependencies, otherwise there will be an error. For example, you
        cannot chain two <methodname>build</methodname> methods.
        Example:<screen>$ rails console
Loading development environment (Rails 4.0.0)
&gt;&gt; Book.build(title: 'Example').authors.build(last_name: 'A')
NoMethodError: undefined method `build' for #&lt;Class:0x007fcc6ce71ab8&gt;
[...]
&gt;&gt; exit
$ </screen></para>
      </warning>
    </section>
  </section>

  <section xml:id="activerecord_1n_zugreifen">
    <title xml:id="activerecord_1n_zugreifen.title">Accessing Records</title>

    <para>First we need example data. Please populate the file
    <filename>db/seeds.rb</filename> with the following
    content:<programlisting>Book.create(title: 'Homo faber').authors.create(first_name: 'Max', last_name: 'Frisch')
Book.create(title: 'Der Besuch der alten Dame').authors.create(first_name: 'Friedrich', last_name: 'DÃ¼rrenmatt')
Book.create(title: 'Julius Shulman: The Last Decade').authors.create([
  {first_name: 'Thomas', last_name: 'Schirmbock'},
  {first_name: 'Julius', last_name: 'Shulman'},
  {first_name: 'JÃ¼rgen', last_name: 'Nogai'}
  ])
Book.create(title: 'Julius Shulman: Palm Springs').authors.create([
  {first_name: 'Michael', last_name: 'Stern'},
  {first_name: 'Alan', last_name: 'Hess'}
  ])
Book.create(title: 'Photographing Architecture and Interiors').authors.create([
  {first_name: 'Julius', last_name: 'Shulman'},
  {first_name: 'Richard', last_name: 'Neutra'}
  ])
Book.create(title: 'Der Zauberberg').authors.create(first_name: 'Thomas', last_name: 'Mann')
Book.create(title: 'In einer Familie').authors.create(first_name: 'Heinrich', last_name: 'Mann')</programlisting></para>

    <para>Now drop the database and refill it with the
    <filename>db/seeds.rb</filename>:<screen>$ rake db:reset
  [...]
$</screen></para>

    <para>The convenient feature of the 1:n assignment in ActiveRecord is the
    particularly easy access to the n instances. Let's look at the first
    record:<screen>$ rails console
Loading development environment (Rails 4.0.0)
&gt;&gt; Book.first
  Book Load (0.1ms)  SELECT "books".* FROM "books" ORDER BY "books"."id" ASC LIMIT 1
=&gt; #&lt;Book id: 1, title: "Homo faber", created_at: "2013-07-16 12:05:49", updated_at: "2013-07-16 12:05:49"&gt;
&gt;&gt; Book.first.authors
  Book Load (0.3ms)  SELECT "books".* FROM "books" ORDER BY "books"."id" ASC LIMIT 1
  Author Load (1.4ms)  SELECT "authors".* FROM "authors" WHERE "authors"."book_id" = ?  [["book_id", 1]]
=&gt; #&lt;ActiveRecord::Associations::CollectionProxy [#&lt;Author id: 1, book_id: 1, first_name: "Max", last_name: "Frisch", created_at: "2013-07-16 12:05:50", updated_at: "2013-07-16 12:05:50"&gt;]&gt;
&gt;&gt; </screen></para>

    <para>Isn't that cool?! You can access the records simply via the plural
    form of the n model. The result is returned as array. Hm, maybe it also
    works the other way round?<screen>&gt;&gt; Author.first.book
  Author Load (0.4ms)  SELECT "authors".* FROM "authors" ORDER BY "authors"."id" ASC LIMIT 1
  Book Load (0.2ms)  SELECT "books".* FROM "books" WHERE "books"."id" = ? ORDER BY "books"."id" ASC LIMIT 1  [["id", 1]]
=&gt; #&lt;Book id: 1, title: "Homo faber", created_at: "2013-07-16 12:05:49", updated_at: "2013-07-16 12:05:49"&gt;
&gt;&gt; exit
$</screen></para>

    <para>Bingo! Accessing the associated <classname>Book</classname> class is
    also very easy. And as it's only a single record
    (<methodname>belongs_to</methodname>), the singular form is used in this
    case.</para>

    <note>
      <para>If there was no author for this book, the result would be an empty
      array. If no book is associated with an author, then ActiveRecord
      outputs the value <code>nil</code> as
      <classname>Book</classname>.</para>
    </note>
  </section>

  <section>
    <title>Searching For Records</title>

    <para>Before we can start searching, we again need defined example data.
    Please fill the file <filename>db/seeds.rb</filename> with the following
    content (its the same as we used in <xref
    linkend="activerecord_1n_zugreifen"/>):<programlisting>Book.create(title: 'Homo faber').authors.create(first_name: 'Max', last_name: 'Frisch')
Book.create(title: 'Der Besuch der alten Dame').authors.create(first_name: 'Friedrich', last_name: 'DÃ¼rrenmatt')
Book.create(title: 'Julius Shulman: The Last Decade').authors.create([
  {first_name: 'Thomas', last_name: 'Schirmbock'},
  {first_name: 'Julius', last_name: 'Shulman'},
  {first_name: 'JÃ¼rgen', last_name: 'Nogai'}
  ])
Book.create(title: 'Julius Shulman: Palm Springs').authors.create([
  {first_name: 'Michael', last_name: 'Stern'},
  {first_name: 'Alan', last_name: 'Hess'}
  ])
Book.create(title: 'Photographing Architecture and Interiors').authors.create([
  {first_name: 'Julius', last_name: 'Shulman'},
  {first_name: 'Richard', last_name: 'Neutra'}
  ])
Book.create(title: 'Der Zauberberg').authors.create(first_name: 'Thomas', last_name: 'Mann')
Book.create(title: 'In einer Familie').authors.create(first_name: 'Heinrich', last_name: 'Mann')</programlisting></para>

    <para>Now drop the database and refill it with the
    <filename>db/seeds.rb</filename>:<screen>$ rake db:reset
  [...]
$</screen></para>

    <para>And off we go. First we check how many books are in the
    database:<screen>$ rails console
Loading development environment (Rails 4.0.0)
&gt;&gt; Book.count
   (0.1ms)  SELECT COUNT(*) FROM "books"
=&gt; 7
&gt;&gt;</screen></para>

    <para>And how many authors?<screen>&gt;&gt; Author.count
   (0.1ms)  SELECT COUNT(*) FROM "authors" 
=&gt; 11
&gt;&gt; exit
$ </screen></para>

    <section xml:id="activerecord_1n_joins">
      <title xml:id="activerecord_1n_joins.title">joins</title>

      <indexterm>
        <primary>ActiveRecord</primary>

        <secondary>methods</secondary>

        <tertiary>joins()</tertiary>
      </indexterm>

      <para>To find all books that have at least one author with the surname
      'Mann' we use a <foreignphrase
      xml:lang="en">join</foreignphrase>.</para>

      <para><footnote>
          <para>If you are interested in the theoretical background on
          <foreignphrase xml:lang="en">joins</foreignphrase>, you will find
          more information here: <uri
          xlink:href="http://de.wikipedia.org/wiki/SQL#Abfrage_mit_verkn.C3.BCpften_Tabellen">http://en.wikipedia.org/wiki/SQL#Queries</uri>,
          <uri
          xlink:href="http://en.wikipedia.org/wiki/Join_%28SQL%29">http://en.wikipedia.org/wiki/Join_(SQL)</uri>,
          <uri
          xlink:href="http://de.wikipedia.org/wiki/Relationale_Algebra#Join">http://en.wikipedia.org/wiki/Relational_algebra#Joins_and_join-like_operators</uri></para>
        </footnote></para>

      <para><screen>$ rails console
Loading development environment (Rails 4.0.0)
&gt;&gt; Book.joins(:authors).where(:authors =&gt; {last_name: 'Mann'})
  Book Load (0.5ms)  SELECT "books".* FROM "books" INNER JOIN "authors" ON "authors"."book_id" = "books"."id" WHERE "authors"."last_name" = 'Mann'
=&gt; #&lt;ActiveRecord::Relation [#&lt;Book id: 6, title: "Der Zauberberg", created_at: "2013-07-16 12:05:50", updated_at: "2013-07-16 12:05:50"&gt;, #&lt;Book id: 7, title: "In einer Familie", created_at: "2013-07-16 12:05:50", updated_at: "2013-07-16 12:05:50"&gt;]&gt;
&gt;&gt;</screen></para>

      <para>The database contains two books with the author 'Mann'. In the
      SQL, you can see that the method <methodname>joins</methodname> executes
      an <literal>INNER JOIN</literal>.</para>

      <para>Of course, we can also do it the other way round. We could search
      for the author of the book 'Homo faber':<screen>&gt;&gt; Author.joins(:book).where(:books =&gt; {title: 'Homo faber'})
  Author Load (0.3ms)  SELECT "authors".* FROM "authors" INNER JOIN "books" ON "books"."id" = "authors"."book_id" WHERE "books"."title" = 'Homo faber'
=&gt; #&lt;ActiveRecord::Relation [#&lt;Author id: 1, book_id: 1, first_name: "Max", last_name: "Frisch", created_at: "2013-07-16 12:05:50", updated_at: "2013-07-16 12:05:50"&gt;]&gt;
&gt;&gt; exit
$</screen></para>
    </section>

    <section xml:id="activerecord_1n_includes">
      <title xml:id="activerecord_1n_includes.title">includes</title>

      <indexterm>
        <primary>ActiveRecord</primary>

        <secondary>methods</secondary>

        <tertiary>includes()</tertiary>
      </indexterm>

      <indexterm>
        <primary>ActiveRecord</primary>

        <secondary>methods</secondary>

        <tertiary>joins()</tertiary>
      </indexterm>

      <para><methodname>includes</methodname> is very similar to the method
      <methodname>joins</methodname> (see <xref
      linkend="activerecord_1n_joins"/>). Again, you can use it to search
      within a 1:n association. Let's once more search for all books with an
      author whose surname is 'Mann':<screen>$ rails console
Loading development environment (Rails 4.0.0)
&gt;&gt; Book.includes(:authors).where(:authors =&gt; {last_name: 'Mann'})
  SQL (0.3ms)  SELECT "books"."id" AS t0_r0, "books"."title" AS t0_r1, "books"."created_at" AS t0_r2, "books"."updated_at" AS t0_r3, "authors"."id" AS t1_r0, "authors"."book_id" AS t1_r1, "authors"."first_name" AS t1_r2, "authors"."last_name" AS t1_r3, "authors"."created_at" AS t1_r4, "authors"."updated_at" AS t1_r5 FROM "books" LEFT OUTER JOIN "authors" ON "authors"."book_id" = "books"."id" WHERE "authors"."last_name" = 'Mann'
=&gt; #&lt;ActiveRecord::Relation [#&lt;Book id: 6, title: "Der Zauberberg", created_at: "2013-07-16 12:05:50", updated_at: "2013-07-16 12:05:50"&gt;, #&lt;Book id: 7, title: "In einer Familie", created_at: "2013-07-16 12:05:50", updated_at: "2013-07-16 12:05:50"&gt;]&gt;
&gt;&gt; exit
$ </screen></para>

      <para>In the console output, you can see that the SQL code is different
      from the <methodname>joins</methodname> query.</para>

      <para><methodname>joins</methodname> only reads in the
      <literal>Book</literal> records and <methodname>includes</methodname>
      also reads the associated <literal>Authors</literal>. As you can see
      even in our little example, this obviously takes longer (0.2 ms vs. 0.3
      ms).</para>
    </section>

    <section>
      <title>join vs. includes</title>

      <para>Why would you want to use <methodname>includes</methodname> at
      all? Well, if you already know before the query that you will later need
      all author data, then it makes sense to use
      <methodname>includes</methodname>, because then you only need one
      database query. That is a lot faster than starting a seperate query for
      each n.</para>

      <para>In that case, would it not be better to always work with
      <methodname>includes</methodname>? No, it depends on the specific case.
      When you are using <methodname>includes</methodname>, a lot more data is
      transported initially. This has to be cached and processed by
      ActiveRecord, which takes longer and requires more resources.</para>
    </section>
  </section>

  <section xml:id="has_many_delete" xml:lang="">
    <title xml:id="has_many_delete.title">delete and destroy</title>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>methods</secondary>

      <tertiary>delete()</tertiary>
    </indexterm>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>methods</secondary>

      <tertiary>delete_all()</tertiary>
    </indexterm>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>methods</secondary>

      <tertiary>destroy()</tertiary>
    </indexterm>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>methods</secondary>

      <tertiary>destroy_all()</tertiary>
    </indexterm>

    <para>With the methods <methodname>destroy</methodname>,
    <methodname>destroy_all</methodname>, <methodname>delete</methodname> and
    <methodname>delete_all</methodname> you can delete records, as described
    in <xref linkend="datensatz-loeschen"/>. In the context of
    <methodname>has_many</methodname>, this means that you can delete the
    <classname>Author</classname> records associated with a
    <classname>Book</classname> in one go:<screen>$ rails console
Loading development environment (Rails 4.0.0)
&gt;&gt; book = Book.where(title: 'Julius Shulman: The Last Decade').first
  Book Load (0.1ms)  SELECT "books".* FROM "books" WHERE "books"."title" = 'Julius Shulman: The Last Decade' ORDER BY "books"."id" ASC LIMIT 1
=&gt; #&lt;Book id: 3, title: "Julius Shulman: The Last Decade", created_at: "2013-07-16 12:05:50", updated_at: "2013-07-16 12:05:50"&gt;
&gt;&gt; book.authors.count
   (1.7ms)  SELECT COUNT(*) FROM "authors" WHERE "authors"."book_id" = ?  [["book_id", 3]]
=&gt; 3
&gt;&gt; book.authors.destroy_all
  Author Load (0.4ms)  SELECT "authors".* FROM "authors" WHERE "authors"."book_id" = ?  [["book_id", 3]]
   (0.1ms)  begin transaction
  SQL (0.5ms)  DELETE FROM "authors" WHERE "authors"."id" = ?  [["id", 3]]
  SQL (0.1ms)  DELETE FROM "authors" WHERE "authors"."id" = ?  [["id", 4]]
  SQL (0.0ms)  DELETE FROM "authors" WHERE "authors"."id" = ?  [["id", 5]]
   (2.4ms)  commit transaction
=&gt; [#&lt;Author id: 3, book_id: 3, first_name: "Thomas", last_name: "Schirmbock", created_at: "2013-07-16 12:05:50", updated_at: "2013-07-16 12:05:50"&gt;, #&lt;Author id: 4, book_id: 3, first_name: "Julius", last_name: "Shulman", created_at: "2013-07-16 12:05:50", updated_at: "2013-07-16 12:05:50"&gt;, #&lt;Author id: 5, book_id: 3, first_name: "JÃ¼rgen", last_name: "Nogai", created_at: "2013-07-16 12:05:50", updated_at: "2013-07-16 12:05:50"&gt;]
&gt;&gt; book.authors.count
   (0.2ms)  SELECT COUNT(*) FROM "authors" WHERE "authors"."book_id" = ?  [["book_id", 3]]
=&gt; 0
&gt;&gt; exit
$</screen></para>
  </section>

  <section xml:id="activerecord_1n_optionen">
    <title xml:id="activerecord_1n_optionen.title">Options</title>

    <para>I can't comment on all possible options at this point. But I'd like
    to show you the most often used ones. For all others, please refer to the
    Ruby on Rails documentation that you can find on the Internet at <uri
    xlink:href="http://rails.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html">http://rails.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html</uri>.</para>

    <section>
      <title>belongs_to</title>

      <indexterm>
        <primary>ActiveRecord</primary>

        <secondary>relations</secondary>

        <tertiary>belongs_to()</tertiary>
      </indexterm>

      <para>The most important option for <methodname>belongs_to</methodname>
      is.</para>

      <section>
        <title>touch: true</title>

        <para>It automatically sets the field <literal>updated_at</literal> of
        the entry in the table <classname>Book</classname> to the current time
        when an <classname>Author</classname> is edited. In the
        <filename>app/models/author.rb</filename>, it would look like
        this:<programlisting>class Author &lt; ActiveRecord::Base
  belongs_to :book, touch: true
end</programlisting></para>
      </section>
    </section>

    <section>
      <title>has_many</title>

      <indexterm>
        <primary>ActiveRecord</primary>

        <secondary>relations</secondary>

        <tertiary>has_many()</tertiary>
      </indexterm>

      <para>The most important options for <code>has_many are</code>.</para>

      <section>
        <title>order: :last_name</title>

        <para>If you want to sort the authors by surname, you can do this via
        the following <filename>app/models/book.rb</filename>:<programlisting>class Book &lt; ActiveRecord::Base
  has_many :authors, order: :last_name
end</programlisting></para>

        <para>As an example, let's create a new book with new authors and see
        how ActiveRecord sorts them:<screen>$ rails console
Loading development environment (Rails 4.0.0)
&gt;&gt; Book.create(title: 'Test').authors.create([{last_name: 'Z'}, {last_name: 'A'}]) 
   (0.1ms)  begin transaction
  SQL (23.5ms)  INSERT INTO "books" ("created_at", "title", "updated_at") VALUES (?, ?, ?)  [["created_at", Sun, 18 Nov 2012 12:04:31 UTC +00:00], ["title", "Test"], ["updated_at", Sun, 18 Nov 2012 12:04:31 UTC +00:00]]
   (2.6ms)  commit transaction
   (0.1ms)  begin transaction
  SQL (0.6ms)  INSERT INTO "authors" ("book_id", "created_at", "first_name", "last_name", "updated_at") VALUES (?, ?, ?, ?, ?)  [["book_id", 8], ["created_at", Sun, 18 Nov 2012 12:04:31 UTC +00:00], ["first_name", nil], ["last_name", "Z"], ["updated_at", Sun, 18 Nov 2012 12:04:31 UTC +00:00]]
   (0.8ms)  commit transaction
   (0.1ms)  begin transaction
  SQL (0.4ms)  INSERT INTO "authors" ("book_id", "created_at", "first_name", "last_name", "updated_at") VALUES (?, ?, ?, ?, ?)  [["book_id", 8], ["created_at", Sun, 18 Nov 2012 12:04:31 UTC +00:00], ["first_name", nil], ["last_name", "A"], ["updated_at", Sun, 18 Nov 2012 12:04:31 UTC +00:00]]
   (0.8ms)  commit transaction
=&gt; [#&lt;Author id: 12, book_id: 8, first_name: nil, last_name: "Z", created_at: "2012-11-18 12:04:31", updated_at: "2012-11-18 12:04:31"&gt;, #&lt;Author id: 13, book_id: 8, first_name: nil, last_name: "A", created_at: "2012-11-18 12:04:31", updated_at: "2012-11-18 12:04:31"&gt;]
&gt;&gt; Book.last.authors
  Book Load (0.3ms)  SELECT "books".* FROM "books" ORDER BY "books"."id" DESC LIMIT 1
  Author Load (0.2ms)  SELECT "authors".* FROM "authors" WHERE "authors"."book_id" = 8 ORDER BY last_name
=&gt; [#&lt;Author id: 13, book_id: 8, first_name: nil, last_name: "A", created_at: "2012-11-18 12:04:31", updated_at: "2012-11-18 12:04:31"&gt;, #&lt;Author id: 12, book_id: 8, first_name: nil, last_name: "Z", created_at: "2012-11-18 12:04:31", updated_at: "2012-11-18 12:04:31"&gt;]
&gt;&gt; exit
$ </screen></para>

        <para>And if we want to sort in descending order for a
        change:<programlisting>has_many :authors, :order =&gt; 'title DESC'</programlisting></para>
      </section>

      <section>
        <title>dependent: :destroy</title>

        <para>If a book is removed, then it usually makes sense to also
        automatically remove all authors dependent on this book. This can be
        done via <code>:dependent =&gt; :destroy</code> in the
        <filename>app/models/book.rb</filename>:<programlisting>class Book &lt; ActiveRecord::Base
  has_many :authors, dependent: :destroy
end</programlisting></para>

        <para>In the following example, we destroy the first book in the
        database table. All authors of this book are also automatically
        destroyed:<screen>$ rails console
Loading development environment (Rails 4.0.0)
&gt;&gt; Book.first
  Book Load (0.1ms)  SELECT "books".* FROM "books" LIMIT 1
=&gt; #&lt;Book id: 1, title: "Homo faber", created_at: "2012-11-18 11:46:29", updated_at: "2012-11-18 11:46:29"&gt;
&gt;&gt; Book.first.authors
  Book Load (0.3ms)  SELECT "books".* FROM "books" LIMIT 1
  Author Load (0.1ms)  SELECT "authors".* FROM "authors" WHERE "authors"."book_id" = 1
=&gt; [#&lt;Author id: 1, book_id: 1, first_name: "Max", last_name: "Frisch", created_at: "2012-11-18 11:46:29", updated_at: "2012-11-18 11:46:29"&gt;]
&gt;&gt; Book.first.destroy
  Book Load (0.3ms)  SELECT "books".* FROM "books" LIMIT 1
   (0.1ms)  begin transaction
  Author Load (0.2ms)  SELECT "authors".* FROM "authors" WHERE "authors"."book_id" = 1
  SQL (4.8ms)  DELETE FROM "authors" WHERE "authors"."id" = ?  [["id", 1]]
  SQL (0.1ms)  DELETE FROM "books" WHERE "books"."id" = ?  [["id", 1]]
   (3.0ms)  commit transaction
=&gt; #&lt;Book id: 1, title: "Homo faber", created_at: "2012-11-18 11:46:29", updated_at: "2012-11-18 11:46:29"&gt;
&gt;&gt; Author.exists?(1)
  Author Exists (0.2ms)  SELECT 1 AS one FROM "authors" WHERE "authors"."id" = 1 LIMIT 1
=&gt; false
&gt;&gt; exit
$</screen></para>

        <important>
          <indexterm>
            <primary>ActiveRecord</primary>

            <secondary>methods</secondary>

            <tertiary>destroy()</tertiary>
          </indexterm>

          <indexterm>
            <primary>ActiveRecord</primary>

            <secondary>methods</secondary>

            <tertiary>delete()</tertiary>
          </indexterm>

          <para>Please always remember the difference between the methods
          <methodname>destroy</methodname> (see <xref
          linkend="activerecord_destroy"/>) and
          <methodname>delete</methodname> (see <xref
          linkend="activerecord_delete"/>). This association only works with
          the method <methodname>destroy</methodname>.</para>
        </important>
      </section>

      <section>
        <title>has_many .., through: ..</title>

        <para>Here I need to elaborate a bit: you will probably have noticed
        that in our book-author example we have sometimes been entering
        authors several times in the <varname>authors</varname> table.
        Normally, you would of course not do this. It would be better to enter
        each author only once in the authors table and take care of the
        association with the books via an intermediary table. For this
        purpose, there is <code>has_many <replaceable>â€¦</replaceable>,
        through: =&gt; <replaceable>â€¦</replaceable></code>.</para>

        <para>This kind of association is called Many-to-Many (n:n) and we'll
        discuss it in detail in <xref linkend="ar-many_to_many"/>.</para>
      </section>
    </section>
  </section>
</section>
