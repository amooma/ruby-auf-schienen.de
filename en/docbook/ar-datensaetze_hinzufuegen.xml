<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xml:id="activerecord_datensaetze_hinzufuegen"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title xml:id="activerecord_datensaetze_hinzufuegen.title">Adding
  Records</title>

  <para>Actually, I would like to show you first how to view records, but
  there we have another chicken and egg problem. So first, here is how you can
  create a new record with <classname>ActiveRecord</classname>.</para>

  <section xml:id="activerecord_create">
    <title xml:id="activerecord_create.title">create</title>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>methods</secondary>

      <tertiary>create()</tertiary>
    </indexterm>

    <para>The most frequently used method for creating a new record is
    <methodname>create</methodname>. Let's try creating a country in the
    console with the command <command>Country.create(name: 'Germany',
    population: 81831000)</command><screen>$ rails console
Loading development environment (Rails 4.0.0)
&gt;&gt; Country.create(name: 'Germany', population: 81831000)
   (0.1ms)  begin transaction
  SQL (5.8ms)  INSERT INTO "countries" ("created_at", "name", "population", "updated_at") VALUES (?, ?, ?, ?)  [["created_at", Mon, 15 Jul 2013 17:58:19 UTC +00:00], ["name", "Germany"], ["population", 81831000], ["updated_at", Mon, 15 Jul 2013 17:58:19 UTC +00:00]]
   (1.0ms)  commit transaction
=&gt; #&lt;Country id: 1, name: "Germany", population: 81831000, created_at: "2013-07-15 17:58:19", updated_at: "2013-07-15 17:58:19"&gt;
&gt;&gt; exit
$</screen></para>

    <para>ActiveRecord saves the new record and outputs the executed SQL
    command in the development environment. But to make absolutely sure it
    works, let's have a quick look with the command line client
    <literal>sqlite3</literal>:</para>

    <para><screen>$ sqlite3 db/development.sqlite3 
SQLite version 3.7.12 2012-04-03 19:43:07
Enter ".help" for instructions
Enter SQL statements terminated with a ";"
sqlite&gt; SELECT * FROM countries;
1|Germany|81831000|2013-07-15 17:58:19.600948|2013-07-15 17:58:19.600948
sqlite&gt; .exit
$</screen></para>

    <section>
      <title>Syntax</title>

      <para>The method <methodname>create</methodname> can handle a number of
      different syntax constructs. If you want to create a single record, you
      can do this with or without {}-brackets within the the
      ()-brackets:<itemizedlist>
          <listitem>
            <para><code>Country.create(name: 'Germany', population:
            81831000)</code></para>
          </listitem>

          <listitem>
            <para><code>Country.create({name: 'Germany', population:
            81831000})</code></para>
          </listitem>
        </itemizedlist></para>

      <para>Similarly, you can describe the attributes
      differently:<itemizedlist>
          <listitem>
            <para><code>Country.create(:name =&gt; 'Germany', :population
            =&gt; 81831000)</code></para>
          </listitem>

          <listitem>
            <para><code>Country.create('name' =&gt; 'Germany', 'population'
            =&gt; 81831000)</code></para>
          </listitem>

          <listitem>
            <para><code>Country.create( name: 'Germany', population: 81831000
            )</code></para>
          </listitem>
        </itemizedlist></para>

      <para>You can also pass an array of hashes to
      <methodname>create</methodname> and use this approach to create several
      records at once:<programlisting>Country.create([{name: 'Germany'}, {name: 'France'}])</programlisting></para>
    </section>
  </section>

  <section xml:id="activerecord_new">
    <title xml:id="activerecord_new.title">new</title>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>methods</secondary>

      <tertiary>new()</tertiary>
    </indexterm>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>methods</secondary>

      <tertiary>save()</tertiary>
    </indexterm>

    <para>In addition to <methodname>create</methodname> there is also
    <methodname>new</methodname>. But you have to use
    <methodname>save</methodname> to save an object created with
    <methodname>new</methodname> (which has both advantages and
    disadvantages):<screen>$ rails console
Loading development environment (Rails 4.0.0)
&gt;&gt; france = Country.new
=&gt; #&lt;Country id: nil, name: nil, population: nil, created_at: nil, updated_at: nil&gt;
&gt;&gt; france.name = 'France'
=&gt; "France"
&gt;&gt; france.population = 65447374
=&gt; 65447374
&gt;&gt; france.save
   (0.2ms)  begin transaction
  SQL (2.3ms)  INSERT INTO "countries" ("created_at", "name", "population", "updated_at") VALUES (?, ?, ?, ?)  [["created_at", Mon, 15 Jul 2013 18:07:03 UTC +00:00], ["name", "France"], ["population", 65447374], ["updated_at", Mon, 15 Jul 2013 18:07:03 UTC +00:00]]
   (3.0ms)  commit transaction
=&gt; true
&gt;&gt; france
=&gt; #&lt;Country id: 2, name: "France", population: 65447374, created_at: "2013-07-15 18:07:03", updated_at: "2013-07-15 18:07:03"&gt;
&gt;&gt; </screen></para>

    <para>You can also pass parameters for the new record directly to the
    method <methodname>new</methodname>, just as with
    <methodname>create</methodname>:<screen>&gt;&gt; belgium = Country.new(name: 'Belgium', population: 10839905)
=&gt; #&lt;Country id: nil, name: "Belgium", population: 10839905, created_at: nil, updated_at: nil&gt;
&gt;&gt; belgium.save
   (0.2ms)  begin transaction
  SQL (1.3ms)  INSERT INTO "countries" ("created_at", "name", "population", "updated_at") VALUES (?, ?, ?, ?)  [["created_at", Mon, 15 Jul 2013 18:08:07 UTC +00:00], ["name", "Belgium"], ["population", 10839905], ["updated_at", Mon, 15 Jul 2013 18:08:07 UTC +00:00]]
   (2.1ms)  commit transaction
=&gt; true
&gt;&gt; exit
$</screen></para>
  </section>

  <section xml:id="activerecord_new_record">
    <title xml:id="activerecord_new_record.title">new_record?</title>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>methods</secondary>

      <tertiary>new_record?()</tertiary>
    </indexterm>

    <para>With the method <methodname>new_record?</methodname> you can find
    out if a record has already been saved or not. If a new object has been
    created with <methodname>new</methodname> and not yet been saved, then the
    result of <methodname>new_record?</methodname> is <literal>true</literal>.
    After a <methodname>save</methodname> it is
    <literal>false</literal>.</para>

    <para>Example:<screen>$ rails console
Loading development environment (Rails 4.0.0)
&gt;&gt; netherlands = Country.new(name: 'Netherlands')
=&gt; #&lt;Country id: nil, name: "Netherlands", population: nil, created_at: nil, updated_at: nil&gt;
&gt;&gt; netherlands.new_record?
=&gt; true
&gt;&gt; netherlands.save
   (0.2ms)  begin transaction
  SQL (2.3ms)  INSERT INTO "countries" ("created_at", "name", "updated_at") VALUES (?, ?, ?)  [["created_at", Mon, 15 Jul 2013 18:08:52 UTC +00:00], ["name", "Netherlands"], ["updated_at", Mon, 15 Jul 2013 18:08:52 UTC +00:00]]
   (3.1ms)  commit transaction
=&gt; true
&gt;&gt; netherlands.new_record?
=&gt; false
&gt;&gt; exit
$</screen><tip>
        <para>For already existing records, you can also check for changes
        with the method <methodname>changed?</methodname> (see <xref
        linkend="activerecord_changed"/>).</para>
      </tip></para>
  </section>
</section>
