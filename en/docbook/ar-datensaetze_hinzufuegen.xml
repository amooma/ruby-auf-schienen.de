<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xml:id="activerecord_datensaetze_hinzufuegen"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title xml:id="activerecord_datensaetze_hinzufuegen.title">Adding
  Records</title>

  <para>Actually, I would like to show you first how to view records, but
  there we have another chicken and egg problem. So first, here is how you can
  create a new record with <classname>ActiveRecord</classname>.</para>

  <section xml:id="activerecord_create">
    <title xml:id="activerecord_create.title">create</title>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>methods</secondary>

      <tertiary>create()</tertiary>
    </indexterm>

    <para>The most frequently used method for creating a new record is
    <methodname>create</methodname>. As usual, there is a separate help page
    on this topic available in the system:<screen>MacBook:europe xyz$ <command>ri -T ActiveRecord::Persistence::ClassMethods#create</command>
ActiveRecord::Persistence::ClassMethods#create

(from gem activerecord-3.2.8)
------------------------------------------------------------------------------
  create(attributes = nil, options = {}, &amp;block)

------------------------------------------------------------------------------

Creates an object (or multiple objects) and saves it to the database, if
validations pass. The resulting object is returned whether the object was
saved successfully to the database or not.

The attributes parameter can be either be a Hash or an Array of Hashes.
These Hashes describe the attributes on the objects that are to be created.

create respects mass-assignment security and accepts either :as
or :without_protection options in the options parameter.

Examples
  # Create a single new object
  User.create(:first_name =&gt; 'Jamie')

  # Create a single new object using the :admin mass-assignment security role
  User.create({ :first_name =&gt; 'Jamie', :is_admin =&gt; true }, :as =&gt; :admin)

  # Create a single new object bypassing mass-assignment security
  User.create({ :first_name =&gt; 'Jamie', :is_admin =&gt; true }, :without_protection =&gt; true)

  # Create an Array of new objects
  User.create([{ :first_name =&gt; 'Jamie' }, { :first_name =&gt; 'Jeremy' }])

  # Create a single object and pass it into a block to set other attributes.
  User.create(:first_name =&gt; 'Jamie') do |u|
    u.is_admin = false
  end

  # Creating an Array of new objects using a block, where the block is executed for each object:
  User.create([{ :first_name =&gt; 'Jamie' }, { :first_name =&gt; 'Jeremy' }]) do |u|
    u.is_admin = false
  end



MacBook:europe xyz$</screen></para>

    <para>Wonderful, it even gives you examples! What more could we want?
    Let's try creating a country in the <foreignphrase
    xml:lang="en">console</foreignphrase> using this method:<screen>MacBook:europe xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.3)
1.9.3p194 :001 &gt; <command>Country</command>
 =&gt; Country(id: integer, name: string, population: integer, created_at: datetime, updated_at: datetime) 
1.9.3p194 :002 &gt; <command>Country.create(:name =&gt; 'Germany', :population =&gt; 81831000)</command> 
   (0.1ms)  begin transaction
  SQL (39.9ms)  INSERT INTO "countries" ("created_at", "name", "population", "updated_at") VALUES (?, ?, ?, ?)  [["created_at", Thu, 26 Apr 2012 10:26:38 UTC +00:00], ["name", "Deutschland"], ["population", 81831000], ["updated_at", Thu, 26 Apr 2012 10:26:38 UTC +00:00]]
   (1.5ms)  commit transaction
 =&gt; #&lt;Country id: 1, name: "Germany", population: 81831000, created_at: "2012-04-26 10:26:38", updated_at: "2012-04-26 10:26:38"&gt; 
1.9.3p194 :003 &gt; <command>exit</command>
MacBook:europe xyz$</screen></para>

    <para>ActiveRecord saves the new record and outputs the executed SQL
    command in the development environment. But to make absolutely sure it
    works, let's have a quick look with the command line client
    <literal>sqlite3</literal>:</para>

    <para><screen>MacBook:europe xyz$ <command>sqlite3 db/development.sqlite3</command> 
SQLite version 3.7.7 2011-06-25 16:35:41
Enter ".help" for instructions
Enter SQL statements terminated with a ";"
sqlite&gt; <command>SELECT * FROM countries;</command>
1|Germany|81831000|2012-04-26 10:26:38.533290|2012-04-26 10:26:38.533290
sqlite&gt; <command>.exit</command>
MacBook:europe xyz$</screen></para>

    <section>
      <title>Syntax</title>

      <para>The method <methodname>create</methodname> can handle a number of
      different syntax constructs. If you want to create a single record, you
      can do this with or without {}-brackets within the the
      ()-brackets:<itemizedlist>
          <listitem>
            <para><code>Country.create(:name =&gt; 'Germany', :population
            =&gt; 81831000)</code></para>
          </listitem>

          <listitem>
            <para><code>Country.create( {:name =&gt; 'Germany', :population
            =&gt; 81831000} )</code></para>
          </listitem>
        </itemizedlist></para>

      <para>Similarly, you can describe the attributes
      differently:<itemizedlist>
          <listitem>
            <para><code>Country.create(:name =&gt; 'Germany', :population
            =&gt; 81831000)</code></para>
          </listitem>

          <listitem>
            <para><code>Country.create('name' =&gt; 'Germany', 'population'
            =&gt; 81831000)</code></para>
          </listitem>

          <listitem>
            <para><code>Country.create( name: 'Germany', population: 81831000
            )</code></para>
          </listitem>
        </itemizedlist></para>

      <para>You can also pass an array of hashes to
      <methodname>create</methodname> and use this approach to create several
      records at once:<programlisting>Country.create( [ {:name =&gt; 'Germany', :population =&gt; 81831000}, {"name"=&gt;"France", "population"=&gt;65447374} ] )</programlisting></para>
    </section>
  </section>

  <section xml:id="activerecord_new">
    <title xml:id="activerecord_new.title">new</title>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>methods</secondary>

      <tertiary>new()</tertiary>
    </indexterm>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>methods</secondary>

      <tertiary>save()</tertiary>
    </indexterm>

    <para>In addition to <methodname>create</methodname> there is also
    <methodname>new</methodname>. But you have to use
    <methodname>save</methodname> to save an object created with
    <methodname>new</methodname> (which has both advantages and
    disadvantages):<screen>MacBook:europe xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.3)
1.9.3p194 :001 &gt; <command>france = Country.new</command>
 =&gt; #&lt;Country id: nil, name: nil, population: nil, created_at: nil, updated_at: nil&gt; 
1.9.3p194 :002 &gt; <command>france.name = 'France'</command>
 =&gt; "France" 
1.9.3p194 :003 &gt; <command>france.population = 65447374</command>
 =&gt; 65447374 
1.9.3p194 :004 &gt; <command>france.save</command>
   (0.1ms)  begin transaction
  SQL (5.6ms)  INSERT INTO "countries" ("created_at", "name", "population", "updated_at") VALUES (?, ?, ?, ?)  [["created_at", Thu, 26 Apr 2012 10:41:54 UTC +00:00], ["name", "France"], ["population", 65447374], ["updated_at", Thu, 26 Apr 2012 10:41:54 UTC +00:00]]
   (4.5ms)  commit transaction
 =&gt; true 
1.9.3p194 :005 &gt; <command>france</command>
 =&gt; #&lt;Country id: 2, name: "France", population: 65447374, created_at: "2012-04-26 10:41:54", updated_at: "2012-04-26 10:41:54"&gt; 
1.9.3p194 :006 &gt; <command>exit</command>
MacBook:europe xyz$</screen></para>

    <para>You can also pass parameters for the new record directly to the
    method <methodname>new</methodname>, just as with
    <methodname>create</methodname>:<screen>MacBook:europe xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.3)
1.9.3p194 :001 &gt; <command>belgium = Country.new(:name =&gt; 'Belgium', :population =&gt; 10839905)</command>
 =&gt; #&lt;Country id: nil, name: "Belgium", population: 10839905, created_at: nil, updated_at: nil&gt; 
1.9.3p194 :002 &gt; <command>belgium.save</command>
   (0.2ms)  begin transaction
  SQL (34.8ms)  INSERT INTO "countries" ("created_at", "name", "population", "updated_at") VALUES (?, ?, ?, ?)  [["created_at", Thu, 26 Apr 2012 10:44:49 UTC +00:00], ["name", "Belgium"], ["population", 10839905], ["updated_at", Thu, 26 Apr 2012 10:44:49 UTC +00:00]]
   (2.5ms)  commit transaction
 =&gt; true 
1.9.3p194 :003 &gt; <command>exit</command>
MacBook:europe xyz$ </screen></para>
  </section>

  <section xml:id="activerecord_new_record">
    <title xml:id="activerecord_new_record.title">new_record?</title>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>methods</secondary>

      <tertiary>new_record?()</tertiary>
    </indexterm>

    <para>With the method <methodname>new_record?</methodname> you can find
    out if a record has already been saved or not. If a new object has been
    created with <methodname>new</methodname> and not yet been saved, then the
    result of <methodname>new_record?</methodname> is <literal>true</literal>.
    After a <methodname>save</methodname> it is
    <literal>false</literal>.</para>

    <para>Example:<screen>MacBook:europe xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.3)
1.9.3p194 :001 &gt; <command>netherlands = Country.new(:name =&gt; 'Netherlands', :population =&gt; 16680000)</command>
 =&gt; #&lt;Country id: nil, name: "Netherlands", population: 16680000, created_at: nil, updated_at: nil&gt; 
1.9.3p194 :002 &gt; <command>netherlands.new_record?</command>
 =&gt; true 
1.9.3p194 :003 &gt; <command>netherlands.save</command>
   (0.2ms)  begin transaction
  SQL (34.9ms)  INSERT INTO "countries" ("created_at", "name", "population", "updated_at") VALUES (?, ?, ?, ?)  [["created_at", Thu, 26 Apr 2012 10:47:23 UTC +00:00], ["name", "Netherlands"], ["population", 16680000], ["updated_at", Thu, 26 Apr 2012 10:47:23 UTC +00:00]]
   (3.8ms)  commit transaction
 =&gt; true 
1.9.3p194 :004 &gt; <command>netherlands.new_record?</command>
 =&gt; false 
1.9.3p194 :005 &gt; <command>exit</command>
MacBook:europe xyz$</screen><tip>
        <para>For already existing records, you can also check for changes
        with the method <methodname>changed?</methodname> (see <xref
        linkend="activerecord_changed"/>).</para>
      </tip></para>
  </section>
</section>
