<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="rails_production_webserver"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title xml:id="rails_production_webserver.title">Web Server in Production
  Mode</title>

  <indexterm>
    <primary>web server</primary>

    <secondary>production</secondary>
  </indexterm>

  <indexterm>
    <primary>Nginx</primary>
  </indexterm>

  <indexterm>
    <primary>Unicorn</primary>
  </indexterm>

  <section xml:id="production_webserver_einleitung">
    <title xml:id="production_webserver_einleitung.title">Introduction</title>

    <para>Until now we were working with the development system. Let's have
    another close look at the output of that development system:<screen>$ rails server
=&gt; Booting WEBrick
=&gt; Rails 4.0.0 application starting in development on http://0.0.0.0:3000
=&gt; Run `rails server -h` for more startup options
=&gt; Ctrl-C to shutdown server
[2013-07-18 10:20:30] INFO  WEBrick 1.3.1
[2013-07-18 10:20:30] INFO  ruby 2.0.0 (2013-06-27) [x86_64-darwin12.4.0]
[2013-07-18 10:20:30] INFO  WEBrick::HTTPServer#start: pid=43853 port=3000</screen></para>

    <para>The second line tells us that we are in "development" mode and that
    the application can be accessed at the URL <uri
    xlink:href="http://0.0.0.0:3000">http://0.0.0.0:3000</uri>. The web server
    used here is WEBrick (see <uri
    xlink:href="http://de.wikipedia.org/wiki/WEBrick">http://en.wikipedia.org/wiki/Webrick</uri>).
    WEBrick is a very simple HTTP web server and component of the Ruby
    standard library. But WEBrick is only suitable for development.</para>

    <para>For a production system, you would normally use a standard web
    server such as Apache, lighttpd or Nginx, to serve as reverse proxy and
    load balancer for the Rails system. The Rails system is then not run by
    the slow WEBrick, but by more powerful solutions such as Unicorn (<uri
    xlink:href="http://unicorn.bogomips.org/">http://unicorn.bogomips.org/</uri>),
    Mongrel (<uri
    xlink:href="http://de.wikipedia.org/wiki/Mongrel">http://en.wikipedia.org/wiki/Mongrel_(web_server)</uri>),
    Thin (<uri
    xlink:href="http://code.macournoyer.com/thin/">http://code.macournoyer.com/thin/</uri>)
    or Puma (<uri xlink:href="http://puma.io/">http://puma.io/</uri>).</para>

    <para>This chapter walks you through the setup process of a production
    server which runs Nginx as a reverse proxy webserver and unicorn as the
    Ruby on Rails webserver behind the Nginx. We start with a fresh Debian
    system and install all the software we need. The Rails project will be run
    with Ruby 2.0.0 which gets installed with RVM and runs for the user
    deployer. Feel free to customize the directorystructure once everything is
    up and running.</para>

    <para>The example Rails application we use is called
    <code>blog</code>.</para>

    <warning>
      <para>If you have never set up a Nginx or Apache webserver by yourself
      before you will get lost somewhere in this chapter. You probably get it
      up and running but without understanding how things work. </para>
    </warning>
  </section>

  <section xml:id="production_webserver_debian6">
    <title xml:id="production_webserver_debian6.title">Debian 7.1</title>

    <para>We build our production web server on a minimal Debian 7.1 system.
    To carry out this installation, you need to have root rights on the web
    server!</para>

    <para>This description assumes that you have a freshly installed Debian
    GNU/Linux 7.1 (<quote>Wheeze</quote>). You will find an ISO image for the
    installation at <uri
    xlink:href="http://www.debian.org">http://www.debian.org</uri>. I
    recommend the approximately 250 MB net installation CD image. For
    instructions on how to install Debian-GNU/Linux, please go to <uri
    xlink:href="http://www.debian.org/distrib/netinst">http://www.debian.org/distrib/netinst</uri>.</para>

    <note>
      <para>VMware or any other virtual PC system is a nice playground to get
      a feeling how this works.</para>
    </note>

    <section xml:id="deployment_grundinstallation_webserver_buildsystem">
      <title
      xml:id="deployment_grundinstallation_webserver_buildsystem.title">Buildsystem</title>

      <para>First, we install a few debian packages we are going to
      need.<screen>root@debian:~# <command>apt-get -y install gawk libgdbm-dev pkg-config libffi-dev build-essential openssl libreadline6 libreadline6-dev curl git-core zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt-dev autoconf libc6-dev ncurses-dev automake libtool bison subversion python</command>
[...]
root@debian:~# </screen></para>
    </section>

    <section xml:id="deployment_grundinstallation_webserver_nodejs">
      <title
      xml:id="deployment_grundinstallation_webserver_nodejs.title">Node.js</title>

      <para>To make the most of the asset pipeline, we install Node.js. Please
      go to the homepage of Node.js (<uri
      xlink:href="http://nodejs.org/">http://nodejs.org/</uri>), search for
      the current stable release and adapt the version numbers in the commands
      listed here accordingly.<screen>root@debian:~# <command>cd /usr/src</command>
root@debian:/usr/src# <command>wget http://nodejs.org/dist/v0.10.13/node-v0.10.13.tar.gz</command>
[...]
root@debian:/usr/src# <command>tar xzf node-v0.10.13.tar.gz</command> 
root@debian:/usr/src# <command>cd node-v0.10.13</command>
root@debian:/usr/src/node-v0.10.13# <command>./configure</command> 
[...]
root@debian:/usr/src/node-v0.10.13# <command>make</command>
[...]
root@debian:/usr/src/node-v0.10.13# <command>make install</command>
[...]
root@debian:/usr/src/node-v0.10.13# <command>cd</command>
[...]
root@debian:~# </screen></para>
    </section>

    <section xml:id="deployment_grundinstallation_webserver_nginx">
      <title
      xml:id="deployment_grundinstallation_webserver_nginx.title">nginx</title>

      <para>Nginx will be our web server to the outside world. <screen>root@debian:~# <command>apt-get -y install nginx</command>
[...]
root@debian:~# </screen></para>
    </section>

    <section xml:id="deployment_grundinstallation_webserver_deployer_anlegen">
      <title
      xml:id="deployment_grundinstallation_webserver_deployer_anlegen.title">User
      Deployer</title>

      <para>Our Rails project is going to run within a Ruby and Rails
      installed via RVM in the user space. So we create a new user with the
      name <code>deployer</code>:<screen>root@debian:~# <command>adduser deployer</command>
Lege Benutzer »deployer« an ...
Lege neue Gruppe »deployer« (1002) an ...
Lege neuen Benutzer »deployer« (1002) mit Gruppe »deployer« an ...
Erstelle Home-Verzeichnis »/home/deployer« ...
Kopiere Dateien aus »/etc/skel« ...
Geben Sie ein neues UNIX-Passwort ein: 
Geben Sie das neue UNIX-Passwort erneut ein: 
passwd: Passwort erfolgreich geändert
Benutzerinformationen für deployer werden geändert.
Geben Sie einen neuen Wert an oder drücken Sie ENTER für den Standardwert
 Vollständiger Name []: Deployer
 Raumnummer []: 
 Telefon geschäftlich []: 
 Telefon privat []: 
 Sonstiges []: 
Sind die Informationen korrekt? [J/n] J
root@debian:~#</screen></para>

      <section xml:id="deployment_grundinstallation_webserver_rails_umgebung_deployer">
        <title
        xml:id="deployment_grundinstallation_webserver_rails_umgebung_deployer.title">Setting
        up Rails Environment for User Deployer</title>

        <para>With <command>su - deployer</command> we'll become the user
        deployer:<screen>root@debian:~# <command>su - deployer</command>
deployer@debian:~$ </screen></para>

        <para>As user <code>deployer</code>, please carry out the steps for
        installing Ruby 2.0.0 and Rails 4.0 via RVM.<screen>deployer@debian:~$ <command>curl -L https://get.rvm.io | bash -s stable --rails</command>
[...]
deployer@debian:~$ <command>source /home/deployer/.rvm/scripts/rvm</command>
[...]
deployer@debian:~$</screen></para>

        <para>To be able to start Unicorn with the RVM environment from within
        an Init.d script, we now need to generate a corresponding
        wrapper:<screen>deployer@debian:~$ <command>gem install unicorn</command>
[...]
deployer@debian:~$ <command>rvm wrapper 2.0.0 bootup unicorn</command>
deployer@debian:~$ <command>exit</command>
root@debian:~$</screen></para>
      </section>
    </section>

    <section xml:id="deployment_grundinstallation_webserver_datenbank">
      <title
      xml:id="deployment_grundinstallation_webserver_datenbank.title">Database</title>

      <para>Usually, you want to use a "big" database in a production system,
      such as PostgreSQL or MySQL. So here is how to install a MySQL database
      on this system and what you need to adapt in the Rails project.</para>

      <section xml:id="deployment_grundinstallation_webserver_mysql_installation">
        <title
        xml:id="deployment_grundinstallation_webserver_mysql_installation.title">MySQL
        Installation</title>

        <para>Next, we install the database MySQL. You will be asked for a
        database password. Please remember this password. Later,
        <code>root</code> can use it to log in to the database.<screen>root@debian:~# <command>apt-get -y install mysql-server libmysql-ruby libmysqlclient-dev</command>
[...]
root@debian:~# </screen></para>
      </section>

      <section xml:id="deployment_grundinstallation_webserver_create_database">
        <title
        xml:id="deployment_grundinstallation_webserver_create_database.title">Creating
        Database with Rights</title>

        <para>In the MySQL database, we need to create the database
        <code>blog</code> with access rights for the user
        <code>deployer</code>:<screen>deployer@debian:~$ <command>mysql -u root -p</command>
Enter password: 
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 40
Server version: 5.1.63-0+squeeze1 (Debian)

Copyright (c) 2000, 2011, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql&gt; <command>CREATE DATABASE blog;</command>
Query OK, 1 row affected (0.00 sec)

mysql&gt; <command>GRANT USAGE ON *.* TO deployer@localhost IDENTIFIED BY 'IhrLieblingsPasswort';</command>
Query OK, 0 rows affected (0.00 sec)

mysql&gt; <command>GRANT ALL PRIVILEGES ON blog.* TO deployer@localhost;</command>
Query OK, 0 rows affected (0.00 sec)

mysql&gt; <command>exit</command>;
Bye
deployer@debian:~$</screen></para>

        <warning>
          <para>Please DO CHANGE THE PASSWORD! Otherwise it will be the same
          password for everybody who read this book.</para>
        </warning>
      </section>
    </section>

    <section xml:id="deployment_grundinstallation_webserver_memcached">
      <title
      xml:id="deployment_grundinstallation_webserver_memcached.title">Memcache</title>

      <para>If you are working with a cache server (highly recommended), you
      of course have to install the appropriate software. For memcached (<uri
      xlink:href="http://memcached.org/">http://memcached.org/</uri>) you
      would enter this:<screen>root@debian:~# <command>apt-get -y install memcached</command>
[...]
root@debian:~#</screen></para>
    </section>
  </section>

  <section xml:id="webserver_ohne_deployment_neues_rails_projekt">
    <title
    xml:id="webserver_ohne_deployment_neues_rails_projekt.title">Setting Up a
    New Rails Project</title>

    <para>To keep this guide as simple as possible, we create a simple blog in
    the homedirectory of the user <code>deployer</code>.<screen>root@debian:~# <command>su - deployer</command>
deployer@debian:~$ <command>rails new blog</command>
[...]
deployer@debian:~$ <command>cd blog</command>
deployer@debian:~/blog$ <command>rails generate scaffold post subject content:text</command>
[...]
deployer@debian:~/blog$</screen></para>

    <section>
      <title>Adapting Gemfile</title>

      <para>Please add the following content into the file
      <filename>Gemfile</filename>:<programlisting>gem 'mysql', group: :production
gem 'unicorn', group: :production</programlisting></para>

      <para>Then install all gems with <command>bundle
      install</command>:<screen>deployer@debian:~/blog$ <command>bundle install</command>
[...]
deployer@debian:~/blog$</screen></para>

      <para>To get a root URL we'll change to
      <filename>config/routes.rb</filename> file to this:<programlisting>Blog::Application.routes.draw do
  resources :posts
  root 'posts#index'
end</programlisting></para>
    </section>

    <section xml:id="production_webserver_database_yml">
      <title xml:id="production_webserver_database_yml.title">Production
      Database Configuration</title>

      <para>In the file<filename> config/database.yml</filename> you need to
      enter the database configuration for the MySQL database for the
      production system. Please make sure you enter the correct
      password.<programlisting># SQLite version 3.x
#   gem install sqlite3
#
#   Ensure the SQLite 3 gem is defined in your Gemfile
#   gem 'sqlite3'
development:
  adapter: sqlite3
  database: db/development.sqlite3
  pool: 5
  timeout: 5000

# Warning: The database defined as "test" will be erased and
# re-generated from your development database when you run "rake".
# Do not set this db to the same as development or production.
test:
  adapter: sqlite3
  database: db/test.sqlite3
  pool: 5
  timeout: 5000

<emphasis>production:
  adapter: mysql
  encoding: utf8
  database: blog
  username: deployer
  password: YourFavoritePassword</emphasis></programlisting></para>

      <warning>
        <para>Again: Please change the password!</para>
      </warning>
    </section>

    <section xml:id="production_webserver_unicorn_gem_installieren">
      <title
      xml:id="production_webserver_unicorn_gem_installieren.title">Unicorn
      Configuration</title>

      <para>For the Unicorn configuration, we use the file <uri
      xlink:href="https://raw.github.com/defunkt/unicorn/master/examples/unicorn.conf.rb">https://raw.github.com/defunkt/unicorn/master/examples/unicorn.conf.rb</uri>
      as basis and save it as follows in the file
      <filename>config/unicorn.rb</filename> after we adapt it to our
      server:<programlisting># Sample verbose configuration file for Unicorn (not Rack)
#
# This configuration file documents many features of Unicorn
# that may not be needed for some applications. See
# http://unicorn.bogomips.org/examples/unicorn.conf.minimal.rb
# for a much simpler configuration file.
#
# See http://unicorn.bogomips.org/Unicorn/Configurator.html for complete
# documentation.

# Use at least one worker per core if you're on a dedicated server,
# more will usually help for _short_ waits on databases/caches.
worker_processes 4

# Since Unicorn is never exposed to outside clients, it does not need to
# run on the standard HTTP port (80), there is no reason to start Unicorn
# as root unless it's from system init scripts.
# If running the master process as root and the workers as an unprivileged
# user, do this to switch euid/egid in the workers (also chowns logs):
user "deployer", "www-data"

# Help ensure your application will always spawn in the symlinked
# "current" directory that Capistrano sets up.
APP_PATH = "/home/deployer/blog"
working_directory APP_PATH # available in 0.94.0+

# listen on both a Unix domain socket and a TCP port,
# we use a shorter backlog for quicker failover when busy
listen "/tmp/.unicorn_blog.sock", :backlog =&gt; 64
listen 8080, :tcp_nopush =&gt; true

# nuke workers after 30 seconds instead of 60 seconds (the default)
timeout 30

# feel free to point this anywhere accessible on the filesystem
pid "/var/run/unicorn_blog.pid"

# By default, the Unicorn logger will write to stderr.
# Additionally, ome applications/frameworks log to stderr or stdout,
# so prevent them from going to /dev/null when daemonized here:
stderr_path APP_PATH + "/log/unicorn_blog.stderr.log"
stdout_path APP_PATH + "/log/unicorn_blog.stdout.log"

# combine Ruby 2.0.0dev or REE with "preload_app true" for memory savings
# http://rubyenterpriseedition.com/faq.html#adapt_apps_for_cow
preload_app true
GC.respond_to?(:copy_on_write_friendly=) and
  GC.copy_on_write_friendly = true

# Enable this flag to have unicorn test client connections by writing the
# beginning of the HTTP headers before calling the application.  This
# prevents calling the application for connections that have disconnected
# while queued.  This is only guaranteed to detect clients on the same
# host unicorn runs on, and unlikely to detect disconnects even on a
# fast LAN.
check_client_connection false

before_fork do |server, worker|
  # the following is highly recomended for Rails + "preload_app true"
  # as there's no need for the master process to hold a connection
  defined?(ActiveRecord::Base) and
    ActiveRecord::Base.connection.disconnect!

  # The following is only recommended for memory/DB-constrained
  # installations.  It is not needed if your system can house
  # twice as many worker_processes as you have configured.
  #
  # # This allows a new master process to incrementally
  # # phase out the old master process with SIGTTOU to avoid a
  # # thundering herd (especially in the "preload_app false" case)
  # # when doing a transparent upgrade.  The last worker spawned
  # # will then kill off the old master process with a SIGQUIT.
  # old_pid = "#{server.config[:pid]}.oldbin"
  # if old_pid != server.pid
  #   begin
  #     sig = (worker.nr + 1) &gt;= server.worker_processes ? :QUIT : :TTOU
  #     Process.kill(sig, File.read(old_pid).to_i)
  #   rescue Errno::ENOENT, Errno::ESRCH
  #   end
  # end
  #
  # Throttle the master from forking too quickly by sleeping.  Due
  # to the implementation of standard Unix signal handlers, this
  # helps (but does not completely) prevent identical, repeated signals
  # from being lost when the receiving process is busy.
  # sleep 1
end

after_fork do |server, worker|
  # per-process listener ports for debugging/admin/migrations
  # addr = "127.0.0.1:#{9293 + worker.nr}"
  # server.listen(addr, :tries =&gt; -1, :delay =&gt; 5, :tcp_nopush =&gt; true)

  # the following is *required* for Rails + "preload_app true",
  defined?(ActiveRecord::Base) and
    ActiveRecord::Base.establish_connection

  # if preload_app is true, then you may also want to check and
  # restart any other shared sockets/descriptors such as Memcached,
  # and Redis.  TokyoCabinet file handles are safe to reuse
  # between any number of forked children (assuming your kernel
  # correctly implements pread()/pwrite() system calls)
end</programlisting></para>
    </section>

    <section>
      <title>rake db:migration</title>

      <para>We still need to create the database:<screen>deployer@debian:~/blog$ <command>rake db:migrate RAILS_ENV=production</command>
[...]
deployer@debian:~/blog$ </screen></para>

      <important>
        <para>Please ensure that the <command>rake db:migrate</command>
        concludes with a <command>RAILS_ENV=production</command>. This is to
        migrate the production database.</para>
      </important>
    </section>

    <section>
      <title>rake assets:precompile</title>

      <para><command>rake assets:precompile</command> ensures that all assets
      in the asset pipeline are made available for the production environment
      (see <xref linkend="asset_pipeline"/>).<screen>deployer@debian:~/blog$ <command>rake assets:precompile</command>
[...]
deployer@debian:~/blog$</screen></para>
    </section>

    <section xml:id="production_webserver_unicorn_init_script">
      <title xml:id="production_webserver_unicorn_init_script.title">Unicorn
      Init Script</title>

      <para>Now you need to continue working as user
      <code>root</code>:<screen>deployer@debian:~$ <command>exit</command>
Abgemeldet
root@debian:~# </screen></para>

      <para>Create the init script
      <filename>/etc/init.d/unicorn_blog</filename> with the following
      content:<programlisting>#!/bin/bash

### BEGIN INIT INFO
# Provides:          unicorn
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Unicorn webserver
# Description:       Unicorn webserver for the blog
### END INIT INFO

UNICORN=/home/deployer/.rvm/bin/bootup_unicorn
UNICORN_ARGS="-D -c /home/deployer/blog/config/unicorn.rb -E production"
KILL=/bin/kill
PID=/var/run/unicorn_blog.pid

sig () {
  test -s "$PID" &amp;&amp; kill -$1 `cat $PID`
}

case "$1" in
        start)
                echo "Starting unicorn..."
                $UNICORN $UNICORN_ARGS
                ;;
        stop)
                sig QUIT &amp;&amp; exit 0
                echo &gt;&amp;2 "Not running"
                ;;
        restart)
                $0 stop
                $0 start
                ;;
        status)
                ;;
        *)
                echo "Usage: $0 {start|stop|restart|status}"
                ;;
esac</programlisting></para>

      <para>You still have to activate the init script and start
      Unicorn:<screen>root@debian:~# <command>chmod +x /etc/init.d/unicorn_blog</command> 
root@debian:~# <command>update-rc.d -f unicorn_blog defaults</command>
update-rc.d: using dependency based boot sequencing
root@debian:~# <command>/etc/init.d/unicorn_blog start</command>
root@debian:~# </screen></para>

      <para>Your Rails project is now accessible via the IP address of the web
      server.</para>
    </section>

    <section xml:id="production_webserver_nginx_konfiguration">
      <title xml:id="production_webserver_nginx_konfiguration.title">nginx
      Configuration</title>

      <para>For the Rails project, we add a new configuration file
      <filename>/etc/nginx/sites-available/blog.conf</filename> with the
      following content:<programlisting>upstream unicorn {
  server unix:/tmp/.unicorn_blog.sock fail_timeout=0;
}

server {
  listen 80 default deferred;
  # server_name example.com;
  root /home/deployer/blog/public;

  location / {
    gzip_static on;
  }

  location ^~ /assets/ {
    gzip_static on;
    expires max;
    add_header Cache-Control public;
  }

  try_files $uri/index.html $uri @unicorn;
  location @unicorn {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    proxy_pass http://unicorn;
  }

  error_page 500 502 503 504 /500.html;
  client_max_body_size 4G;
  keepalive_timeout 10;
}</programlisting></para>

      <para>We link this configuration file into the /etc/nginx/sites-enabled
      directory to have it loaded by Nginx. The default file can be deleted.
      After that we restart Nginx and are all set. You can access the Rails
      application through the IP address of this server.<screen>root@debian:~# <command>ln -s /etc/nginx/sites-available/blog /etc/nginx/sites-enabled/</command>
root@debian:~# <command>rm /etc/nginx/sites-enabled/default</command>
root@debian:~# <command>/etc/init.d/nginx restart</command>
Restarting nginx: nginx.
root@debian:~#</screen></para>
    </section>

    <section xml:id="webserver_ohne_deployment_neues_version_des_rails_projekts_einspielen">
      <title
      xml:id="webserver_ohne_deployment_neues_version_des_rails_projekts_einspielen.title">Loading
      Updated Versions of the Rails Project</title>

      <para>If you want to activate Updates to the Rails project, you need to
      copy them into the directory <filename>/home/deployer/blog</filename>
      and log in as user <code>deployer</code> to run <command>rake
      assets:precompile</command> (see <xref
      linkend="asset_pipeline"/>).<screen>deployer@debian:~/blog$ <command>rake assets:precompile</command>
[...]
deployer@debian:~/blog$</screen></para>

      <para>If you bring in new migrations, you of course also need to do a
      <command>rake db:migrate RAILS_ENV=production</command>:<screen>deployer@debian:~/blog$ <command>rake db:migrate RAILS_ENV=production</command>
[...]
deployer@debian:~/blog$ </screen></para>

      <para>Then you need to restart Unicorn as user
      <code>root</code>:<screen>root@debian:~# <command>/etc/init.d/unicorn_blog restart</command>
root@debian:~# </screen></para>
    </section>
  </section>

  <section xml:id="production_webserver_sonstiges">
    <title xml:id="production_webserver_sonstiges.title">Misc</title>

    <section>
      <title>Alternative Setups</title>

      <para>The RVM, unicorn and Nginx way is fast and makes it possible to
      setup different Ruby versions on one server. But many admins prefer an
      easier installation process which is promised by Phusion Passenger. Have
      a look at <uri
      xlink:href="https://www.phusionpassenger.com">https://www.phusionpassenger.com</uri>
      for more information about Passenger. It is a very good and reliable
      solution.</para>
    </section>

    <section xml:id="production_webserver_was_noch_zu_tun_ist">
      <title xml:id="production_webserver_was_noch_zu_tun_ist.title">What Else
      There Is To Do</title>

      <para>Please always consider the following points - every admin has to
      decide these for him- or herself and implement them
      accordingly:<itemizedlist>
          <listitem>
            <para>Automatic and regular backup of database and Rails
            project.</para>
          </listitem>

          <listitem>
            <para>Set up log rotations of log files.</para>
          </listitem>

          <listitem>
            <para>Set up monitoring for system load and hard drive
            space.</para>
          </listitem>

          <listitem>
            <para>Regularly install Debian security updates as soon as they
            become available.</para>
          </listitem>
        </itemizedlist></para>
    </section>

    <section xml:id="production_webserver_404">
      <title xml:id="production_webserver.title">404 and Co.</title>

      <para>Finally, please look into the <filename>public</filename>
      directory in your Rails project and adapt the HTML pages saved there to
      your own requirements. Primarily, this is about the design of the pages.
      In the default setting, these are somewhat sparse and do not have any
      relation to the rest of your website. If you decide to update your web
      page and shut down your Unicorn server to do so, nginx will deliver the
      web page <filename>public/500.html</filename> in the meantime.</para>

      <para>You will find a list of HTTP error codes at <uri
      xlink:href="http://de.selfhtml.org/servercgi/server/httpstatuscodes.htm">http://en.wikipedia.org/wiki/List_of_HTTP_status_codes</uri></para>
    </section>

    <section xml:id="production_webserver_mehrere_server">
      <title xml:id="production_webserver_mehrere_server.title">Multiple Rails
      Servers on One System</title>

      <para>You can runs several Rails servers on one system without any
      problems. You need to set up a separate Unicorn for each Rails server.
      You can then distribute to it from nginx. With nginx you can also define
      on which IP address a Rails server is accessible from the
      outside.</para>
    </section>
  </section>

  <section xml:id="production_webserver_paas">
    <title xml:id="production_webserver_paas.title">Cloud Platform as Service
    Provider</title>

    <para>If you do not have a web server available on the internet or want to
    deploy to a PaaS (Platform as a Service) system right from the start, you
    should have a look at what the various providers have to offer. The two US
    market leaders are currently Heroku (<uri
    xlink:href="http://www.heroku.com/">http://www.heroku.com/</uri>) and
    Engine Yard (<uri
    xlink:href="http://www.engineyard.com/">http://www.engineyard.com/</uri>).</para>

    <para>PaaS as platform usually offers less options than your own server.
    But you have 7x24 support for this platform if anything does not work
    properly.</para>
  </section>
</chapter>
