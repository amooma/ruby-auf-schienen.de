<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Schnelleinstieg</title>

  <section>
    <title>Warum unbedingt Ruby 1.9?</title>

    <para>Alle Bücher und Dokumentationen, die Sie bis jetzt gesehen haben
    funktionierten auch mit Ruby 1.8. Warum also in alles in der Welt machen
    wir jetzt so ein Bohei und nehmen nicht einfach Ruby 1.8 - Was mit etwas
    Glück sogar schon auf Ihrem System installiert ist? So gross ist der
    Unterschied zwischen 1.9 und 1.8 rein mathematisch gesehen ja gar nicht
    (prozentual ist die Zahl 1,9 von 1,8 nur 5% höher)?!</para>

    <para>Hier die Antworten:<itemizedlist>
        <listitem>
          <para>Der Unterscheid zwischen Ruby 1.9 und Ruby 1.8 ist gigantisch.
          Lassen Sie sich durch die reine Versionszahl nicht beirren. Um mal
          das einfachste Argument rauszunehmen: Ruby 1.9 ist viel schneller -
          sprich performanter als Ruby 1.8. Was heißt "viel"? Je nach
          Benchmark zwischen 2 und 4 mal so schnell (in Einzelbereichen sogar
          Faktor 10 und mehr).</para>
        </listitem>

        <listitem>
          <para>Die meisten Autoren sind schlicht un ergreifend zu faul, um
          ihre Doku auf 1.9 upzugraden. Die Neu-Installation ist auch nicht
          immer trivial (aus diesem Grunde setzen wir für den Schnelleinstieg
          auf einen virtuellen PC mit einem frischen Betriebssystem).</para>
        </listitem>

        <listitem>
          <para>Viele Rails Autoren kommen aus dem englischsprachigen Raum und
          da kommt man mit Ruby 1.8 ganz gut zurecht. Für alle anderen
          Sprachen sieht es aber schlechter aus. Erst mit der Version 1.9 gibt
          es eine richtig gute Multi-Encoding-Umgebung. Man muss sogar sagen,
          das Ruby 1.9 so ziemlich jeder anderen Programmiersprache
          diesbezüglich davonrennt.<footnote>
              <para>Der mässige Umgang mit UTF-8 und Co. in Ruby 1.8 ist fast
              schon ironisch. Schließlich ist der Erfinder von Ruby (Yukihiro
              Matsumoto a.k.a. Matz) ein Japaner und da sollte man davon
              ausgehen, das nicht nur ASCII unterstützt wird. Der Grund für
              die späte Implementierung waren allerdings die arrogante Art der
              Entwicklung von UTF-8 bzw. UTF-16. Die entsprechenden Gremien
              sahen sich am Anfang nicht veranlasst mal einen tieferen Blick
              in die asiatische Schriftkultur zu werfen. Deshalb war der erste
              Wurf für europäische Schriften OK, aber für den asiatischen
              Kulturraum ein Witz. Es wurde nachgebessert und entsprechend zog
              auch Ruby nach. Die Multi-Encoding-Unterstützung in Ruby 1.9 ist
              dann auch so gut, das man auf andere Programmiersprachen mit
              Mitleid herabblickt.</para>
            </footnote></para>
        </listitem>
      </itemizedlist></para>
  </section>

  <section xml:id="ruby19-und-rails-installation">
    <title>Installation von Ruby 1.9 und Rails</title>

    <para>Da das Kapitel "Schnelleinstieg" heißt und einen möglichst raschen
    Lernerfolg zum Ziel hat, müssen wir uns auf eine Plattform einigen. Alle
    die für Debian Linux sind, mögen jetzt die Hand heben. OK. Das ist die
    Mehrheit. Die folgende Installationsanleitung setzt entsprechend ein
    frisch installiertes Debian Linux 5.0 (Minimal-Version) voraus. Kein
    frisch installiertes Debian 5.0 zur Hand? Dann bitte in einer virtuellen
    Maschine (z.B. VMware) neu installieren.<note>
        <para>Es wird in dieser Anleitung nicht jeder Schritt und jeder Befehl
        lang und breit erklärt. Ich gehe davon aus, das Sie sich mit der Linux
        Kommandozeile so gut auskennen, das die jeweiligen Befehle
        selbsterklärend sind.</para>
      </note><warning>
        <para>Wer es nicht für nötig hält sich an dieses Kochrezept zu halten
        und lieber ein bereits installiertes Ruby oder ein anderes
        Betriebssystem nimmt: Später nicht rumjammern, wenn was nicht
        funktioniert! Und glauben Sie mir, es wird etwas nicht funktionieren!
        An sonsten würde ich nicht den Aufwand betreiben.</para>

        <para>Wenn Sie später Ruby on Rails verstanden hat, ist immer noch
        Zeit das alles auf dem eigenen Lieblingsbetriebssystem zum Laufen zu
        bringen.</para>
      </warning></para>

    <para>Als erstes logen wir uns als Root ein bringen wir alles auf den
    neuesten Stand der Dinge.<screen>debian:~# <command>aptitude update &amp;&amp; aptitude safe-upgrade</command>
Treffer http://volatile.debian.org lenny/volatile Release.gpg
Ign http://volatile.debian.org lenny/volatile/main Translation-de               
Treffer http://security.debian.org lenny/updates Release.gpg                    
Ign http://security.debian.org lenny/updates/main Translation-de
Treffer http://volatile.debian.org lenny/volatile Release  
Treffer http://security.debian.org lenny/updates Release   
Ign http://volatile.debian.org lenny/volatile/main Packages/DiffIndex           
Ign http://security.debian.org lenny/updates/main Packages/DiffIndex
Ign http://volatile.debian.org lenny/volatile/main Sources/DiffIndex
Ign http://security.debian.org lenny/updates/main Sources/DiffIndex
Treffer http://volatile.debian.org lenny/volatile/main Packages
Treffer http://security.debian.org lenny/updates/main Packages
Treffer http://volatile.debian.org lenny/volatile/main Sources
Treffer http://security.debian.org lenny/updates/main Sources
Treffer http://ftp.de.debian.org lenny Release.gpg         
Hole:1 http://ftp.de.debian.org lenny/main Translation-de [1820kB]
Treffer http://ftp.de.debian.org lenny Release                                  
Ign http://ftp.de.debian.org lenny/main Packages/DiffIndex                      
Ign http://ftp.de.debian.org lenny/main Sources/DiffIndex                       
Treffer http://ftp.de.debian.org lenny/main Packages                            
Treffer http://ftp.de.debian.org lenny/main Sources                             
1820kB wurden in 14s heruntergeladen (127kB/s)                                  
Paketlisten werden gelesen... Fertig

Paketlisten werden gelesen... Fertig
AbhÃ¤ngigkeitsbaum wird aufgebaut       
Lese Status-Informationen ein... Fertig
Lese erweiterte Statusinformationen      
Initialisiere Paketstatus... Fertig
Lese Task-Beschreibungen... Fertig 
Es werden keine Pakete installiert, aktualisiert oder entfernt.
0 Pakete aktualisiert, 0 zusÃ¤tzlich installiert, 0 werden entfernt und 0 nicht aktualisiert.
Muss 0B an Archiven herunterladen. Nach dem Entpacken werden 0B zusÃ¤tzlich belegt sein.
Paketlisten werden gelesen... Fertig
AbhÃ¤ngigkeitsbaum wird aufgebaut       
Lese Status-Informationen ein... Fertig
Lese erweiterte Statusinformationen      
Initialisiere Paketstatus... Fertig
Lese Task-Beschreibungen... Fertig 

debian:~#</screen></para>

    <para>Wir schlagen uns nicht mehr mit der alten 1.8er Ruby-Version rum,
    sondern installieren Ruby 1.9. Und das der Einfachheit halber direkt von
    der Quelle (bitte immer den aktuellen Downloadlink von
    <olink>http://www.ruby-lang.org/en/downloads/</olink> übernehmen). Zum
    Kompilieren benötigen wir eine Buildumgebung. Und wo wir schon mal dabei
    sind, installieren wir direkt noch die Datenbank
    <application>sqlite3</application><footnote>
        <para>Ja, man könnte hier auch eine MySQL oder sonst was Datenbank
        installieren. Brauchen wir aber alles nicht. Die sqlite3 ist für
        unsere Entwicklungsumgebung perfekt geeignet. In der Produktivumgebung
        kann man immer noch auf andere Datenbanken umsteigen.</para>
      </footnote> und den Kommando-Zeilen Web-Browser
    <application>w3m</application>, damit wir später schneller loslegen
    können.<screen>debian:~# <command>aptitude -y install build-essential libssl-dev zlib1g-dev sqlite3 libsqlite3-dev w3m</command>
Paketlisten werden gelesen... Fertig
AbhÃ¤ngigkeitsbaum wird aufgebaut       
Lese Status-Informationen ein... Fertig
Lese erweiterte Statusinformationen      
Initialisiere Paketstatus... Fertig
Lese Task-Beschreibungen... Fertig 
Die folgenden NEUEN Pakete werden zusÃ¤tzlich installiert:
  binutils{a} build-essential bzip2{a} cpp{a} cpp-4.3{a} dpkg-dev{a} g++{a} 
  g++-4.3{a} gcc{a} gcc-4.3{a} libc6-dev{a} libgmp3c2{a} libgomp1{a} 
  libmpfr1ldbl{a} libsqlite3-0{a} libsqlite3-dev libssl-dev 
  libstdc++6-4.3-dev{a} libtimedate-perl{a} linux-libc-dev{a} make{a} 
  patch{a} sqlite3 zlib1g-dev 
0 Pakete aktualisiert, 24 zusÃ¤tzlich installiert, 0 werden entfernt und 0 nicht aktualisiert.
Muss 22,2MB an Archiven herunterladen. Nach dem Entpacken werden 67,9MB zusÃ¤tzlich belegt sein.
Schreibe erweiterte Statusinformationen... Fertig
Hole:1 http://security.debian.org lenny/updates/main linux-libc-dev 2.6.26-19lenny2 [750kB]

[...]

Richte build-essential ein (11.4) ...
Paketlisten werden gelesen... Fertig             
AbhÃ¤ngigkeitsbaum wird aufgebaut       
Lese Status-Informationen ein... Fertig
Lese erweiterte Statusinformationen       
Initialisiere Paketstatus... Fertig
Schreibe erweiterte Statusinformationen... Fertig
Lese Task-Beschreibungen... Fertig               

debian:~#</screen></para>

    <para>Jetzt überprüfen wir noch welche Ruby-Version installiert
    ist.<screen>debian:~# <command>ruby -v</command>
-bash: ruby: command not found
debian:~#</screen></para>

    <para>A-Ha! Natürlich ist noch keine installiert. Falls bei Ihnen eine
    andere Meldung erscheinen sollte, dann müssen Sie noch mal auf Los zurück
    und ein frisches und diesmal minimales Debian Linux 5.0
    installieren.</para>

    <para>Alle anderen: Ein aktuelles (stable) Ruby 1.9 downloaden, entpacken
    und bauen. Je nach Rechenpower Ihres Systems, ist das wahrscheinlich auch
    eine gute Gelegenheit einen Kaffee zu kochen oder mit dem Hund spazieren
    zu gehen.<screen>debian:~# <command>cd /usr/src/</command>
debian:/usr/src# <command>wget ftp://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.1-p376.tar.gz</command>
--2009-12-23 19:34:15--  ftp://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.1-p376.tar.gz
           =&gt; `ruby-1.9.1-p376.tar.gz'
AuflÃ¶sen des Hostnamen Â»ftp.ruby-lang.orgÂ«.... 221.186.184.68
Verbindungsaufbau zu ftp.ruby-lang.org|221.186.184.68|:21... verbunden.
Anmelden als anonymous ... Angemeldet!
==&gt; SYST ... fertig.    ==&gt; PWD ... fertig.
==&gt; TYPE I ... fertig.  ==&gt; CWD /pub/ruby/1.9 ... fertig.
==&gt; SIZE ruby-1.9.1-p376.tar.gz ... 9073007
==&gt; PASV ... fertig.    ==&gt; RETR ruby-1.9.1-p376.tar.gz ... fertig.
LÃ¤nge: 9073007 (8,7M)

100%[======================================&gt;] 9.073.007    107K/s   in 57s     

2009-12-23 19:35:22 (155 KB/s) - Â»ruby-1.9.1-p376.tar.gzÂ« gespeichert [9073007]

debian:/usr/src# <command>tar xzf ruby-1.9.1-p376.tar.gz</command> 
debian:/usr/src# <command>cd ruby-1.9.1-p376</command>
debian:/usr/src/ruby-1.9.1-p376# <command>./configure &amp;&amp; make &amp;&amp; make install</command>
checking build system type... i686-pc-linux-gnu
checking host system type... i686-pc-linux-gnu
checking target system type... i686-pc-linux-gnu
checking for gcc... gcc

[...]

Files:   512
Classes: 1353
Modules: 567
Methods: 7486
Elapsed: 66.5s
./miniruby -I./lib -I.ext/common -I./- -r./ext/purelib.rb  ./instruby.rb --make="make" --dest-dir="" --extout=".ext" --mflags="" --make-flags="" --data-mode=0644 --prog-mode=0755 --installed-list .installed.list --install=rdoc --rdoc-output=".ext/rdoc"
installing rdoc
debian:/usr/src/ruby-1.9.1-p376#</screen></para>

    <para>Kurzer Check, ob Ruby 1.9 auch wirklich installiert wurde.<screen>debian:/usr/src/ruby-1.9.1-p376# <command>cd</command>
debian:~# <command>ruby -v</command>
ruby 1.9.1p376 (2009-12-07 revision 26041) [i686-linux]
debian:~# </screen></para>

    <para>Ja, das sieht sehr gut aus. Jetzt führen wir für den Paketmanager
    <application>gem</application> (der ist ab Ruby 1.9 automatisch mit dabei)
    noch ein Update durch).<screen>debian:~# <command>gem update --system</command>
Updating RubyGems
Updating rubygems-update

[...]

RubyGems installed the following executables:
/usr/local/bin/gem

debian:~# </screen></para>

    <para>Danach benutzen wir <application>gem</application> zum Installieren
    von Rails. Benötigte andere Pakete werden dabei von
    <application>gem</application> automatisch mit installiert.<screen>debian:~# <command>gem install rails</command>
Successfully installed rake-0.8.7
Successfully installed activesupport-2.3.5
Successfully installed activerecord-2.3.5
Successfully installed rack-1.0.1
Successfully installed actionpack-2.3.5
Successfully installed actionmailer-2.3.5
Successfully installed activeresource-2.3.5
Successfully installed rails-2.3.5
8 gems installed
Installing ri documentation for rake-0.8.7...
Installing ri documentation for activesupport-2.3.5...
Installing ri documentation for activerecord-2.3.5...
Installing ri documentation for rack-1.0.1...
Installing ri documentation for actionpack-2.3.5...
Installing ri documentation for actionmailer-2.3.5...
Installing ri documentation for activeresource-2.3.5...
Updating class cache with 1382 classes...
Installing RDoc documentation for rake-0.8.7...
Installing RDoc documentation for activesupport-2.3.5...
Installing RDoc documentation for activerecord-2.3.5...
Installing RDoc documentation for rack-1.0.1...
Installing RDoc documentation for actionpack-2.3.5...
Installing RDoc documentation for actionmailer-2.3.5...
Installing RDoc documentation for activeresource-2.3.5...
debian:~#</screen></para>

    <para>Und bevor wir es vergessen, installieren wir jetzt noch das Ruby-Gem
    um auf die <application>sqlite3</application> Datenbank zugreifen zu
    können.<screen>debian:~# <command>gem install sqlite3-ruby</command>
Building native extensions.  This could take a while...
Successfully installed sqlite3-ruby-1.2.5
1 gem installed
Installing ri documentation for sqlite3-ruby-1.2.5...
Updating class cache with 2543 classes...
Installing RDoc documentation for sqlite3-ruby-1.2.5...
debian:~#</screen></para>

    <para>Das ging doch Ratz-Fatz! Jetzt wechseln wir wieder zu einem normalen
    User.</para>
  </section>

  <section xml:id="hello-world-statisch">
    <title>Hello-World mit statischem HTML</title>

    <para>Als erstes erstellen wir mit <application>rails</application> ein
    neues Rails-Projekt mit dem Namen "beste-webseite-der-welt"<screen>sw@debian:~$ <command>rails beste-webseite-der-welt</command>
      create  
      create  app/controllers
      create  app/helpers
      create  app/models
      create  app/views/layouts
      create  config/environments
      create  config/initializers
      create  config/locales
      create  db
      create  doc
      create  lib
      create  lib/tasks
      create  log
      create  public/images
      create  public/javascripts
      create  public/stylesheets
      create  script/performance
      create  test/fixtures
      create  test/functional
      create  test/integration
      create  test/performance
      create  test/unit
      create  vendor
      create  vendor/plugins
      create  tmp/sessions
      create  tmp/sockets
      create  tmp/cache
      create  tmp/pids
      create  Rakefile
      create  README
      create  app/controllers/application_controller.rb
      create  app/helpers/application_helper.rb
      create  config/database.yml
      create  config/routes.rb
      create  config/locales/en.yml
      create  db/seeds.rb
      create  config/initializers/backtrace_silencers.rb
      create  config/initializers/inflections.rb
      create  config/initializers/mime_types.rb
      create  config/initializers/new_rails_defaults.rb
      create  config/initializers/session_store.rb
      create  config/environment.rb
      create  config/boot.rb
      create  config/environments/production.rb
      create  config/environments/development.rb
      create  config/environments/test.rb
      create  script/about
      create  script/console
      create  script/dbconsole
      create  script/destroy
      create  script/generate
      create  script/runner
      create  script/server
      create  script/plugin
      create  script/performance/benchmarker
      create  script/performance/profiler
      create  test/test_helper.rb
      create  test/performance/browsing_test.rb
      create  public/404.html
      create  public/422.html
      create  public/500.html
      create  public/index.html
      create  public/favicon.ico
      create  public/robots.txt
      create  public/images/rails.png
      create  public/javascripts/prototype.js
      create  public/javascripts/effects.js
      create  public/javascripts/dragdrop.js
      create  public/javascripts/controls.js
      create  public/javascripts/application.js
      create  doc/README_FOR_APP
      create  log/server.log
      create  log/production.log
      create  log/development.log
      create  log/test.log
sw@debian:~$</screen></para>

    <para>Da wurde ja jetzt schon eine ganze Menge gemacht. Wechseln wir doch
    mal in das gerade angelegt Verzeichnis und starten mit
    <application>./script/server</application> die neue
    Rails-Applikation.<screen>sw@debian:~$ <command>cd beste-webseite-der-welt</command>
sw@debian:~/beste-webseite-der-welt$ <command>./script/server</command> 
=&gt; Booting WEBrick
=&gt; Rails 2.3.5 application starting on http://0.0.0.0:3000
=&gt; Call with -d to detach
=&gt; Ctrl-C to shutdown server
[2009-12-23 20:19:16] INFO  WEBrick 1.3.1
[2009-12-23 20:19:16] INFO  ruby 1.9.1 (2009-12-07) [i686-linux]
[2009-12-23 20:19:16] INFO  WEBrick::HTTPServer#start: pid=21586 port=3000
</screen></para>

    <para>hmmm... sieht so aus, als wenn wir jetzt unter der URL
    http://0.0.0.0:3000 auf den entsprechenden Webserver zugreifen können.
    Sollten Sie Debian mit einer grafischen GUI installiert haben, dann können
    Sie diese URL jetzt mit Firefox oder einem sonstigen Webbrowser ansteuern.
    Wer sich an die "Bitte minimal installieren"-Anweisung gehalten halt, kann
    sich mit dem Browser w3m auf der Kommandozeile helfen. Dazu eine neue
    Shell aufmachen und <application>w3m</application> mit der entsprechenden
    URI starten.<screen>sw@debian:~$ <command>w3m http://0.0.0.0:3000</command></screen></para>

    <para>Man bekommt dann folgende Bildschirmausgabe:<screen>  â¢ [site:rubyonrails.org] [Search] the Rails site
  â¢ Join the community

      â¡ Ruby on Rails
      â¡ Official weblog
      â¡ Wiki
  â¢ Browse the documentation

      â¡ Rails API
      â¡ Ruby standard library
      â¡ Ruby core
      â¡ Rails Guides

Welcome aboard

Youâre riding Ruby on Rails!

About your applicationâs environment

Getting started

Hereâs how to get rolling:

âª â â Viewing &lt;Ruby on Rails: Welcome aboard&gt;
</screen></para>

    <para>Sieht aber jetzt nicht sooo toll aus. Also versuchen wir es anders:
    Wir stoppen mit <command>CTRL+C</command> den
    <application>WEBrick</application> Webserver (das ist der den wir mit
    <application>./script/server</application> gestartet haben) und schauen
    uns mal die Hilfe dazu an.<screen>^C[2009-12-23 21:02:50] INFO  going to shutdown ...
[2009-12-23 21:02:50] INFO  WEBrick::HTTPServer#start done.
Exiting
sw@debian:~/beste-webseite-der-welt$ <command>./script/server --help</command>
Usage: server [options]
    -p, --port=port                  Runs Rails on the specified port.
                                     Default: 3000
    -b, --binding=ip                 Binds Rails to the specified ip.
                                     Default: 0.0.0.0
    -c, --config=file                Use custom rackup configuration file
    -d, --daemon                     Make server run as a Daemon.
    -u, --debugger                   Enable ruby-debugging for the server.
    -e, --environment=name           Specifies the environment to run this server under (test/development/production).
                                     Default: development
    -P, --path=/path                 Runs Rails app mounted at a specific path.
                                     Default: /

    -h, --help                       Show this help message.
sw@debian:~/beste-webseite-der-welt$</screen></para>

    <para>Und siehe da, mit <parameter>-b</parameter> können wir dem Webserver
    ein anderes Binding geben und somit auch von anderen Rechnern drauf
    zugreifen. Nehmen wir mal an, das wir das der entsprechende Rechner mit
    der IP-Adresse 192.168.248.134 eingerichtet wurde. <screen>sw@debian:~/beste-webseite-der-welt$ <command>./script/server -b 192.168.248.134</command>
=&gt; Booting WEBrick
=&gt; Rails 2.3.5 application starting on http://192.168.248.134:3000
=&gt; Call with -d to detach
=&gt; Ctrl-C to shutdown server
[2009-12-23 21:07:39] INFO  WEBrick 1.3.1
[2009-12-23 21:07:39] INFO  ruby 1.9.1 (2009-12-07) [i686-linux]
[2009-12-23 21:07:39] INFO  WEBrick::HTTPServer#start: pid=16263 port=3000
</screen></para>

    <para>Jetzt können wir auch von aussen (z.B. vom Host-System, in dem der
    virtuelle Rechner mit dem Debian-Linux läuft) auf das Railssystem
    zugreifen und das sieht dann auch direkt schon viel schöner aus.</para>

    <screenshot>
      <info>
        <title>Der Standard Welcome Screen von Ruby on Rails.</title>
      </info>

      <mediaobject>
        <imageobject>
          <imagedata fileref="default-start-screen.png" scalefit="1"></imagedata>
        </imageobject>
      </mediaobject>
    </screenshot>

    <para>Die Versuchung ist gross, jetzt auf den Link "About your
    application’s environment" zu klicken. Also werden wir es mal
    risikieren.</para>

    <screenshot>
      <info>
        <title>Infofenster zur aktuellen Umgebung (Environment).</title>
      </info>

      <mediaobject>
        <imageobject>
          <imagedata fileref="about-environment.png"></imagedata>
        </imageobject>
      </mediaobject>
    </screenshot>

    <para>Gleichzeitg sehen wir wie der WEBrick Webserver fleissig
    Informationen ausspuckt<screen>Processing Rails::InfoController#properties (for 192.168.248.1 at 2009-12-23 21:30:05) [GET]
  SQL (3.2ms)    SELECT name
 FROM sqlite_master
 WHERE type = 'table' AND NOT name = 'sqlite_sequence'

Completed in 59ms (View: 18, DB: 3) | 200 OK [http://192.168.248.134/rails/info/properties]
</screen></para>

    <para>Der Klick auf den Link scheint also irgend eine Aktion ausgelöst zu
    haben. Das merken wir uns für später und beenden erst mal mit
    <command>CTRL-C</command> den Webserver.<screen>^C[2009-12-23 21:38:07] INFO  going to shutdown ...
[2009-12-23 21:38:07] INFO  WEBrick::HTTPServer#start done.
Exiting
sw@debian:~/beste-webseite-der-welt$</screen></para>

    <para>Ziel dieses Unterkapitels ist es eine statische Hello-World HTML
    Seite zu erstellen. Dann schauen wir uns doch mal das aktuelle Verzeichnis
    an.<screen>sw@debian:~/beste-webseite-der-welt$ <command>ls</command>
app     db   lib  public    README  test  vendor
config  doc  log  Rakefile  script  tmp
sw@debian:~/beste-webseite-der-welt$</screen></para>

    <para>hmmmm... rein aus dem Bauch heraus könnte das Unterverzeichnis
    <filename>public</filename> ein guter Kandidat dafür sein. Schauen wir mal
    rein.<screen>sw@debian:~/beste-webseite-der-welt$ <command>cd public</command>
sw@debian:~/beste-webseite-der-welt/public$ <command>ls</command>
404.html  500.html     images      javascripts  stylesheets
422.html  favicon.ico  index.html  robots.txt
sw@debian:~/beste-webseite-der-welt/public$</screen></para>

    <para>Das sieht sehr gut aus. Dann erstellen wir doch mal mit unserem
    Lieblingseditor - falls Sie noch keinen haben, probieren Sie einmal
    <command>pico hello-world.html</command> aus - eine
    <filename>hello-world.html</filename> Datei mit folgendem
    Inhalt:<programlisting>&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Hello World!&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</programlisting></para>

    <para>Sicherheitshalber überprüfen wir das noch mal mit
    <application>cat</application> (sicher ist sicher).<screen>sw@debian:~/beste-webseite-der-welt/public$ <command>ls</command>
404.html  500.html     hello-world.html  index.html   robots.txt
422.html  favicon.ico  images            javascripts  stylesheets
sw@debian:~/beste-webseite-der-welt/public$ <command>cat hello-world.html</command> 
&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Hello World!&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
sw@debian:~/beste-webseite-der-welt/public$</screen></para>

    <para>Jetzt sind wir mal mutig und probieren das aus. Sprich wir gehen
    wieder in das Root-Verzeichnis der Rails-Application und starten den
    Webserver neu.<screen>sw@debian:~/beste-webseite-der-welt/public$ cd ..
sw@debian:~/beste-webseite-der-welt$ ./script/server -b 192.168.248.134
=&gt; Booting WEBrick
=&gt; Rails 2.3.5 application starting on http://192.168.248.134:3000
=&gt; Call with -d to detach
=&gt; Ctrl-C to shutdown server
[2009-12-23 21:49:02] INFO  WEBrick 1.3.1
[2009-12-23 21:49:02] INFO  ruby 1.9.1 (2009-12-07) [i686-linux]
[2009-12-23 21:49:02] INFO  WEBrick::HTTPServer#start: pid=16503 port=3000
</screen></para>

    <para>Und siehe da, ein Abruf von
    http://192.168.248.134:3000/hello-world.html im Webbrowser bringt uns das
    folgende Ergebnis.</para>

    <screenshot>
      <info>
        <title>Aufruf der hello-world.html Seite.</title>
      </info>

      <mediaobject>
        <imageobject>
          <imagedata fileref="hello-world-static.png"></imagedata>
        </imageobject>
      </mediaobject>
    </screenshot>

    <para>Merkwürdigerweise hat aber der Webserver keine Logging-Ausgabe
    gemacht. Es scheint also, das statische HTML-Seiten aus dem
    Unterverzeichnis <filename>public</filename> direkt und ohne weitere
    Verarbeitung durch Rails ausgeliefert werden.</para>

    <para>Mit <command>CTRL-C</command> beenden wir den Webserver.</para>
  </section>

  <section>
    <title>Dynamisches Hello-World Beispiel mit ERB</title>

    <para>Um eine dynamische Hello-World Seite zu erstellen benötigen wir
    einen Controller und einen View. Da es sich bei der Erklärung von
    Controllern und Views um ein typsiches Henne-Ei-Problem handelt, fange ich
    jetzt einfach mal an und irgendwann wird es irgendwie Sinn machen.</para>

    <para>Wir legen einen Controller mit dem Namen "example" und dem View
    "hello-world" an.<screen>sw@debian:~/beste-webseite-der-welt$ <command>./script/generate controller example hello-world</command> 
      exists  app/controllers/
      exists  app/helpers/
      create  app/views/example
      exists  test/functional/
      create  test/unit/helpers/
      create  app/controllers/example_controller.rb
      create  test/functional/example_controller_test.rb
      create  app/helpers/example_helper.rb
      create  test/unit/helpers/example_helper_test.rb
      create  app/views/example/hello-world.html.erb
sw@debian:~/beste-webseite-der-welt$ </screen></para>

    <para>Die letzte Ausgabezeile enthält eine Datei
    <filename>hello-world.html.erb</filename>. Schauen wir uns diese Datei
    doch mal an.<screen>sw@debian:~/beste-webseite-der-welt$ <command>cat app/views/example/hello-world.html.erb</command>
&lt;h1&gt;Example#hello-world&lt;/h1&gt;
&lt;p&gt;Find me in app/views/example/hello-world.html.erb&lt;/p&gt;
sw@debian:~/beste-webseite-der-welt$ </screen></para>

    <para>Starten wir mal die Rails-Applikation.<screen>sw@debian:~/beste-webseite-der-welt$ <command>./script/server -b 192.168.248.134</command>
=&gt; Booting WEBrick
=&gt; Rails 2.3.5 application starting on http://192.168.248.134:3000
=&gt; Call with -d to detach
=&gt; Ctrl-C to shutdown server
[2009-12-23 22:33:33] INFO  WEBrick 1.3.1
[2009-12-23 22:33:33] INFO  ruby 1.9.1 (2009-12-07) [i686-linux]
[2009-12-23 22:33:33] INFO  WEBrick::HTTPServer#start: pid=16563 port=3000
</screen></para>

    <para>Und jetzt schauen wir uns mit dem Webbrowser die URL
    http://192.168.248.134:3000/example/hello-world an.</para>

    <screenshot>
      <info>
        <title>Fehlermeldung beim hello-world Beispiel.</title>
      </info>

      <mediaobject>
        <imageobject>
          <imagedata fileref="fehler-hello-world.png"></imagedata>
        </imageobject>
      </mediaobject>
    </screenshot>

    <para>Das sieht nicht gut aus. Der Webserver gibt die gleiche
    Fehlermeldung aus.<screen>Processing ApplicationController#hello-world (for 192.168.248.1 at 2009-12-23 22:35:05) [GET]

SyntaxError (/home/sw/beste-webseite-der-welt/app/controllers/example_controller.rb:2: syntax error, unexpected '-', expecting ';' or '\n'
  def hello-world
            ^
/home/sw/beste-webseite-der-welt/app/controllers/example_controller.rb:5: syntax error, unexpected keyword_end, expecting $end):
  &lt;internal:prelude&gt;:8:in `synchronize'
  /usr/local/lib/ruby/1.9.1/webrick/httpserver.rb:111:in `service'
  /usr/local/lib/ruby/1.9.1/webrick/httpserver.rb:70:in `run'
  /usr/local/lib/ruby/1.9.1/webrick/server.rb:183:in `block in start_thread'

Rendered rescues/_trace (42.2ms)
Rendered rescues/_request_and_response (1.2ms)
Rendering rescues/layout (internal_server_error)
</screen></para>

    <para>Wenn man sich die Meldung so durchliesst, scheint es fast so zu
    sein, das Rails das Minuszeichen zwischen hello und world nicht mag. Kein
    Problem. Beenden wir mit CTRL-C den Webserver und erstellen einen View
    hello_world (also mit einem Unterstrich und keinem Minus-Zeichen).<screen>sw@debian:~/beste-webseite-der-welt$ <command>./script/generate controller example hello_world</command>
      exists  app/controllers/
      exists  app/helpers/
      exists  app/views/example
      exists  test/functional/
      exists  test/unit/helpers/
overwrite app/controllers/example_controller.rb? (enter "h" for help) [Ynaqdh] <command>Y</command>
       force  app/controllers/example_controller.rb
   identical  test/functional/example_controller_test.rb
   identical  app/helpers/example_helper.rb
   identical  test/unit/helpers/example_helper_test.rb
      create  app/views/example/hello_world.html.erb
sw@debian:~/beste-webseite-der-welt$</screen></para>

    <para>Dabei fragt Rails, ob die Datei
    <filename>app/controllers/example_controller.rb</filename> überschrieben
    werden soll. Geben Sie <command>Y</command> für ja ein. Starten wir jetzt
    noch mal die Rails-Applikation.<screen>sw@debian:~/beste-webseite-der-welt$ ./script/server -b 192.168.248.134=&gt; Booting WEBrick
=&gt; Rails 2.3.5 application starting on http://192.168.248.134:3000
=&gt; Call with -d to detach
=&gt; Ctrl-C to shutdown server
[2009-12-23 22:44:09] INFO  WEBrick 1.3.1
[2009-12-23 22:44:09] INFO  ruby 1.9.1 (2009-12-07) [i686-linux]
[2009-12-23 22:44:09] INFO  WEBrick::HTTPServer#start: pid=16572 port=3000
</screen></para>

    <para>Mit dem Webbrowser rufen wir die URL
    http://192.168.248.134:3000/example/hello_world auf.</para>

    <screenshot>
      <info>
        <title>hello_word.html.erb Ausgabe</title>
      </info>

      <mediaobject>
        <imageobject>
          <imagedata fileref="hello-world-erb.png"></imagedata>
        </imageobject>
      </mediaobject>
    </screenshot>

    <para>Wir bekommen die entsprechende Datei ausgeliefert und der Webserver
    zeigt dies auch brav an.<screen>Processing ExampleController#hello_world (for 192.168.248.1 at 2009-12-23 22:45:14) [GET]
Rendering example/hello_world
Completed in 377ms (View: 376, DB: 0) | 200 OK [http://192.168.248.134/example/hello_world]
</screen></para>

    <para><important>
        <para>Jetzt haben wir schon etwas sehr wichtiges gelernt: Rails hat
        besondere Namenskonventionen. So sollte man kein Minus-Zeichen im
        Namen eines Controllers oder eines Views verwenden.</para>
      </important>Schauen wir uns mal die Datei
    <filename>hello_world.html.erb</filename> an.<screen>sw@debian:~/beste-webseite-der-welt$ cat app/views/example/hello_world.html.erb 
&lt;h1&gt;Example#hello_world&lt;/h1&gt;
&lt;p&gt;Find me in app/views/example/hello_world.html.erb&lt;/p&gt;
sw@debian:~/beste-webseite-der-welt$</screen></para>

    <para>Da fehlt der saubere HTML-Anfang und das dazu gehörende Ende. Und
    die Seite wird von uns nicht mit "hello_world.html", sondern nur mit
    "hello_world" aufgerufen. Da fehlt ja die Datei-Endung! Alles sehr
    merkwürdig.</para>

    <section>
      <title>Was ist "erb"?</title>

      <para>"erb" ist die Dateiendung für Dateien, in denen Ruby-Code in einer
      bestimmten Syntax eingebettet ist. Das "html" davor dient als Indikator,
      das es sich um eine HTML-Datei handelt. Wenn Sie schon mal mit PHP
      gearbeitet haben, wird Ihnen das Prinzip bekannt sein.</para>

      <section>
        <title>application.html.erb</title>

        <para>Bevor die Validierungs-Polizei vor der Tür steht, kümmern wir
        uns als erstes mal um sauberes HTML und damit optional um ein
        Grund-Layout der Seite. Ein geflügeltes Wort in der Rails-Community
        ist "convention over configuration". Damit ist gemeint "Lehn Dich
        zurück! Wir haben per Default schon einen guten Weg eingebaut. Den
        kannst Du zwar verändern, aber wahrscheinlich willst Du das gar
        nicht." In diesem Fall ist dieser Default-Weg die Datei
        <filename>application.html.erb</filename> im Projekt-Unterverzeichnis
        <filename>app/views/layouts</filename></para>

        <para>Schauen wir uns einfach mal ein Beispiel für eine
        <filename>application.html.erb</filename> Datei an:<programlisting>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"
   "http://www.w3.org/TR/html4/strict.dtd"&gt;

&lt;html lang="de"&gt;
&lt;head&gt;
 &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;
 &lt;title&gt;untitled&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;%= yield %&gt;

&lt;/body&gt;
&lt;/html&gt;
</programlisting></para>

        <para>Alles standard HTML. Interessant ist die Zeile mit dem
        <code>yield</code> Befehl:<programlisting>&lt;%= yield %&gt;</programlisting></para>

        <para>Man kann es sich fast schon denken:<itemizedlist>
            <listitem>
              <para>Mit <code>&lt;%=</code> fängt ein Stück Ruby-Code in einer
              erb-Datei an.</para>
            </listitem>

            <listitem>
              <para>Mit <code>%&gt;</code> hört der Ruby-Code auf und es geht
              mit HTML-Code weiter.</para>
            </listitem>

            <listitem>
              <para><code>yield</code> ist ein Rails-Befehl der an dieser
              Stelle die eigentlich aufgerufene HTML Datei einbindet.</para>
            </listitem>
          </itemizedlist></para>

        <para>Wenn wir jetzt die Seite mit einem Webbrowser abrufen, bekommen
        wir eine diesmal komplette HTML-Seite ausgeliefert:<programlisting>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"
   "http://www.w3.org/TR/html4/strict.dtd"&gt;

&lt;html lang="de"&gt;
&lt;head&gt;
 &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;
 &lt;title&gt;untitled&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;h1&gt;Example#hello_world&lt;/h1&gt;
&lt;p&gt;Find me in app/views/example/hello_world.html.erb&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;
</programlisting></para>

        <para>Und ein Blick in das Log des Web-Servers zeigt uns was passiert
        ist:<screen>sw@debian:~/beste-webseite-der-welt$ <command>./script/server -b 192.168.248.134</command>
=&gt; Booting WEBrick
=&gt; Rails 2.3.5 application starting on http://192.168.248.134:3000
=&gt; Call with -d to detach
=&gt; Ctrl-C to shutdown server
[2009-12-24 05:30:37] INFO  WEBrick 1.3.1
[2009-12-24 05:30:37] INFO  ruby 1.9.1 (2009-12-07) [i686-linux]
[2009-12-24 05:30:37] INFO  WEBrick::HTTPServer#start: pid=17261 port=3000


Processing ExampleController#hello_world (for 192.168.248.1 at 2009-12-24 05:30:41) [GET]
Rendering template within layouts/application
Rendering example/hello_world
Completed in 17ms (View: 16, DB: 0) | 200 OK [http://192.168.248.134/example/hello_world]
</screen></para>

        <para>Die Zeile <screen>Rendering template within layouts/application</screen>gibt
        die Information aus, das unser Standard-Template
        <filename>app/vies/layouts/application.html.erb</filename> gerendet
        wurde und die nächste Zeile <screen>Rendering example/hello_world</screen>sagt,
        das die Datei <filename>app/views/example/hello_world</filename>
        gerendert wurde.</para>

        <para>Und zum Schluss erfahren wir noch, das der gesamte Prozess 17ms
        dauerte:<screen>Completed in 17ms (View: 16, DB: 0) | 200 OK [http://192.168.248.134/example/hello_world]</screen></para>
      </section>
    </section>
  </section>

  <section>
    <title>Sneak-Preview</title>

    <para>Um mit erb richtig Arbeiten zu können, brauchen Sie Ruby Know-How.
    Das kommt erst im nächsten Kapitel und ist nicht in 5-Minuten gelesen.
    Aber ich weiß ja wie das ist und deshalb gibt es hier zwei Mini-Beispiele
    zum Anfixen. <important>
        <para>Falls es Ihnen nicht schnell genug geht: Ihre Geduld wird schon
        bald belohnt werden. Aber der Einstieg in Ruby on Rails ist nicht
        trivial und ohne Ruby-Grundlagen kommen wir nicht weiter.</para>
      </important></para>

    <section>
      <title>Time.now</title>

      <para>Als erstes ein View, der uns die aktuelle Server-Uhrzeit
      anzeigt:<programlisting>&lt;h1&gt;Example#hello_world&lt;/h1&gt;
&lt;p&gt;Find me in app/views/example/hello_world.html.erb&lt;/p&gt;
&lt;p&gt;
&lt;%= Time.now %&gt;
&lt;/p&gt;</programlisting></para>

      <para>Wieder die Rails-Applikation starten.<screen>sw@debian:~/beste-webseite-der-welt$ ./script/server -b 192.168.248.134=&gt; Booting WEBrick
=&gt; Rails 2.3.5 application starting on http://192.168.248.134:3000
=&gt; Call with -d to detach
=&gt; Ctrl-C to shutdown server
[2009-12-23 23:00:25] INFO  WEBrick 1.3.1
[2009-12-23 23:00:25] INFO  ruby 1.9.1 (2009-12-07) [i686-linux]
[2009-12-23 23:00:25] INFO  WEBrick::HTTPServer#start: pid=16596 port=3000
</screen></para>

      <para>Und noch mal mit dem Webbrowser auf
      http://192.168.248.134:3000/example/hello_world zugreifen.</para>

      <screenshot>
        <info>
          <title>hello_world.html.erb Beispiel mit Time.now Ruby Code.</title>
        </info>

        <mediaobject>
          <imageobject>
            <imagedata fileref="hello-world-time-now.png"></imagedata>
          </imageobject>
        </mediaobject>
      </screenshot>

      <para>Es wird die aktuelle Uhrzeit angezeigt und der Webserver gibt auch
      die dazu passende Log-Meldung aus.<screen>Processing ExampleController#hello_world (for 192.168.248.1 at 2009-12-23 23:00:32) [GET]
Rendering example/hello_world
Completed in 1ms (View: 0, DB: 0) | 200 OK [http://192.168.248.134/example/hello_world]
</screen></para>

      <para>Ein Reload der Seite zeigt immer die aktuelle
      System-Uhrzeit.</para>

      <para>Es ist kein all zu komplexes Rätsel: Mit der Syntax <code>&lt;%=
      [...] %&gt;</code> kann ich in html.erb-Dateien Ruby-Code ausführen und
      das Ergebnis anzeigen lassen. Die Dateiendung "erb" steht dabei übrigens
      für embedded Ruby.</para>

      <para>Um Rails weiter zu erklären müssen wir uns erst einmal mit Ruby
      beschäftigen. Deshalb wird es im nächsten Kapitel um Ruby-Grundlagen
      gehen.</para>
    </section>

    <section>
      <title>Kleine Schleife</title>

      <para>Das folgende kleine Programm definiert ein Array und liesst die
      Werte dann einzelnd aus.<programlisting>&lt;h1&gt;Example#hello_world&lt;/h1&gt;
&lt;p&gt;Find me in app/views/example/hello_world.html.erb&lt;/p&gt;

&lt;ul&gt;
&lt;%- a = ['aaa', 'bbb', 'ccc'] %&gt;
&lt;%- a.each do |wert| %&gt;
  &lt;li&gt;
  &lt;%= wert %&gt;
  &lt;/li&gt;
&lt;%- end %&gt;
&lt;/ul&gt;
</programlisting></para>

      <para>Die Seite sieht fertig gerendet im Browser wie folgt aus:</para>

      <screenshot>
        <info>
          <title>Screenshot des Browsers</title>
        </info>

        <mediaobject>
          <imageobject>
            <imagedata fileref="hello_world_kleine_schleife.png"></imagedata>
          </imageobject>
        </mediaobject>
      </screenshot>
    </section>
  </section>

  <section>
    <title>Zusammenfassung</title>

    <para>Sie haben das erste Kapitel geschaft. Der Status:</para>

    <itemizedlist>
      <listitem>
        <para>Ruby 1.9 ist viel besser als Ruby 1.8</para>
      </listitem>

      <listitem>
        <para>Ruby on Rails scheint für den Anfänger kompliziert zu
        sein.</para>
      </listitem>

      <listitem>
        <para>Mit dem Programm <application>rails</application> kann man neue
        Rails-Applikationen erstellen.</para>
      </listitem>

      <listitem>
        <para>Der Projektname "beste-webseite-der-welt" war a) etwas lang und
        b) etwas irreführend.</para>
      </listitem>

      <listitem>
        <para>Mit <application>./script/server</application> kann man einen
        mitgelieferten Webserver starten.</para>
      </listitem>

      <listitem>
        <para>Mit <application>./script/generate controller</application> kann
        man einen Controller und einen View erstellen.</para>
      </listitem>

      <listitem>
        <para>Was ein Controller oder ein View genau ist, wissen wir aber
        immer noch nicht.</para>
      </listitem>

      <listitem>
        <para>Aus irgend einem Grunde gibt es merkwürdige
        Namenskonventionen.</para>
      </listitem>

      <listitem>
        <para>Der Name dieses Kapitels scheint ein billiger Trick zu sein, um
        den neugierigen Leser anzuködern.</para>
      </listitem>
    </itemizedlist>
  </section>
</chapter>
