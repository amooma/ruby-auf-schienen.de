<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xml:id="activerecord_named_scope"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title xml:id="activerecord_named_scope.title">Named Scopes</title>

  <indexterm>
    <primary>ActiveRecord</primary>

    <secondary>Named Scopes</secondary>
  </indexterm>

  <para>Manchmal ist es beim Programmieren von Rails-Applikationen
  übersichtlicher und einfacher, häufig auftauchende Suchen als eigene
  Methoden zu definieren. Diese heißen in Rails-Sprache <foreignphrase
  xml:lang="en">NamedScope</foreignphrase>. Diese NamedScopes können wie
  andere Methoden hintereinander verkettet werden.</para>

  <section xml:id="named_scopes_vorbereitung">
    <title xml:id="named_scopes_vorbereitung.title">Vorbereitung</title>

    <para>Wir bauen uns einen kleinen Online-Shop:<screen>MacBook:~ xyz$ <command>rails new shop</command>
[...]
MacBook:~ xyz$ <command>cd shop</command>
MacBook:shop xyz$ <command>rails generate model product name 'price:decimal{7,2}' weight:integer in_stock:boolean expiration_date:date</command>
[...]
MacBook:shop xyz$ <command>rake db:migrate</command>
[...]
MacBook:shop xyz$</screen></para>

    <para>Füllen Sie bitte die Datei <filename>db/seeds.rb</filename> mit
    folgendem Inhalt:<programlisting># ruby encoding: utf-8

Product.create(:name =&gt; 'Milch (1 Liter)', :weight =&gt; 1000, :in_stock =&gt; true, :price =&gt; 0.45, :expiration_date =&gt; Date.today + 14.days)
Product.create(:name =&gt; 'Butter (250 g)', :weight =&gt; 250, :in_stock =&gt; true, :price =&gt; 0.75, :expiration_date =&gt; Date.today + 14.days)
Product.create(:name =&gt; 'Mehl (1 kg)', :weight =&gt; 1000, :in_stock =&gt; false, :price =&gt; 0.45, :expiration_date =&gt; Date.today + 100.days)
Product.create(:name =&gt; 'Gummibärchen (6 x 300 g)', :weight =&gt; 1500, :in_stock =&gt; true, :price =&gt; 4.96, :expiration_date =&gt; Date.today + 1.year)
Product.create(:name =&gt; 'Super-Duper Backmischung', :in_stock =&gt; true, :price =&gt; 11.12, :expiration_date =&gt; Date.today + 1.year)
Product.create(:name =&gt; 'Eier (12 Stück)', :in_stock =&gt; true, :price =&gt; 2, :expiration_date =&gt; Date.today + 7.days)
Product.create(:name =&gt; 'Erdnüsse (8 x 200 g Packung)', :in_stock =&gt; false, :weight =&gt; 1600, :price =&gt; 17.49, :expiration_date =&gt; Date.today + 1.year)</programlisting></para>

    <para>Jetzt die Datenbank löschen und neu mit der
    <filename>db/seeds.rb</filename> befüllen:<screen>MacBook:shop xyz$ <command>rake db:reset</command>
[...]
MacBook:shop xyz$</screen></para>
  </section>

  <section xml:id="einfache_named_scopes">
    <title xml:id="einfache_named_scopes.title">Einfache NamedScopes</title>

    <para>Wenn wir in unserem Online-Shop nur Produkte, die auf Lager sind
    anzeigen wollen, so könnten wir jedesmal die folgende Abfrage
    machen:<screen>MacBook:shop xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.3)
1.9.3p194 :001 &gt; <command>Product.where(:in_stock =&gt; true)</command>
  Product Load (0.2ms)  SELECT "products".* FROM "products" WHERE "products"."in_stock" = 't'
 =&gt; [#&lt;Product id: 1, name: "Milch (1 Liter)", price: #&lt;BigDecimal:7fd17c8cbbd0,'0.45E0',9(45)&gt;, weight: 1000, in_stock: true, expiration_date: "2012-05-22", created_at: "2012-05-08 12:43:15", updated_at: "2012-05-08 12:43:15"&gt;, #&lt;Product id: 2, name: "Butter (250 g)", price: #&lt;BigDecimal:7fd17c8ca870,'0.75E0',9(45)&gt;, weight: 250, in_stock: true, expiration_date: "2012-05-22", created_at: "2012-05-08 12:43:15", updated_at: "2012-05-08 12:43:15"&gt;, #&lt;Product id: 4, name: "Gummibärchen (6 x 300 g)", price: #&lt;BigDecimal:7fd17c8d13f0,'0.496E1',18(45)&gt;, weight: 1500, in_stock: true, expiration_date: "2013-05-08", created_at: "2012-05-08 12:43:15", updated_at: "2012-05-08 12:43:15"&gt;, #&lt;Product id: 5, name: "Super-Duper Backmischung", price: #&lt;BigDecimal:7fd17c8cfd98,'0.1112E2',18(45)&gt;, weight: nil, in_stock: true, expiration_date: "2013-05-08", created_at: "2012-05-08 12:43:15", updated_at: "2012-05-08 12:43:15"&gt;, #&lt;Product id: 6, name: "Eier (12 Stück)", price: #&lt;BigDecimal:7fd17c8d52e8,'0.2E1',9(36)&gt;, weight: nil, in_stock: true, expiration_date: "2012-05-15", created_at: "2012-05-08 12:43:15", updated_at: "2012-05-08 12:43:15"&gt;] 
1.9.3p194 :002 &gt; <command>exit</command>
MacBook:shop xyz$</screen></para>

    <para>Wir könnten aber auch in der
    <filename>app/models/product.rb</filename> einen NamedScope
    <code>available</code> definieren:<programlisting>class Product &lt; ActiveRecord::Base
  attr_accessible :in_stock, :name, :price, :weight

  <emphasis>scope :available, where(:in_stock =&gt; true)</emphasis>
end</programlisting></para>

    <para>Und diesen dann benutzen:<screen>MacBook:shop xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.3)
1.9.3p194 :001 &gt; <command>Product.available.count</command>
   (0.2ms)  SELECT COUNT(*) FROM "products" WHERE "products"."in_stock" = 't'
 =&gt; 5 
1.9.3p194 :002 &gt; <command>Product.where(:in_stock =&gt; true).count</command>
   (0.2ms)  SELECT COUNT(*) FROM "products" WHERE "products"."in_stock" = 't'
 =&gt; 5 
1.9.3p194 :003 &gt; <command>exit</command>
MacBook:shop xyz$</screen></para>

    <para>Lassen Sie uns für das Beispiel einen zweiten NamedScope in der
    <filename>app/models/product.rb</filename> definieren:<programlisting>class Product &lt; ActiveRecord::Base
  attr_accessible :in_stock, :name, :price, :weight

  scope :available, where(:in_stock =&gt; true)
  scope :cheap, where(:price =&gt; [0..1])
end</programlisting></para>

    <para>Jetzt können wir alle günstigen (cheap) Produkte, die auf Lager sind
    ausgeben:<screen>MacBook:shop xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.3)
1.9.3p194 :001 &gt; <command>Product.cheap.count</command>
   (0.3ms)  SELECT COUNT(*) FROM "products" WHERE (("products"."price" BETWEEN 0 AND 1 OR "products"."price" IN (NULL)))
 =&gt; 3 
1.9.3p194 :002 &gt; <command>Product.cheap.available.count</command>
   (0.4ms)  SELECT COUNT(*) FROM "products" WHERE "products"."in_stock" = 't' AND (("products"."price" BETWEEN 0 AND 1 OR "products"."price" IN (NULL)))
 =&gt; 2 
1.9.3p194 :003 &gt; exit
MacBook:shop xyz$ </screen></para>
  </section>

  <section xml:id="named_scope_lambda">
    <title xml:id="named_scope_lambda.title">Lambda</title>

    <para>Wenn wir einen Named Scope <methodname>consumable</methodname>
    einbauen möchten, der das heutige Datum mit dem Wert von
    <methodname>expiration_date</methodname> vergleicht, dann müssen wir dafür
    mit Lambda arbeiten. Ein normaler Named Scope wird einmal von ActiveRecord
    definiert und dann immer wieder benutzt. Das heißt ein
    <code>Date.today</code> (für das heutige Datum) würde nur einmal in ein
    Datum umgesetzt und danach immer wieder genommen. Morgen würde also immer
    noch mit dem Datum von heute gearbeitet. Wenn wir den Named Scope mit
    Lambda definieren, so wird dieses Lambda bei jedem Aufruf neu
    aufgebaut.</para>

    <para><filename>app/models/product.rb</filename><programlisting>class Product &lt; ActiveRecord::Base
  attr_accessible :expiration_date, :in_stock, :name, :price, :weight

  scope :consumable, lambda { where('expiration_date &gt; ?', Date.today) }
end</programlisting></para>

    <para>Damit erhalten wir immer korrekt die heute noch essbaren
    Lebensmittel:<screen>MacBook:shop xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.3)
1.9.3p194 :001 &gt; <command>Product.consumable.count</command>
   (0.1ms)  SELECT COUNT(*) FROM "products" WHERE (expiration_date &gt; '2012-05-08')
 =&gt; 7 
1.9.3p194 :002 &gt; <command>exit</command>
MacBook:shop xyz$</screen></para>
  </section>

  <section>
    <title>Parameter übergeben</title>

    <para>Wenn Sie einen NamedScope brauchen, der auch Parameter verarbeiten
    kann, so ist das auch kein Problem. Das folgende Beispiel gibt Produkte
    die günstiger sind, als der angegebene Wert, aus. Die
    <filename>app/models/product.rb</filename> sieht so aus:<programlisting>class Product &lt; ActiveRecord::Base
  attr_accessible :in_stock, :name, :price, :weight

  scope :cheaper_than, lambda { |price| where('price &lt; ?', price) }
end</programlisting></para>

    <para>Jetzt können wir alle Produkte zählen, die weniger als 50 cent
    kosten:<screen>MacBook:shop xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.3)
1.9.3p194 :001 &gt; <command>Product.cheaper_than(0.5).count</command>
   (0.2ms)  SELECT COUNT(*) FROM "products" WHERE (price &lt; 0.5)
 =&gt; 2 
1.9.3p194 :002 &gt; <command>exit</command>
MacBook:shop xyz</screen></para>
  </section>

  <section xml:id="named_scope_create">
    <title xml:id="named_scope_create.title">Neue Datensätze mit NamedScopes
    anlegen</title>

    <para>Nehmen wir folgende
    <filename>app/models/product.rb</filename>:<programlisting>class Product &lt; ActiveRecord::Base
  attr_accessible :in_stock, :name, :price, :weight

  scope :available, where(:in_stock =&gt; true)
  scope :cheap, where(:price =&gt; [0..1])
  scope :cheaper_than, lambda { |price| where('price &lt; ?', price) }
end</programlisting></para>

    <para>Mit diesem NamedScope können wir dann nicht nur alle Produkte, die
    auf Lager sind raussuchen, sondern auch einen neue Produkte anlegen, der
    im Feld <varname>in_stock</varname> den Wert <code>true</code>
    enthalten:<screen>MacBook:shop xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.3)
1.9.3p194 :001 &gt; <command>product = Product.available.build</command>
 =&gt; #&lt;Product id: nil, name: nil, price: nil, weight: nil, in_stock: true, created_at: nil, updated_at: nil&gt; 
1.9.3p194 :002 &gt; <command>product.in_stock</command>
 =&gt; true 
1.9.3p194 :003 &gt; <command>exit</command>
MacBook:shop xyz$</screen></para>

    <para>Das funktioniert bei der Methode <methodname>build</methodname>
    (siehe <xref linkend="activerecord_hinzufuegen_build" />) und
    <methodname>create</methodname> (siehe <xref
    linkend="activerecord_create" />).</para>
  </section>
</section>
