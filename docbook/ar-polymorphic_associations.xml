<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xml:id="activerecord_polymorphic"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title xml:id="activerecord_polymorphic.title">Polymorphe Assoziationen
  (polymorphic associations)</title>

  <indexterm>
    <primary>ActiveRecord</primary>

    <secondary>Polymorphic Associations</secondary>
  </indexterm>

  <para>Schon das Wort "polymorph" lässt einen angespannt werden. Was kann
  damit gemeint sein? Auf <uri
  xlink:href="http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html">http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html</uri>
  steht dazu: <quote>Polymorphic associations on models are not restricted on
  what types of models they can be associated with.</quote> Na, das ist ja
  jetzt klar wie Kloßbrühe! ;-)</para>

  <para>Ich zeige Ihnen ein Beispiel, in dem wir ein Model für Autos
  (<classname>Car</classname>) und ein Model für Fahrräder
  (<classname>Bike</classname>) erstellen. Um ein Auto oder ein Fahrrad zu
  beschreiben, verwenden wir ein Model zum Auszeichnen
  (<classname>Tag</classname>). Ein Auto und ein Fahrrad kann beliebig viele
  <methodname>tags</methodname> haben. Die Applikation:<screen>MacBook:~ xyz$ <command>rails new example</command>
[...]
MacBook:~ xyz$ <command>cd example</command> 
MacBook:example xyz$</screen></para>

  <para>Jetzt die drei benötigten Modele:<screen>MacBook:example xyz$ <command>rails generate model car name</command>
[...]
MacBook:example xyz$ <command>rails generate model bike name</command>
[...]
MacBook:example xyz$ <command>rails generate model tag name taggable_type taggable_id:integer</command>
[...]
MacBook:example xyz$ <command>rake db:migrate</command>
[...]
MacBook:example xyz$</screen></para>

  <para><classname>Car</classname> und <classname>Bike</classname> sind klar.
  Bei <classname>Tag</classname> benutzen wir die Felder
  <methodname>taggable_type</methodname> und
  <methodname>taggable_id</methodname>, um ActiveRecord eine Möglichkeit zu
  geben die Zuordnung für die polymorphic association abzuspeichern. Dies
  müssen wir im Model entsprechend eintragen.</para>

  <para><filename>app/models/tag.rb</filename><programlisting>class Tag &lt; ActiveRecord::Base
  attr_accessible :name, :taggable_id, :taggable_type

  belongs_to :taggable, :polymorphic =&gt; true
end</programlisting></para>

  <para><filename>app/models/car.rb</filename><programlisting>class Car &lt; ActiveRecord::Base
  attr_accessible :name

  has_many :tags, :as =&gt; :taggable  
end</programlisting></para>

  <para><filename>app/models/bike.rb</filename><programlisting>class Bike &lt; ActiveRecord::Base
  attr_accessible :name

  has_many :tags, :as =&gt; :taggable
end
</programlisting></para>

  <para>Wir benutzen bei Car und Bike ein zusätzliches <code>:as =&gt;
  :taggable</code> bei der Definition von has_many. Bei
  <classname>Tag</classname> benutzen wir <code>belongs_to :taggable,
  :polymorphic =&gt; true</code> um ActiveRecord die polymorphic association
  anzuzeigen.</para>

  <tip>
    <para>Das Suffix <quote><foreignphrase
    xml:lang="en">able</foreignphrase></quote>
    (<replaceable>…</replaceable>bar) beim Namen <quote><foreignphrase
    xml:lang="en">taggable</foreignphrase></quote> ist Rails-üblich, muss aber
    nicht sein. Wir brauchen ja zum Verknüpfen jetzt nicht nur die ID des
    Eintrags, sondern müssen auch noch wissen, um welches <foreignphrase
    xml:lang="en">Model</foreignphrase> es sich eigentlich handelt. Da macht
    der Begriff <quote><foreignphrase
    xml:lang="en">taggable_type</foreignphrase></quote> halbwegs Sinn.</para>
  </tip>

  <para>Gehen wir mal in die <foreignphrase
  xml:lang="en">Console</foreignphrase> und legen ein Auto und ein Fahrrad
  an:<screen>MacBook:example xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.3)
1.9.3p194 :001 &gt; <command>golf = Car.create(:name =&gt; 'VW Golf')</command>
   (0.1ms)  begin transaction
  SQL (5.2ms)  INSERT INTO "cars" ("created_at", "name", "updated_at") VALUES (?, ?, ?)  [["created_at", Tue, 08 May 2012 07:20:45 UTC +00:00], ["name", "VW Golf"], ["updated_at", Tue, 08 May 2012 07:20:45 UTC +00:00]]
   (2.4ms)  commit transaction
 =&gt; #&lt;Car id: 1, name: "VW Golf", created_at: "2012-05-08 07:20:45", updated_at: "2012-05-08 07:20:45"&gt; 
1.9.3p194 :002 &gt; <command>mountainbike = Bike.create(:name =&gt; 'Mountainbike')</command>
   (0.1ms)  begin transaction
  SQL (0.6ms)  INSERT INTO "bikes" ("created_at", "name", "updated_at") VALUES (?, ?, ?)  [["created_at", Tue, 08 May 2012 07:20:51 UTC +00:00], ["name", "Mountainbike"], ["updated_at", Tue, 08 May 2012 07:20:51 UTC +00:00]]
   (3.0ms)  commit transaction
 =&gt; #&lt;Bike id: 1, name: "Mountainbike", created_at: "2012-05-08 07:20:51", updated_at: "2012-05-08 07:20:51"&gt; 
1.9.3p194 :003 &gt;</screen></para>

  <para>Jetzt definieren wir jeweils ein Tag mit der Farbe des entsprechenden
  Objektes:<screen>1.9.3p194 :004 &gt; <command>golf.tags.create(:name =&gt; 'blau')</command>
   (0.1ms)  begin transaction
  SQL (0.6ms)  INSERT INTO "tags" ("created_at", "name", "taggable_id", "taggable_type", "updated_at") VALUES (?, ?, ?, ?, ?)  [["created_at", Tue, 08 May 2012 07:23:21 UTC +00:00], ["name", "blau"], ["taggable_id", 1], ["taggable_type", "Car"], ["updated_at", Tue, 08 May 2012 07:23:21 UTC +00:00]]
   (1.2ms)  commit transaction
 =&gt; #&lt;Tag id: 1, name: "blau", taggable_type: "Car", taggable_id: 1, created_at: "2012-05-08 07:23:21", updated_at: "2012-05-08 07:23:21"&gt; 
1.9.3p194 :005 &gt; <command>mountainbike.tags.create(:name =&gt; 'schwarz')</command>
   (0.1ms)  begin transaction
  SQL (0.6ms)  INSERT INTO "tags" ("created_at", "name", "taggable_id", "taggable_type", "updated_at") VALUES (?, ?, ?, ?, ?)  [["created_at", Tue, 08 May 2012 07:27:11 UTC +00:00], ["name", "schwarz"], ["taggable_id", 1], ["taggable_type", "Bike"], ["updated_at", Tue, 08 May 2012 07:27:11 UTC +00:00]]
   (3.1ms)  commit transaction
 =&gt; #&lt;Tag id: 2, name: "schwarz", taggable_type: "Bike", taggable_id: 1, created_at: "2012-05-08 07:27:11", updated_at: "2012-05-08 07:27:11"&gt; 
1.9.3p194 :006 &gt;</screen></para>

  <para>Beim Golf fügen wir noch ein weiteres <classname>Tag</classname>
  hinzu:<screen>1.9.3p194 :006 &gt; <command>golf.tags.create(:name =&gt; 'Automatik')</command>
   (0.1ms)  begin transaction
  SQL (1.3ms)  INSERT INTO "tags" ("created_at", "name", "taggable_id", "taggable_type", "updated_at") VALUES (?, ?, ?, ?, ?)  [["created_at", Tue, 08 May 2012 07:28:12 UTC +00:00], ["name", "Automatik"], ["taggable_id", 1], ["taggable_type", "Car"], ["updated_at", Tue, 08 May 2012 07:28:12 UTC +00:00]]
   (3.7ms)  commit transaction
 =&gt; #&lt;Tag id: 3, name: "Automatik", taggable_type: "Car", taggable_id: 1, created_at: "2012-05-08 07:28:12", updated_at: "2012-05-08 07:28:12"&gt; 
1.9.3p194 :007 &gt; </screen></para>

  <para>Schauen wir uns mal alle <classname>Tag</classname> Einträge
  an:<screen>1.9.3p194 :007 &gt; <command>Tag.all</command>
  Tag Load (0.4ms)  SELECT "tags".* FROM "tags" 
 =&gt; [#&lt;Tag id: 1, name: "blau", taggable_type: "Car", taggable_id: 1, created_at: "2012-05-08 07:23:21", updated_at: "2012-05-08 07:23:21"&gt;, #&lt;Tag id: 2, name: "schwarz", taggable_type: "Bike", taggable_id: 1, created_at: "2012-05-08 07:27:11", updated_at: "2012-05-08 07:27:11"&gt;, #&lt;Tag id: 3, name: "Automatik", taggable_type: "Car", taggable_id: 1, created_at: "2012-05-08 07:28:12", updated_at: "2012-05-08 07:28:12"&gt;] 
1.9.3p194 :008 &gt; </screen></para>

  <para>Und jetzt alle tags des Golfs:<screen>1.9.3p194 :008 &gt; <command>golf.tags</command>
  Tag Load (0.3ms)  SELECT "tags".* FROM "tags" WHERE "tags"."taggable_id" = 1 AND "tags"."taggable_type" = 'Car'
 =&gt; [#&lt;Tag id: 1, name: "blau", taggable_type: "Car", taggable_id: 1, created_at: "2012-05-08 07:23:21", updated_at: "2012-05-08 07:23:21"&gt;, #&lt;Tag id: 3, name: "Automatik", taggable_type: "Car", taggable_id: 1, created_at: "2012-05-08 07:28:12", updated_at: "2012-05-08 07:28:12"&gt;] 
1.9.3p194 :009 &gt; </screen></para>

  <para>Natürlich können Sie sich auch anzeigen lassen, zu welchem Objekt das
  letzte <classname>Tag</classname> gehört:<screen>1.9.3p194 :009 &gt; <command>Tag.last.taggable</command>
  Tag Load (0.3ms)  SELECT "tags".* FROM "tags" ORDER BY "tags"."id" DESC LIMIT 1
  Car Load (0.2ms)  SELECT "cars".* FROM "cars" WHERE "cars"."id" = 1 LIMIT 1
 =&gt; #&lt;Car id: 1, name: "VW Golf", created_at: "2012-05-08 07:20:45", updated_at: "2012-05-08 07:20:45"&gt; 
1.9.3p194 :010 &gt; <command>exit</command>
MacBook:example xyz$</screen></para>

  <para>Polymorphic associations sind immer praktisch, wenn man die
  Datenbankstruktur normalisieren will. Wir hätten in diesem Beispiel ja auch
  ein Model <classname>CarTag</classname> und <classname>BikeTag</classname>
  definieren können, aber da <classname>Tag</classname> für beide gleich ist,
  macht hier eine polymorphic association mehr Sinn.</para>

  <note>
    <para><foreignphrase xml:lang="en">Polymorphic
    Associations</foreignphrase> sind sehr praktisch. Man sollte aber auch
    immer daran denken, dass sie mehr Last auf der Datenbank erzeugen als eine
    normale 1:n-Verknüpfung. Normalerweise macht das den Bock nicht fett, aber
    man sollte es bei der Planung im Hinterkopf haben.</para>
  </note>
</section>
