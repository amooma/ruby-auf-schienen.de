<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="action_mailer"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title xml:id="action_mailer.title">Action Mailer</title>

  <indexterm>
    <primary>Action Mailer</primary>
  </indexterm>

  <indexterm>
    <primary>E-Mail</primary>
  </indexterm>

  <para>Auch wenn wir mit Rails hauptsächlich Webseiten generieren, so ist es
  doch hin und wieder ganz praktisch, auch mal eine E-Mail verschicken zu
  können.</para>

  <para>Bauen wir uns mal ein Beispiel mit einer minimalen Userverwaltung für
  einen Webshop, die beim Anlegen eines neuen Users diesem automatisch eine
  E-Mail schickt:<screen>MacBook:~ xyz$ <command>rails new webshop</command>
[...]
MacBook:~ xyz$ <command>cd webshop</command> 
MacBook:webshop xyz$ <command>rails generate scaffold User name email</command>
[...]
MacBook:webshop xyz$ <command>rake db:migrate</command>
[...]
MacBook:webshop xyz$</screen></para>

  <para>Für das User-Model erstellen wir in der
  <filename>app/models/user.rb</filename> noch eine minimale Validierung,
  damit wir sichergehen können, dass jeder User einen Namen und eine
  syntaktisch korrekte E-Mail-Adresse hat.<programlisting>class User &lt; ActiveRecord::Base
  attr_accessible :email, :name

  validates :name,
            :presence =&gt; true

  validates :email,
            :presence =&gt; true,
            :format =&gt; { :with =&gt; /\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\Z/i }
end
</programlisting></para>

  <para>Es gibt einen Generator namens <code>mailer</code>, der für uns die
  fürs Mailen notwendigen Dateien anlegt. Als Erstes schauen wir uns die
  Ausgabe des <command>rails generate mailer</command> an, ohne dass wir
  weitere Argumente übergeben:<screen>MacBook:webshop xyz$ <command>rails generate mailer</command>
Usage:
  rails generate mailer NAME [method method] [options]

Options:
      [--skip-namespace]        # Skip namespace (affects only isolated applications)
      [--old-style-hash]        # Force using old style hash (:foo =&gt; 'bar') on Ruby &gt;= 1.9
  -e, [--template-engine=NAME]  # Template engine to be invoked
                                # Default: erb
  -t, [--test-framework=NAME]   # Test framework to be invoked
                                # Default: test_unit

Runtime options:
  -f, [--force]    # Overwrite files that already exist
  -p, [--pretend]  # Run but do not make any changes
  -q, [--quiet]    # Supress status output
  -s, [--skip]     # Skip files that already exist

Description:
============
    Stubs out a new mailer and its views. Pass the mailer name, either
    CamelCased or under_scored, and an optional list of emails as arguments.

    This generates a mailer class in app/mailers and invokes your template
    engine and test framework generators.

Example:
========
    rails generate mailer Notifications signup forgot_password invoice

    creates a Notifications mailer class, views, test, and fixtures:
        Mailer:     app/mailers/notifications.rb
        Views:      app/views/notifications/signup.erb [...]
        Test:       test/functional/notifications_test.rb
        Fixtures:   test/fixtures/notifications/signup [...]

MacBook:webshop xyz$</screen></para>

  <para>Das ist alles so, wie wir es erwarten. Legen wir also den Mailer
  <classname>notification</classname> an:<screen>MacBook:webshop xyz$ <command>rails generate mailer notification</command>
      create  app/mailers/notification.rb
      invoke  erb
      create    app/views/notification
      invoke  test_unit
      create    test/functional/notification_test.rb
MacBook:webshop xyz$ </screen></para>

  <para>In der Datei <filename>app/mailers/notification.rb</filename> finden
  Sie den Controller:<programlisting>class Notification &lt; ActionMailer::Base
  default from: "from@example.com"
end</programlisting>Wir legen darin eine Methode
  <methodname>new_account(user)</methodname> an, mit der wir die
  Bestätigungs-E-Mail für einen neuen Account verschicken:<programlisting>class Notification &lt; ActionMailer::Base
  default from: "from@example.com"

  def new_account(user)
    @user = user
    mail(:to =&gt; user.email,
         :subject =&gt; "The new account #{user.name} is active.")
  end
end</programlisting></para>

  <para>Jetzt legen wir den View zu dieser Methode an. Der Dateiname
  <filename>app/views/notification/new_account.text.erb</filename> setzt sich
  dabei aus dem Methodennamen und der Endung <filename>text.erb</filename>
  zusammen.<programlisting>Hello &lt;%= @user.name %&gt;,

your new account is active.

Have a great day!
  A Robot</programlisting></para>

  <para>Da wir diese E-Mail nach dem create eines <classname>Users</classname>
  verschicken wollen, müssen wir noch die
  <filename>app/models/user.rb</filename>-Datei anpassen:<programlisting>class User &lt; ActiveRecord::Base
  attr_accessible :email, :name

  validates :name,
            :presence =&gt; true

  validates :email,
            :presence =&gt; true,
            :format =&gt; { :with =&gt; /\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\Z/i }

<emphasis>  after_create :send_welcome_email
  
  private
  
  def send_welcome_email
    Notification.new_account(self).deliver
  end</emphasis>
end
</programlisting></para>

  <para>Legen wir mal in der Console einen neuen <classname>User</classname>
  an:<screen>MacBook:webshop xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.3)
1.9.3p194 :001 &gt; <command>User.create(name: 'Wintermeyer', email: 'stefan.wintermeyer@amooma.de')</command>
   (0.1ms)  begin transaction
  SQL (7.7ms)  INSERT INTO "users" ("created_at", "email", "name", "updated_at") VALUES (?, ?, ?, ?)  [["created_at", Wed, 30 May 2012 15:30:30 UTC +00:00], ["email", "stefan.wintermeyer@amooma.de"], ["name", "Wintermeyer"], ["updated_at", Wed, 30 May 2012 15:30:30 UTC +00:00]]
   (1.4ms)  commit transaction
 =&gt; #&lt;User id: 1, name: "Wintermeyer", email: "stefan.wintermeyer@amooma.de", created_at: "2012-05-30 15:30:30", updated_at: "2012-05-30 15:30:30"&gt; 
1.9.3p194 :002 &gt; <command>exit</command>
MacBook:webshop xyz$ </screen></para>

  <para>Das war unspektakulär. Werfen wir nachfolgend einen Blick in die
  Log-Datei <filename>log/development.log</filename>:<programlisting>  Rendered notification/new_account.text.erb (2.5ms)

Sent mail to stefan.wintermeyer@amooma.de (58ms)
Date: Wed, 30 May 2012 17:30:31 +0200
From: from@example.com
To: stefan.wintermeyer@amooma.de
Message-ID: &lt;4fc63d175ea71_a9f03fceda028cd8377c5@MacBook.local.mail&gt;
Subject: The new account Wintermeyer is active.
Mime-Version: 1.0
Content-Type: text/plain;
 charset=UTF-8
Content-Transfer-Encoding: 7bit

Hello Wintermeyer,

your new account is active.

Have a great day!
  A Robot</programlisting></para>

  <para>Da wir im „<literal>development</literal>“-Modus arbeiten, hat Rails
  die E-Mail nicht verschickt, sondern nur in die
  <filename>log/development.log</filename> den Inhalt
  hineingeschrieben.</para>

  <section xml:id="konfiguration_email_server">
    <title xml:id="konfiguration_email_server.title">Konfiguration des
    E-Mail-Servers</title>

    <para>Rails kann ein lokales Sendmail oder einen externern SMTP-Server zum
    Ausliefern der E-Mails benutzen.</para>

    <section xml:id="action_mailer_sendmail">
      <title xml:id="action_mailer_sendmail.title">Versand per lokalem
      Sendmail</title>

      <indexterm>
        <primary>sendmail</primary>
      </indexterm>

      <para>Wenn Sie klassisch per lokalem <code>sendmail</code> die E-Mails
      verschicken wollen, so müssen Sie die folgenden Zeilen in Ihrer
      Konfigurationsdatei
      <filename>config/environments/development.rb</filename> (für die
      Entwicklungsumgebung) oder
      <filename>config/environments/production.rb</filename> (für Ihre
      Produktivumgebung) einfügen:<programlisting>config.action_mailer.delivery_method = :sendmail
config.action_mailer.perform_deliveries = true
config.action_mailer.raise_delivery_errors = true
</programlisting></para>
    </section>

    <section>
      <title>Versand per direktem SMTP</title>

      <indexterm>
        <primary>SMTP</primary>
      </indexterm>

      <para>Wenn Sie die E-Mail direkt über einen SMTP-Server verschicken
      wollen (z. B. Google Mail), dann müssen Sie die folgenden Zeilen in
      Ihrer Konfigurationsdatei
      <filename>config/environments/development.rb</filename> (für die
      Entwicklungsumgebung) oder
      <filename>config/environments/production.rb</filename> (für Ihre
      Produktivumgebung) einfügen:<programlisting>config.action_mailer.delivery_method = :smtp
config.action_mailer.smtp_settings = {
  :address              =&gt; "smtp.gmail.com",
  :port                 =&gt; 587,
  :domain               =&gt; 'example.com',
  :user_name            =&gt; '&lt;username&gt;',
  :password             =&gt; '&lt;password&gt;',
  :authentication       =&gt; 'plain',
  :enable_starttls_auto =&gt; true  }</programlisting></para>

      <para>Natürlich müssen Sie die Werte für <code>:domain</code>,
      <code>:user_name</code> und <code>:password</code> Ihrer Konfiguration
      entsprechend anpassen.</para>
    </section>
  </section>

  <section xml:id="x_header">
    <title xml:id="x_header.title">Eigene X-Header</title>

    <indexterm>
      <primary>E-Mail</primary>

      <secondary>X-Header</secondary>
    </indexterm>

    <para>Sollten Sie das Bedürfnis verspüren, einen zusätzlichen X-Header
    einzubauen, dann ist das kein echtes Problem. Hier ein Beispiel für die
    Erweiterung der Datei
    <filename>app/mailers/notification.rb</filename>:<programlisting>class Notification &lt; ActionMailer::Base
  default from: "from@example.com"

  def new_account(user)
    @user = user
    <emphasis>headers["X-Priority"] = '3'</emphasis>
    mail(:to =&gt; user.email,
         :subject =&gt; "The new account #{user.name} is active.")
  end
end
</programlisting></para>

    <para>Damit würde die versendete E-Mail wie folgt
    aussehen:<programlisting>Sent mail to stefan.wintermeyer@amooma.de (50ms)
Date: Wed, 30 May 2012 17:35:21 +0200
From: from@example.com
To: stefan.wintermeyer@amooma.de
Message-ID: &lt;4fc63e39e356a_aa083fe366028cd8803c7@MacBook.local.mail&gt;
Subject: The new account Wintermeyer is active.
Mime-Version: 1.0
Content-Type: text/plain;
 charset=UTF-8
Content-Transfer-Encoding: 7bit
<emphasis>X-Priority: 3</emphasis>

Hello Wintermeyer,

your new account is active.

Have a great day!
  A Robot</programlisting></para>
  </section>

  <section xml:id="html_emails">
    <title xml:id="html_emails.title">HTML-E-Mails</title>

    <indexterm>
      <primary>E-Mail</primary>

      <secondary>HTML</secondary>
    </indexterm>

    <para>HTML-E-Mails zu erstellen, ist denkbar einfach. Erstellen Sie bitte
    die Datei
    <filename>app/views/user_mailer/new_account_email.html.erb</filename> mit
    folgendem Inhalt:<programlisting>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta content="text/html; charset=UTF-8" http-equiv="Content-Type" /&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;p&gt;Hello &lt;%= @user.name %&gt;,&lt;/p&gt;

    &lt;p&gt;your new account is active.&lt;/p&gt;

    &lt;p&gt;&lt;i&gt;Have a great day!&lt;/i&gt;&lt;/p&gt;
    &lt;p&gt;A Robot&lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;</programlisting></para>

    <para>Wenn Sie jetzt einen User anlegen, sehen Sie in der Log-Datei
    <filename>log/development.log</filename> was gerendert wurde und die
    versendete E-Mail:<programlisting>  Rendered notification/new_account.html.erb (2.0ms)
  Rendered notification/new_account.text.erb (0.4ms)

Sent mail to stefan.wintermeyer@amooma.de (69ms)
Date: Wed, 30 May 2012 17:46:49 +0200
From: from@example.com
To: stefan.wintermeyer@amooma.de
Message-ID: &lt;4fc640e930bff_aa173fd61d828ce0501e4@MacBook.local.mail&gt;
Subject: The new account Wintermeyer is active.
Mime-Version: 1.0
Content-Type: multipart/alternative;
 boundary="--==_mimepart_4fc640e921794_aa173fd61d828ce04987d";
 charset=UTF-8
Content-Transfer-Encoding: 7bit



----==_mimepart_4fc640e921794_aa173fd61d828ce04987d
Date: Wed, 30 May 2012 17:46:49 +0200
Mime-Version: 1.0
Content-Type: text/plain;
 charset=UTF-8
Content-Transfer-Encoding: 7bit
Content-ID: &lt;4fc640e926312_aa173fd61d828ce04998e@MacBook.local.mail&gt;

Hello Wintermeyer,

your new account is active.

Have a great day!
  A Robot

----==_mimepart_4fc640e921794_aa173fd61d828ce04987d
Date: Wed, 30 May 2012 17:46:49 +0200
Mime-Version: 1.0
Content-Type: text/html;
 charset=UTF-8
Content-Transfer-Encoding: 7bit
Content-ID: &lt;4fc640e928055_aa173fd61d828ce0500ea@MacBook.local.mail&gt;

&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta content="text/html; charset=UTF-8" http-equiv="Content-Type" /&gt;
  &lt;/head&gt;
  &lt;body&gt;
  	&lt;p&gt;Hello Wintermeyer,&lt;/p&gt;

    &lt;p&gt;your new account is active.&lt;/p&gt;

    &lt;p&gt;&lt;i&gt;Have a great day!&lt;/i&gt;&lt;/p&gt;
    &lt;p&gt;A Robot&lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;

----==_mimepart_4fc640e921794_aa173fd61d828ce04987d--
</programlisting></para>

    <para>Rails hat automatisch eine E-Mail im MIME-Format
    <literal>multipart/alternative</literal> generiert, da der View sowohl im
    Format <filename>html.erb</filename> als auch
    <filename>text.erb</filename> vorhanden war.</para>
  </section>

  <section xml:id="email_attachments">
    <title xml:id="email_attachments.title">Anhänge (Attachments)</title>

    <indexterm>
      <primary>Attachments</primary>

      <secondary>E-Mail</secondary>
    </indexterm>

    <indexterm>
      <primary>Anhänge</primary>

      <see>Attachments</see>
    </indexterm>

    <para>Anhänge an E-Mails werden auch im Controller definiert.</para>

    <para>Als Beispiel fügen wir in
    <filename>app/mailers/notification.rb</filename> die Rails Grafik
    <filename>app/assets/images/rails.png</filename> einer E-Mail als Anhang
    bei:<programlisting>class Notification &lt; ActionMailer::Base
  default from: "from@example.com"

  def new_account(user)
    @user = user
    <emphasis>attachments['rails.png'] = File.read("#{Rails.root}/app/assets/images/rails.png")</emphasis>
    mail(:to =&gt; user.email,
         :subject =&gt; "The new account #{user.name} is active.")
  end
end
</programlisting></para>

    <section xml:id="email_inline_attachments">
      <title xlink:href="email_inline_attachments.title">Eingebettete Anhänge
      (Inline Attachments)</title>

      <para>Für <foreignphrase xml:lang="en">Inline
      Attachments</foreignphrase> in HTML-E-Mails muss man die Methode
      <methodname>inline</methodname> beim Aufruf von <code>attachments</code>
      benutzen. In unserem Beispielcontroller
      <filename>app/mailers/notification.rb</filename>:<programlisting>class Notification &lt; ActionMailer::Base
  default from: "from@example.com"

  def new_account(user)
    @user = user
    <emphasis>attachments.inline['rails.png'] = File.read("#{Rails.root}/app/assets/images/rails.png")</emphasis>
    mail(:to =&gt; user.email,
         :subject =&gt; "The new account #{user.name} is active.")
  end
end
</programlisting></para>

      <para>In der HTML-E-Mail kann auf den Hash <code>attachments[]</code>
      per <methodname>image_tag</methodname> zugegriffen werden. In unserem
      Beispiel sähe die
      <filename>app/views/notification/new_account.html.erb</filename> so
      aus:<programlisting>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta content="text/html; charset=UTF-8" http-equiv="Content-Type" /&gt;
  &lt;/head&gt;
  &lt;body&gt;
    <emphasis>&lt;%= image_tag attachments['rails.png'].url, :alt =&gt; 'Rails Logo' %&gt;</emphasis>
    &lt;p&gt;Hello &lt;%= @user.name %&gt;,&lt;/p&gt;

    &lt;p&gt;your new account is active.&lt;/p&gt;

    &lt;p&gt;&lt;i&gt;Have a great day!&lt;/i&gt;&lt;/p&gt;
    &lt;p&gt;A Robot&lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;</programlisting></para>
    </section>
  </section>

  <section xml:id="action_mailer_weitere_informationen">
    <title xml:id="action_mailer_weitere_informationen.title">Weitere
    Informationen</title>

    <para>Die Rails Online-Doku hat einen sehr ausführlichen Eintrag zum
    ActionMailer unter <uri
    xlink:href="http://guides.rubyonrails.org/action_mailer_basics.html">http://guides.rubyonrails.org/action_mailer_basics.html</uri>.
    Ryan Bates hat unter <uri
    xlink:href="http://railscasts.com/episodes/206-action-mailer-in-rails-3">http://railscasts.com/episodes/206-action-mailer-in-rails-3</uri>
    einen sehr guten Screencast zu diesem Thema.</para>
  </section>
</chapter>
