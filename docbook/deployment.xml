<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="deployment"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title xml:id="deployment.title">Deployment</title>

  <indexterm>
    <primary>Deployment</primary>
  </indexterm>

  <section>
    <title>Einleitung</title>

    <para>Bis jetzt haben wir immer in der Entwicklungsumgebung gearbeitet.
    Irgendwann kommt natürlich der Fall, das man die erstellte Rails-Anwendung
    auch auf einen Server spielen will.<warning>
        <para>Dieses Howto ist noch nicht fertig. Bitte erst benutzen, wenn
        diese Warnung nicht mehr angezeigt wird.</para>
      </warning></para>
  </section>

  <section>
    <title>Erstellen der Rails-Applikation auf Ihrem
    Entwicklungssystem</title>

    <para>Folgende Schritte müssen Sie auf Ihrem Entwicklungssystem
    ausführen:</para>

    <section>
      <title>rails new blog</title>

      <para>Wir erstellen die Mini-Blog Rail-Applikation:<screen>Stefan-Wintermeyers-MacBook-Air:~ xyz$ <command>rails new blog</command>
[...]
Stefan-Wintermeyers-MacBook-Air:~ xyz$ <command>cd blog</command>
Stefan-Wintermeyers-MacBook-Air:blog xyz$ <command>rails generate scaffold post subject content:text</command>
[...]
Stefan-Wintermeyers-MacBook-Air:blog xyz$ <command>rake db:migrate</command>
==  CreatePosts: migrating ====================================================
-- create_table(:posts)
   -&gt; 0.0015s
==  CreatePosts: migrated (0.0016s) ===========================================

Stefan-Wintermeyers-MacBook-Air:blog xyz$</screen></para>

      <para>Für das Deployment und den Webserver benötigen wir einige Gems.
      Bitte fügen Sie diese Konfiguration in der Datei
      <filename>Gemfile</filename> hinzu:<programlisting><emphasis>group :production do
  # Use MySQL as the database
  gem 'mysql'

  # Use unicorn as the app server
  gem 'unicorn'
end

group :development do
  # Use Capistrano and rvm for deployment
  gem 'capistrano'
  gem 'rvm-capistrano'
end

group :assets do
  gem 'therubyracer', :platforms =&gt; :ruby
end</emphasis></programlisting></para>

      <para>Danach ein <command>bundle install</command> ausführen:<screen>Stefan-Wintermeyers-MacBook-Air:blog xyz$ <command>bundle install</command>
[...]
Stefan-Wintermeyers-MacBook-Air:blog xyz$</screen></para>
    </section>

    <section>
      <title>Production Datenbank einrichten</title>

      <para>In der Datei <filename>config/database.yml</filename> müssen wir
      für das Produktionssystem die Datenbankkonfiguration für die
      MySQL-Datenbank eintragen. Bitte achten Sie darauf das korrekte Passwort
      einzutragen.<programlisting># SQLite version 3.x
#   gem install sqlite3
#
#   Ensure the SQLite 3 gem is defined in your Gemfile
#   gem 'sqlite3'
development:
  adapter: sqlite3
  database: db/development.sqlite3
  pool: 5
  timeout: 5000

# Warning: The database defined as "test" will be erased and
# re-generated from your development database when you run "rake".
# Do not set this db to the same as development or production.
test:
  adapter: sqlite3
  database: db/test.sqlite3
  pool: 5
  timeout: 5000

<emphasis>production:
  adapter: mysql
  encoding: utf8
  database: blog
  username: deployer
  password: IhrLieblingsPasswort</emphasis></programlisting></para>
    </section>

    <section>
      <title>Unicorn einrichten</title>

      <para>Bitte fügen Sie die Konfigurationsdatei
      <filename>config/unicorn.rb</filename> mit folgendem Inhalt
      hinzu:<programlisting>root = "/home/deployer/apps/blog/current"
working_directory root
pid "#{root}/tmp/pids/unicorn.pid"
stderr_path "#{root}/log/unicorn.log"
stdout_path "#{root}/log/unicorn.log"

listen "/tmp/unicorn.blog.sock"
worker_processes 2
timeout 30</programlisting></para>
    </section>

    <section>
      <title>Capistrano einrichten</title>

      <para>Wir richten eine Capistrano Standardkonfiguration ein:<screen>Stefan-Wintermeyers-MacBook-Air:blog xyz$ <command>capify .</command>  
[add] writing './Capfile'
[add] writing './config/deploy.rb'
[done] capified!
Stefan-Wintermeyers-MacBook-Air:blog xyz$</screen></para>

      <para>Danach richten wir die <filename>config/deploy.rb</filename> mit
      folgendem Inhalt ein. Bitte denken Sie daran den Text
      ip.addresse.ihres.servers mit der IP-Addresse Ihres Web-Servers
      auszutauschen!<programlisting>require "bundler/capistrano"
require "rvm/capistrano" 

server "ip.addresse.ihres.servers", :web, :app, :db, primary: true

set :application, "blog"
set :user, "deployer"
set :deploy_to, "/home/#{user}/apps/#{application}"
set :deploy_via, :remote_cache
set :use_sudo, false

set :scm, "git"
set :repository, "git@github.com:wintermeyer/#{application}.git"
set :branch, "master"

default_run_options[:pty] = true
ssh_options[:forward_agent] = true

set :rvm_install_type, :stable
set :rvm_ruby_string, '1.9.3'

# Install RVM
before 'deploy:setup', 'rvm:install_rvm'
# Install Ruby
before 'deploy:setup', 'rvm:install_ruby'

after 'deploy:restart', 'deploy:cleanup'
after 'deploy', 'deploy:migrate'</programlisting></para>

      <para>Und die Datei <filename>Capfile</filename> müssen wir noch wie
      folgt abändern:<programlisting>load 'deploy'
# Uncomment if you are using Rails' asset pipeline
<emphasis>load 'deploy/assets'</emphasis>
Dir['vendor/gems/*/recipes/*.rb','vendor/plugins/*/recipes/*.rb'].each { |plugin| load(plugin) }
load 'config/deploy' # remove this line to skip loading any of the default tasks
</programlisting></para>
    </section>

    <section>
      <title>Github als Repository einrichten</title>

      <para>Bitte legen Sie sich unter <uri
      xlink:href="https://github.com">https://github.com</uri> einen neuen
      Account an oder benutzen Sie einen bereits existierenden Github-Account.
      Legen Sie mit diesem Account ein neues Repository mit dem Namen
      "<code>blog</code>" an.</para>

      <tip>
        <para>Für ein einfacheres Arbeiten empfehle ich Ihnen Ihren SSH Key in
        Ihrem Github-Account unter <uri
        xlink:href="https://github.com/settings/ssh">https://github.com/settings/ssh</uri>
        einzutragen. </para>
      </tip>

      <para>Jetzt können Sie Ihr Projekt commiten und pushen. Bitte tauschen
      Sie dabei <code>ihr_github_account</code> mit Ihrem Github-Account
      aus:<screen>Stefan-Wintermeyers-MacBook-Air:blog xyz$ <command>git init</command>
Initialized empty Git repository in /Users/xyz/blog/.git/
Stefan-Wintermeyers-MacBook-Air:blog xyz$ <command>git add .</command>
Stefan-Wintermeyers-MacBook-Air:blog xyz$ <command>git commit -m 'first commit'</command>
[...]
Stefan-Wintermeyers-MacBook-Air:blog xyz$ <command>git remote add origin git@github.com:ihr_github_account/blog.git</command>
Stefan-Wintermeyers-MacBook-Air:blog xyz$ <command>git push -u origin master</command>
[...]
Stefan-Wintermeyers-MacBook-Air:blog xyz$</screen></para>

      <para>Jetzt ist Ihr Rails-Projekt in einem Github-Repository gehostet
      und kann von Ihnen unter <uri
      xlink:href="https://github.com/ihr_github_account/blog">https://github.com/ihr_github_account/blog</uri>
      eingesehen werden.</para>
    </section>
  </section>

  <section>
    <title>Schritte auf dem Webserver</title>

    <para>Folgende Schritte müssen Sie auf dem Webserver-System
    durchführen.</para>

    <section>
      <title>Installation auf Debian 6</title>

      <para>Bitte loggen Sie sich als <code>root</code> auf dem Debian Server
      ein.</para>

      <para>Als erstes installieren wir den Webserver nginx:<screen>root@debian:~# <command>curl http://nginx.org/keys/nginx_signing.key | apt-key add -</command>
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  1561  100  1561    0     0   3887      0 --:--:-- --:--:-- --:--:--  8819
OK
root@debian:~# <command>echo 'deb http://nginx.org/packages/debian/ squeeze nginx' &gt;&gt; /etc/apt/sources.list</command>
root@debian:~# <command>echo 'deb-src http://nginx.org/packages/debian/ squeeze nginx' &gt;&gt; /etc/apt/sources.list</command>
root@debian:~# <command>apt-get update</command>
[...]
root@debian:~# <command>apt-get -y install nginx</command>
[...]
root@debian:~# </screen></para>

      <para>Für unser Rails-Projekt fügen wir eine neue Konfigurationdatei
      <filename>/etc/nginx/conf.d/blog.conf</filename> mit folgendem Inhalt
      hinzu:<programlisting>upstream unicorn {
  server unix:/tmp/unicorn.blog.sock fail_timeout=0;
}

server {
  listen 80 default deferred;
  # server_name example.com;
  root /home/deployer/apps/blog/current/public;

  location ^~ /assets/ {
    gzip_static on;
    expires max;
    add_header Cache-Control public;
  }

  try_files $uri/index.html $uri @unicorn;
  location @unicorn {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    proxy_pass http://unicorn;
  }

  error_page 500 502 503 504 /500.html;
  client_max_body_size 4G;
  keepalive_timeout 10;
}</programlisting></para>

      <para>Die Default Konfigurationsdatei benennen wir um, damit sie nicht
      mehr ausgeführt wird. Danach starten wir den Webserver neu.<screen>root@debian:~# <command>mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.backup</command>
root@debian:~# <command>/etc/init.d/nginx restart</command>
Restarting nginx: nginx.
root@debian:~# </screen></para>

      <para>Als nächstes installieren wir die Datenbank MySQL. Dabei werden
      Sie nach einem Datenbankpasswort gefragt. Bitte merken Sie sich dieses
      Passwort und geben Sie es später in der Datei
      <filename>config/database.yml</filename> in Ihrem Rails-Projekt
      an.<screen>root@debian:~# <command>apt-get -y install mysql-server libmysql-ruby libmysqlclient-dev</command>
[...]
root@debian:~# </screen></para>

      <para>Wir erstellen einen neuen User mit dem Namen
      <code>deployer</code>:<screen>root@debian:~# <command>adduser deployer</command>
Lege Benutzer »deployer« an ...
Lege neue Gruppe »deployer« (1002) an ...
Lege neuen Benutzer »deployer« (1002) mit Gruppe »deployer« an ...
Erstelle Home-Verzeichnis »/home/deployer« ...
Kopiere Dateien aus »/etc/skel« ...
Geben Sie ein neues UNIX-Passwort ein: 
Geben Sie das neue UNIX-Passwort erneut ein: 
passwd: Passwort erfolgreich geändert
Benutzerinformationen für deployer werden geändert.
Geben Sie einen neuen Wert an oder drücken Sie ENTER für den Standardwert
 Vollständiger Name []: Deployer
 Raumnummer []: 
 Telefon geschäftlich []: 
 Telefon privat []: 
 Sonstiges []: 
Sind die Informationen korrekt? [J/n] J
root@debian:~#</screen></para>

      <para>Für diesen User erstellen wir einen public SSH-Key. Für ein
      einfacheres Deployment verwenden Sie an dieser Stelle bitte eine leere
      (also keine) Passphrase.<screen>root@debian:~# <command>su - deployer</command>
deployer@debian:~$ <command>ssh-keygen</command>
Generating public/private rsa key pair.
Enter file in which to save the key (/home/deployer/.ssh/id_rsa): 
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /home/deployer/.ssh/id_rsa.
Your public key has been saved in /home/deployer/.ssh/id_rsa.pub.
The key fingerprint is:
ba:11:90:2a:e3:8f:5b:2e:70:99:50:86:a1:9a:2c:b7 deployer@debian
The key's randomart image is:
+--[ RSA 2048]----+
|.o               |
|o o  .           |
|.o  o            |
|+. . .           |
|*ooo  . S        |
|+++.   o         |
|.oE.  o          |
| .=    o         |
| ooo  .          |
+-----------------+
deployer@debian:~$ <command>cat .ssh/id_rsa.pub</command> 
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDJEGixOcPRdBMry7PPG/Rgla50EM+JPKGYGD/yJ8v7bdrfT68t2/eVbj6+YebWh1tRebE3qqouqmZjIlocr1j67SmfXZ/sswBT/pXOhP89JtHPMolx7rUQ8wQF3aDrnVDJG0gdvRm212vN2bou3N5dzhekmWmbS3R0ZGNM9ZgTw8rhTOd1M2QVTzyV1i1PehoFxOu1WIc1gN5C42zihbJ6fGgVb45WeKzXSi6bQ6PMKD1gAMJpXHPvKLhi0wLN0wNOJwa6BKR3pmgICSBuoziAhhCS/7gBDJnqRmx1zax/1CShJD3QEGHvofA9okYuYVqyrJi1hdF8ZgMnQCb31I21 deployer@debian
deployer@debian:~$</screen></para>

      <para>Der erzeugte Key liegt in der Datei
      <filename>/home/deployer/.ssh/id_rsa.pub</filename>. </para>

      <important>
        <para>Bitte loggen Sie sich jetzt in Ihren Github-Account ein und
        fügen im Admin Bereich Ihres Github-Projektes diesen Key bei Deploy
        Keys hinzu. Siehe <uri
        xlink:href="https://github.com/ihr_github_account/blog/admin/keys">https://github.com/ihr_github_account/blog/admin/keys</uri></para>
      </important>

      <para>Danach connecten Sie sich bitte auf der Console einmal mit dem
      Github SSH-Server und bestätigen Sie die "Are you sure you want to
      continue connection (yes/no)?" Frage mit einem yes. <screen>deployer@debian:~$ <command>ssh git@github.com</command>
The authenticity of host 'github.com (207.97.227.239)' can't be established.
RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
Are you sure you want to continue connecting (yes/no)? <command>yes</command>
Warning: Permanently added 'github.com,207.97.227.239' (RSA) to the list of known hosts.
PTY allocation request failed on channel 0
Hi ihr_github_account/blog! You've successfully authenticated, but GitHub does not provide shell access.
                 Connection to github.com closed.
deployer@debian:~$</screen></para>

      <para>Jetzt machen wir wieder als <code>root</code> weiter:<screen>deployer@debian:~$ <command>exit</command>
Abgemeldet
root@debian:~#</screen></para>

      <para>In der MySQL-Datenbank müssen wir noch die Database
      <code>blog</code> mit Zugriffsrechten für den lokalen Benutzer
      <code>deployer</code> anlegen:<screen>deployer@debian:~$ <command>mysql -u root -p</command>
Enter password: 
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 40
Server version: 5.1.63-0+squeeze1 (Debian)

Copyright (c) 2000, 2011, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql&gt; <command>CREATE DATABASE blog;</command>
Query OK, 1 row affected (0.00 sec)

mysql&gt; <command>GRANT USAGE ON *.* TO deployer@localhost IDENTIFIED BY 'IhrLieblingsPasswort';</command>
Query OK, 0 rows affected (0.00 sec)

mysql&gt; <command>GRANT ALL PRIVILEGES ON blog.* TO deployer@localhost;</command>
Query OK, 0 rows affected (0.00 sec)

mysql&gt; <command>exit</command>
Bye
deployer@debian:~$</screen></para>

      <para>Für Unicorn benötigen wir noch ein Init-Script. Bitte legen Sie
      die Datei <filename>/etc/init.d/unicorn_blog</filename> mit folgendem
      Inhalt an:<programlisting>#!/bin/sh
set -e

# Feel free to change any of the following variables for your app:
TIMEOUT=${TIMEOUT-60}
APP_ROOT=/home/deployer/apps/blog/current
PID=$APP_ROOT/tmp/pids/unicorn.pid
CMD="cd $APP_ROOT; bundle exec unicorn -D -c $APP_ROOT/config/unicorn.rb -E production"
AS_USER=deployer
set -u

OLD_PIN="$PID.oldbin"

sig () {
  test -s "$PID" &amp;&amp; kill -$1 `cat $PID`
}

oldsig () {
  test -s $OLD_PIN &amp;&amp; kill -$1 `cat $OLD_PIN`
}

run () {
  if [ "$(id -un)" = "$AS_USER" ]; then
    eval $1
  else
    su -c "$1" - $AS_USER
  fi
}

case "$1" in
start)
  sig 0 &amp;&amp; echo &gt;&amp;2 "Already running" &amp;&amp; exit 0
  run "$CMD"
  ;;
stop)
  sig QUIT &amp;&amp; exit 0
  echo &gt;&amp;2 "Not running"
  ;;
force-stop)
  sig TERM &amp;&amp; exit 0
  echo &gt;&amp;2 "Not running"
  ;;
restart|reload)
  sig HUP &amp;&amp; echo reloaded OK &amp;&amp; exit 0
  echo &gt;&amp;2 "Couldn't reload, starting '$CMD' instead"
  run "$CMD"
  ;;
upgrade)
  if sig USR2 &amp;&amp; sleep 2 &amp;&amp; sig 0 &amp;&amp; oldsig QUIT
  then
    n=$TIMEOUT
    while test -s $OLD_PIN &amp;&amp; test $n -ge 0
    do
      printf '.' &amp;&amp; sleep 1 &amp;&amp; n=$(( $n - 1 ))
    done
    echo

    if test $n -lt 0 &amp;&amp; test -s $OLD_PIN
    then
      echo &gt;&amp;2 "$OLD_PIN still exists after $TIMEOUT seconds"
      exit 1
    fi
    exit 0
  fi
  echo &gt;&amp;2 "Couldn't upgrade, starting '$CMD' instead"
  run "$CMD"
  ;;
reopen-logs)
  sig USR1
  ;;
*)
  echo &gt;&amp;2 "Usage: $0 &lt;start|stop|restart|upgrade|force-stop|reopen-logs&gt;"
  exit 1
  ;;
esac</programlisting></para>

      <para>Dann müssen wir dieses Init-Script noch scharf schalten:<screen>root@debian:~# <command>chmod a+x /etc/init.d/unicorn_blog</command> 
root@debian:~# <command>update-rc.d unicorn_blog defaults</command>
update-rc.d: using dependency based boot sequencing
root@debian:~#</screen></para>

      <para>Jetzt haben wir alle notwendigen Schritte auf dem Webserver-System
      ausgeführt und können im Entwicklungssystem weiter machen.</para>
    </section>
  </section>

  <section>
    <title>Deployen</title>

    <para>Als erstes richten wir mit <command>cap deploy:setup</command> das
    Zielsystem ein. Wenn Sie Ihren SSH-Key nicht auf dem Zielsystem abgelegt
    haben, werden Sie vom Skript nach dem Passwort des Users
    <code>deployer</code> gefragt. Je nach Anbindung und CPU-Power kann dieser
    initialle Setup-Schritt länger dauern.<screen>Stefan-Wintermeyers-MacBook-Air:blog xyz$ <command>cap deploy:setup</command>
  * executing `deploy:setup'
    triggering before callbacks for `deploy:setup'
  * executing `rvm:install_rvm'
  * executing "curl -L get.rvm.io |  bash -s stable --path $HOME/.rvm/"

[...]

  * executing "chmod g+w /home/deployer/apps/blog /home/deployer/apps/blog/releases /home/deployer/apps/blog/shared /home/deployer/apps/blog/shared/system /home/deployer/apps/blog/shared/log /home/deployer/apps/blog/shared/pids"
    servers: ["172.16.14.130"]
    [172.16.14.130] executing command
    command finished in 1211ms
Stefan-Wintermeyers-MacBook-Air:blog xyz$ </screen></para>

    <para></para>

    <para>Rest kommt noch. ...</para>

    <para></para>
  </section>

  <section>
    <title>Heroku</title>

    <para></para>
  </section>

  <section>
    <title>Engineyard</title>

    <para></para>
  </section>
</chapter>
