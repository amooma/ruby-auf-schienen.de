<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xml:id="activerecord_datensaetze_hinzufuegen"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title xml:id="activerecord_datensaetze_hinzufuegen.title">Datensätze
  hinzufügen</title>

  <para>Eigentlich würde ich Ihnen ja gerne erst zeigen, wie man sich
  Datensätze anzeigen lassen kann, aber da haben wir natürlich ein
  Henne-Ei-Problem. Deshalb jetzt erst mal das Anlegen von neuen Datensätzen
  mit <classname>ActiveRecord</classname>.</para>

  <section xml:id="activerecord_create">
    <title xml:id="activerecord_create.title">create</title>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>Methoden</secondary>

      <tertiary>create()</tertiary>
    </indexterm>

    <para>Die am häufigsten zum Anlegen von neuen Datensätzen benutzte Methode
    ist <methodname>create</methodname>. Wie immer gibt es dazu eine eigene
    Hilfeseite im System:<screen>MacBook:europe xyz$ <command>ri -T ActiveRecord::Persistence::ClassMethods#create</command>
ActiveRecord::Persistence::ClassMethods#create

(from gem activerecord-3.2.8)
------------------------------------------------------------------------------
  create(attributes = nil, options = {}, &amp;block)

------------------------------------------------------------------------------

Creates an object (or multiple objects) and saves it to the database, if
validations pass. The resulting object is returned whether the object was
saved successfully to the database or not.

The attributes parameter can be either be a Hash or an Array of Hashes.
These Hashes describe the attributes on the objects that are to be created.

create respects mass-assignment security and accepts either :as
or :without_protection options in the options parameter.

Examples
  # Create a single new object
  User.create(:first_name =&gt; 'Jamie')

  # Create a single new object using the :admin mass-assignment security role
  User.create({ :first_name =&gt; 'Jamie', :is_admin =&gt; true }, :as =&gt; :admin)

  # Create a single new object bypassing mass-assignment security
  User.create({ :first_name =&gt; 'Jamie', :is_admin =&gt; true }, :without_protection =&gt; true)

  # Create an Array of new objects
  User.create([{ :first_name =&gt; 'Jamie' }, { :first_name =&gt; 'Jeremy' }])

  # Create a single object and pass it into a block to set other attributes.
  User.create(:first_name =&gt; 'Jamie') do |u|
    u.is_admin = false
  end

  # Creating an Array of new objects using a block, where the block is executed for each object:
  User.create([{ :first_name =&gt; 'Jamie' }, { :first_name =&gt; 'Jeremy' }]) do |u|
    u.is_admin = false
  end



MacBook:europe xyz$</screen></para>

    <para>Super, direkt mit Beispielen! Was will man mehr? Versuchen wir mal
    so in der <foreignphrase xml:lang="en">Console</foreignphrase> ein Land
    anzulegen:<screen>MacBook:europe xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.3)
1.9.3p194 :001 &gt; <command>Country</command>
 =&gt; Country(id: integer, name: string, population: integer, created_at: datetime, updated_at: datetime) 
1.9.3p194 :002 &gt; <command>Country.create(:name =&gt; 'Deutschland', :population =&gt; 81831000)</command> 
   (0.1ms)  begin transaction
  SQL (39.9ms)  INSERT INTO "countries" ("created_at", "name", "population", "updated_at") VALUES (?, ?, ?, ?)  [["created_at", Thu, 26 Apr 2012 10:26:38 UTC +00:00], ["name", "Deutschland"], ["population", 81831000], ["updated_at", Thu, 26 Apr 2012 10:26:38 UTC +00:00]]
   (1.5ms)  commit transaction
 =&gt; #&lt;Country id: 1, name: "Deutschland", population: 81831000, created_at: "2012-04-26 10:26:38", updated_at: "2012-04-26 10:26:38"&gt; 
1.9.3p194 :003 &gt; <command>exit</command>
MacBook:europe xyz$</screen></para>

    <para>AcitveRecord speichert den neuen Datensatz und gibt uns in der
    Development Umgebung auch den ausgeführten SQL-Befehl aus. Um aber ganz
    sicher zu gehen schauen wir kurz mit dem Kommandozeilen-Client
    <literal>sqlite3</literal> nach:</para>

    <para><screen>MacBook:europe xyz$ <command>sqlite3 db/development.sqlite3</command> 
SQLite version 3.7.7 2011-06-25 16:35:41
Enter ".help" for instructions
Enter SQL statements terminated with a ";"
sqlite&gt; <command>SELECT * FROM countries;</command>
1|Deutschland|81831000|2012-04-26 10:26:38.533290|2012-04-26 10:26:38.533290
sqlite&gt; <command>.exit</command>
MacBook:europe xyz$</screen></para>

    <section>
      <title>Syntax</title>

      <para>Die <methodname>create</methodname> Methode verdaut eine Reihe von
      unterschiedlichen Syntax-Konstrukten. Wenn Sie einen einzelnen Datensatz
      anlegen wollen, so können Sie dies mit und ohne {}-Klammern innerhalb
      der ()-Klammern machen:<itemizedlist>
          <listitem>
            <para><code>Country.create(:name =&gt; 'Deutschland', :population
            =&gt; 81831000)</code></para>
          </listitem>

          <listitem>
            <para><code>Country.create( {:name =&gt; 'Deutschland',
            :population =&gt; 81831000} )</code></para>
          </listitem>
        </itemizedlist></para>

      <para>Ebenfalls können die Attributes unterschiedlich beschrieben
      werden:<itemizedlist>
          <listitem>
            <para><code>Country.create(:name =&gt; 'Deutschland', :population
            =&gt; 81831000)</code></para>
          </listitem>

          <listitem>
            <para><code>Country.create('name' =&gt; 'Deutschland',
            'population' =&gt; 81831000)</code></para>
          </listitem>

          <listitem>
            <para><code>Country.create( name: 'Deutschland', population:
            81831000 )</code></para>
          </listitem>
        </itemizedlist></para>

      <para>Sie können auch einen Array von Hashes an
      <methodname>create</methodname> übergeben und damit mehrere Datensätze
      auf einmal erstellen:<programlisting>Country.create( [ {:name =&gt; 'Deutschland', :population =&gt; 81831000}, {"name"=&gt;"Frankreich", "population"=&gt;65447374} ] )</programlisting></para>
    </section>
  </section>

  <section xml:id="activerecord_new">
    <title xml:id="activerecord_new.title">new</title>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>Methoden</secondary>

      <tertiary>new()</tertiary>
    </indexterm>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>Methoden</secondary>

      <tertiary>save()</tertiary>
    </indexterm>

    <para>Neben <methodname>create</methodname> gibt es auch
    <methodname>new</methodname>. Allerdings muss ein mit
    <methodname>new</methodname> erzeugtes Objekt extra mit
    <methodname>save</methodname> gespeichert werden (was Vor- und Nachteile
    hat):<screen>MacBook:europe xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.3)
1.9.3p194 :001 &gt; <command>frankreich = Country.new</command>
 =&gt; #&lt;Country id: nil, name: nil, population: nil, created_at: nil, updated_at: nil&gt; 
1.9.3p194 :002 &gt; <command>frankreich.name = 'Frankreich'</command>
 =&gt; "Frankreich" 
1.9.3p194 :003 &gt; <command>frankreich.population = 65447374</command>
 =&gt; 65447374 
1.9.3p194 :004 &gt; <command>frankreich.save</command>
   (0.1ms)  begin transaction
  SQL (5.6ms)  INSERT INTO "countries" ("created_at", "name", "population", "updated_at") VALUES (?, ?, ?, ?)  [["created_at", Thu, 26 Apr 2012 10:41:54 UTC +00:00], ["name", "Frankreich"], ["population", 65447374], ["updated_at", Thu, 26 Apr 2012 10:41:54 UTC +00:00]]
   (4.5ms)  commit transaction
 =&gt; true 
1.9.3p194 :005 &gt; <command>frankreich</command>
 =&gt; #&lt;Country id: 2, name: "Frankreich", population: 65447374, created_at: "2012-04-26 10:41:54", updated_at: "2012-04-26 10:41:54"&gt; 
1.9.3p194 :006 &gt; <command>exit</command>
MacBook:europe xyz$</screen></para>

    <para>Sie können der Methode <methodname>new</methodname> wie
    <methodname>create</methodname> auch direkt Parameter für den neuen
    Datensatz übergeben:<screen>MacBook:europe xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.3)
1.9.3p194 :001 &gt; <command>belgien = Country.new(:name =&gt; 'Belgien', :population =&gt; 10839905)</command>
 =&gt; #&lt;Country id: nil, name: "Belgien", population: 10839905, created_at: nil, updated_at: nil&gt; 
1.9.3p194 :002 &gt; <command>belgien.save</command>
   (0.2ms)  begin transaction
  SQL (34.8ms)  INSERT INTO "countries" ("created_at", "name", "population", "updated_at") VALUES (?, ?, ?, ?)  [["created_at", Thu, 26 Apr 2012 10:44:49 UTC +00:00], ["name", "Belgien"], ["population", 10839905], ["updated_at", Thu, 26 Apr 2012 10:44:49 UTC +00:00]]
   (2.5ms)  commit transaction
 =&gt; true 
1.9.3p194 :003 &gt; <command>exit</command>
MacBook:europe xyz$ </screen></para>
  </section>

  <section xml:id="activerecord_new_record">
    <title xml:id="activerecord_new_record.title">new_record?</title>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>Methoden</secondary>

      <tertiary>new_record?()</tertiary>
    </indexterm>

    <para>Mit der Methode <methodname>new_record?</methodname> können Sie sich
    anzeigen lassen, ob ein Datensatz bereits gespeichert wurde oder nicht.
    Wurde ein neues Objekt mit <methodname>new</methodname> erstellt und noch
    nicht abgespeichert, dann ist das Ergebnis von
    <methodname>new_record?</methodname> <literal>true</literal>. Nach einem
    <methodname>save</methodname> ist es <literal>false</literal>.</para>

    <para>Beispiel:<screen>MacBook:europe xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.3)
1.9.3p194 :001 &gt; <command>niederlande = Country.new(:name =&gt; 'Niederlande', :population =&gt; 16680000)</command>
 =&gt; #&lt;Country id: nil, name: "Niederlande", population: 16680000, created_at: nil, updated_at: nil&gt; 
1.9.3p194 :002 &gt; <command>niederlande.new_record?</command>
 =&gt; true 
1.9.3p194 :003 &gt; <command>niederlande.save</command>
   (0.2ms)  begin transaction
  SQL (34.9ms)  INSERT INTO "countries" ("created_at", "name", "population", "updated_at") VALUES (?, ?, ?, ?)  [["created_at", Thu, 26 Apr 2012 10:47:23 UTC +00:00], ["name", "Niederlande"], ["population", 16680000], ["updated_at", Thu, 26 Apr 2012 10:47:23 UTC +00:00]]
   (3.8ms)  commit transaction
 =&gt; true 
1.9.3p194 :004 &gt; <command>niederlande.new_record?</command>
 =&gt; false 
1.9.3p194 :005 &gt; <command>exit</command>
MacBook:europe xyz$</screen><tip>
        <para>Bei bereits bestehenden Datensätzen können Sie eine Veränderung
        auch mit der Methode <methodname>changed?</methodname> überprüfen
        (siehe <xref linkend="activerecord_changed"/>).</para>
      </tip></para>
  </section>
</section>
