<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="erste_schritte_mit_rails" xml:lang="de"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title xml:id="erste_schritte_mit_rails.title">Erste Schritte mit
  Rails</title>

  <info>
    <collab>
      <person>
        <personname><firstname>Philipp</firstname><surname>Kempgen</surname></personname>
      </person>
    </collab>
  </info>

  <indexterm>
    <primary>Rails</primary>

    <secondary>Einleitung</secondary>
  </indexterm>

  <indexterm>
    <primary>Ruby on Rails</primary>

    <see>Rails</see>
  </indexterm>

  <section xml:id="erste-schritte-mit-rails-einleitung">
    <title>Einleitung</title>

    <para>Nachdem Sie sich in <xref linkend="ruby-grundlagen" /> mühsam in die
    Ruby-Grundlagen eingelesen haben, können wir jetzt spannender
    weitermachen. In diesem Kapitel starten wir ein erstes Rails-Projekt und
    arbeiten uns damit Stück für Stück in die Materie ein.</para>

    <para>Auch in diesem Kapitel wird es manchmal hoppla-hopp zu gehen. Wir
    stoßen auf typische Henne-Ei-Probleme wir zum Beispiel: <quote>Wie erkläre
    ich MVC (Model-View-Controller)?</quote>. Ich habe mich für den Ansatz
    <quote>Wir fangen mal an und erklären bei der Arbeit</quote>
    entschieden.</para>

    <section xml:id="arbeits-umgebung-development">
      <title>Arbeits-Umgebung (Development)</title>

      <para>Rails kennt drei verschiedene Arbeits-Umgebungen (<indexterm>
          <primary>Environments</primary>
        </indexterm><indexterm>
          <primary>Rails</primary>

          <secondary>Environments</secondary>

          <see>Environments</see>
        </indexterm><foreignphrase
      xml:lang="en">Environments</foreignphrase>):<itemizedlist>
          <listitem>
            <para><foreignphrase
            xml:lang="en">Development</foreignphrase><indexterm>
                <primary>Development</primary>

                <secondary>Environment</secondary>
              </indexterm></para>
          </listitem>

          <listitem>
            <para><foreignphrase
            xml:lang="en">Testing</foreignphrase><indexterm>
                <primary>Testing</primary>

                <secondary>Environment</secondary>
              </indexterm></para>
          </listitem>

          <listitem>
            <para><foreignphrase
            xml:lang="en">Production</foreignphrase><indexterm>
                <primary>Production</primary>

                <secondary>Environment</secondary>
              </indexterm></para>
          </listitem>
        </itemizedlist></para>

      <para>Wir arbeiten in diesem Kapitel nur mit der Development-Umgebung.
      Sobald Sie ein besseres Gefühl für Rails bekommen haben beginnen wir mit
      Tests und benötigen dafür die entsprechende Umgebung (dort wird z.B.
      beim Start eines Tests die Test-Datenbank neu gefüllt und danach
      gelöscht). Später erkläre ich Ihnen dann die verschiedenen Szenarien wie
      Sie Ihre Rails-Applikation aus der Development-Umgebung in die
      Production-Umgebung ausrollen können.</para>

      <para>Die Development-Umgebung bringt bis auf einen Editor und einen
      Web-Browser alles mit, was Sie zum Entwickeln benötigen. So müssen Sie
      nicht extra einen Web-Server installieren, sondern können den
      eingebauten Rails-Web-Server benutzen. Der besticht nicht durch extreme
      Performance, aber das benötigen wir bei der Entwicklung ja auch nicht.
      Später kann man dann auf große Web-Server wie
      <application>Apache</application> umsteigen. Das gleiche gilt für die
      Datenbank.</para>

      <para>Um in der Development-Umgebung zu arbeiten, müssen Sie erst mal
      nichts verändern. Alle Befehle arbeiten per Default in der
      Development-Umgebung.</para>

      <section xml:id="sqlite3_datenbank_default">
        <title>SQLite-3-Datenbank</title>

        <indexterm>
          <primary>SQLite</primary>
        </indexterm>

        <para>Auch bei der Datenbank geht es in diesem Kapitel nicht um
        optimale Performance, sondern um einen einfachen Einstieg. Deshalb
        benutzen wir die SQLite-3-Datenbank. Dafür haben Sie bereits alles
        fertig installiert und müssen sich keinen Kopf machen. Später erkläre
        ich Ihnen dann wie Sie andere Datenbank (z.B. MySQL) ansteuern
        können.</para>
      </section>
    </section>

    <section xml:id="warum_english">
      <title xml:id="warum_english.title">Warum alles auf Englisch?</title>

      <para>Ganz tief im Herzen liebt Rails die englische Sprache. Das ist
      fast ein wenig ironisch, weil der Erfinder David Heinemeier Hansson
      (<quote>DHH</quote>) ja aus Dänemark stammt (er lebt und arbeitet heute
      in Chicago).</para>

      <para>Rails' Liebe zur englischen Sprache muss man akzeptieren und
      sollte sogar versuchen sie zu übernehmen. Vieles wird dann einfacher und
      logischer. Ein Großteil des Codes ist dann fast normal zu lesen.
      <indexterm>
          <primary>Inflections</primary>
        </indexterm><indexterm>
          <primary>Inflector</primary>

          <see>Inflections</see>
        </indexterm><indexterm>
          <primary>Flexion</primary>

          <see>Inflections</see>
        </indexterm><indexterm>
          <primary>Pluralization</primary>

          <see>Inflections</see>
        </indexterm><indexterm>
          <primary>Singularization</primary>

          <see>Inflections</see>
        </indexterm>So verwenden sehr viele Mechanismen automagisch Plural
      oder Singular von englischen Wörtern. Wenn man sich damit anfreundet
      Datenbankfelder und -tabellen mit englischen Begriffen zu benennen, dann
      kann man die ganze Macht dieser Magie ausnutzen. Diesen Mechanismus
      nennt man <code>Inflector</code> <footnote>
          <para>siehe <uri
          xlink:href="http://api.rubyonrails.org/classes/ActiveSupport/Inflector.html">http://api.rubyonrails.org/classes/ActiveSupport/Inflector.html</uri></para>
        </footnote> oder <foreignphrase
      xml:lang="en">Inflections</foreignphrase> (Beugungen / Flexionen
      <footnote>
          <para>siehe <uri
          xlink:href="http://de.wikipedia.org/wiki/Flexion">http://de.wikipedia.org/wiki/Flexion</uri></para>
        </footnote>).</para>

      <para>Im Buch werde ich für Variablen, Klassen und Methoden englische
      Namen verwenden. Die Kommentare werde ich auf Deutsch schreiben. Falls
      Sie bei internationalen Projekten mitmachen sollten Sie logischerweise
      auch die Kommentare auf Englisch schreiben. Ja, ja, … gut geschriebener
      Code braucht keine Kommentare. ;-)</para>
    </section>
  </section>

  <section xml:id="statische_webseiten">
    <title xml:id="statische_webseiten.title">Statische Inhalte (HTML- und
    Grafik-Dateien)</title>

    <para>Jeder der diesen Text liest wird sich darüber im Klaren sein, dass
    man mit Rails irgendwie Webseiten ausliefern kann. Die Frage ist nur wie.
    Legen wir erst mal eine neues Railsprojekte an.</para>

    <section xml:id="rails-projekt-anlegen">
      <title>Rails-Projekt anlegen</title>

      <indexterm>
        <primary>Rails</primary>

        <secondary>Projekt anlegen</secondary>
      </indexterm>

      <para>Bevor wir hier überhaupt mit dem Allereinfachsten beginnen,
      überprüfen Sie bitte, ob Sie eine Ruby-Version 1.9.2 einsetzen:<screen>stefan@swmbp 0 1.9.2-p0 ~$ <command>ruby -v</command>
ruby 1.9.2p0 (2010-08-18 revision 29036) [x86_64-darwin10.4.0]
</screen></para>

      <para>Und als nächstes überprüfen wir, ob auch Rails 3.0 oder höher
      installiert ist:<screen>stefan@swmbp 0 1.9.2-p0 ~$ <command>rails -v</command>
Rails 3.0.0
</screen></para>

      <para>Das sieht gut aus. Falls Sie eine ältere Ruby- oder Rails-Version
      installiert haben, dann installieren Sie bitte vor dem Weiterlesen die
      aktuelle Version (siehe <xref
      linkend="installation-und-versionsauswahl" />).</para>

      <para>Jetzt erstellen wir erst mal ein neues Rails-Projekt mit dem Namen
      <literal>testproject</literal>. Da Ruby on Rails ein Framework ist,
      müssen wir erst mal die entsprechende Verzeichnisstruktur und die
      Grundkonfiguration inkl. einiger Skripte einrichten. Das geht aber mit
      dem Befehl <command>rails new testproject</command> ratz-fatz:<screen>stefan@swmbp 0 1.9.2-p0 ~$ <command>rails new testproject</command>
      create  
      create  README
      create  Rakefile
      create  config.ru
      create  .gitignore
      create  Gemfile
      create  app
      create  app/controllers/application_controller.rb
      create  app/helpers/application_helper.rb
      create  app/views/layouts/application.html.erb
      create  app/mailers
      create  app/models
      create  config
      create  config/routes.rb
      create  config/application.rb
      create  config/environment.rb
      create  config/environments
      create  config/environments/development.rb
      create  config/environments/production.rb
      create  config/environments/test.rb
      create  config/initializers
      create  config/initializers/backtrace_silencers.rb
      create  config/initializers/inflections.rb
      create  config/initializers/mime_types.rb
      create  config/initializers/secret_token.rb
      create  config/initializers/session_store.rb
      create  config/locales
      create  config/locales/en.yml
      create  config/boot.rb
      create  config/database.yml
      create  db
      create  db/seeds.rb
      create  doc
      create  doc/README_FOR_APP
      create  lib
      create  lib/tasks
      create  lib/tasks/.gitkeep
      create  log
      create  log/server.log
      create  log/production.log
      create  log/development.log
      create  log/test.log
      create  public
      create  public/404.html
      create  public/422.html
      create  public/500.html
      create  public/favicon.ico
      create  public/index.html
      create  public/robots.txt
      create  public/images
      create  public/images/rails.png
      create  public/stylesheets
      create  public/stylesheets/.gitkeep
      create  public/javascripts
      create  public/javascripts/application.js
      create  public/javascripts/controls.js
      create  public/javascripts/dragdrop.js
      create  public/javascripts/effects.js
      create  public/javascripts/prototype.js
      create  public/javascripts/rails.js
      create  script
      create  script/rails
      create  test
      create  test/performance/browsing_test.rb
      create  test/test_helper.rb
      create  test/fixtures
      create  test/functional
      create  test/integration
      create  test/unit
      create  tmp
      create  tmp/sessions
      create  tmp/sockets
      create  tmp/cache
      create  tmp/pids
      create  vendor/plugins
      create  vendor/plugins/.gitkeep
stefan@swmbp 0 1.9.2-p0 ~$ </screen></para>

      <para><indexterm>
          <primary>bundle</primary>
        </indexterm><indexterm>
          <primary>bundler</primary>
        </indexterm><indexterm>
          <primary>Gems</primary>
        </indexterm>Als erstes führen wir jetzt <command>bundle
      install</command> aus und stellen damit dem Rails-Projekt alle
      benötigten <foreignphrase xml:lang="en">Gems</foreignphrase> zur
      Verfügung. Ein <foreignphrase xml:lang="en">Gem</foreignphrase> ist eine
      Art Softwarebibliothek. Man kann damit bestimmte Funktionalitäten fix
      und fertig einbinden ohne das Rad neu erfinden zu müssen.<important>
          <para>Es ist völlig egal, ob Sie die entsprechenden Gems schon auf
          Ihrem System installiert haben oder nicht. Sie müssen
          <emphasis>immer</emphasis> <command>bundle install</command> in
          ihrem jeweiligen Rails-Projekt ausführen! Am besten direkt ins Hirn
          brennen: Nach <command>rails new
          <replaceable>projectname</replaceable></command> kommt immer
          <command>cd <replaceable>projectname</replaceable> &amp;&amp; bundle
          install</command>!</para>
        </important><screen>stefan@swmbp 0 1.9.2-p0 ~$ <command>cd testproject</command>
stefan@swmbp 0 1.9.2-p0 testproject$ <command>bundle install</command>
Fetching source index for http://rubygems.org/
Using rake (0.8.7) 
Using abstract (1.0.0) 
Using activesupport (3.0.0) 
Using builder (2.1.2) 
Using i18n (0.4.1) 
Using activemodel (3.0.0) 
Using erubis (2.6.6) 
Using rack (1.2.1) 
Installing rack-mount (0.6.13) 
Using rack-test (0.5.4) 
Using tzinfo (0.3.23) 
Using actionpack (3.0.0) 
Using mime-types (1.16) 
Using polyglot (0.3.1) 
Using treetop (1.4.8) 
Using mail (2.2.5) 
Using actionmailer (3.0.0) 
Using arel (1.0.1) 
Using activerecord (3.0.0) 
Using activeresource (3.0.0) 
Using bundler (1.0.0) 
Using thor (0.14.0) 
Using railties (3.0.0) 
Using rails (3.0.0) 
Using sqlite3-ruby (1.3.1) 
Your bundle is complete! Use `bundle show [gemname]` to see where a bundled gem is installed.

Your bundle was installed to `/Users/stefan/.rvm/gems/ruby-1.9.2-p0`
stefan@swmbp 0 1.9.2-p0 testproject$ </screen></para>

      <para><indexterm>
          <primary>Webrick</primary>
        </indexterm><indexterm>
          <primary>Web-Server</primary>

          <secondary>mitgelieferter</secondary>
        </indexterm>Als nächstes prüfen wir, ob die neue Rails-Applikation
      funktioniert. Dazu starten wir den mitgelieferten kleinen
      Web-Server.<note>
          <para>Nein, keine Angst. Das ist nicht der Web-Server, mit dem wir
          später auch produktiv gehen. Aber zum Entwickeln ist diese Variante
          sehr praktisch.</para>
        </note><note>
          <para>Bei verschiedenen Betriebssystemen (z.B. Mac OS X) erscheint
          beim ersten Starten einer Rails-Applikation – je nach
          Firewall-Einstellung – ein Fenster, das Sie fragt, ob die Firewall
          die entsprechende Verbindung erlauben soll. Da wir lokal arbeiten
          können Sie das mit ruhigen Gewissen bejahen.</para>
        </note><screen>stefan@swmbp 0 1.9.2-p0 testproject$ <command>rails server</command>
=&gt; Booting WEBrick
=&gt; Rails 3.0.0 application starting in development on http://0.0.0.0:3000
=&gt; Call with -d to detach
=&gt; Ctrl-C to shutdown server
[2010-09-01 09:39:58] INFO  WEBrick 1.3.1
[2010-09-01 09:39:58] INFO  ruby 1.9.2 (2010-08-18) [x86_64-darwin10.4.0]
[2010-09-01 09:39:58] INFO  WEBrick::HTTPServer#start: pid=40688 port=3000

</screen></para>

      <para>Der Start der Rails-Applikation sieht gut aus. Er sagt
      uns:<screen>=&gt; Rails 3.0.0 application starting in development on http://0.0.0.0:3000</screen></para>

      <para>Dann rufen wir doch mal genau diese URL (<uri
      xlink:href="http://0.0.0.0:3000">http://0.0.0.0:3000</uri>) im
      Web-Browser auf.<screenshot>
          <info>
            <title>Default Index-Seite in einem frischen
            Rails-Projekt.</title>
          </info>

          <mediaobject>
            <imageobject>
              <imagedata fileref="screenshots/virgin_rails_app.jpg"></imagedata>
            </imageobject>

            <textobject>
              <simpara>Welcome aboard</simpara>

              <simpara>You're riding Ruby on Rails!</simpara>

              <para>…</para>
            </textobject>
          </mediaobject>
        </screenshot></para>

      <para>Sieht gut aus. Rails scheint zu funktionieren. Wenn wir jetzt auf
      den Link <quote><foreignphrase xml:lang="en">About your application's
      environment</foreignphrase></quote> klicken erscheint eine Aufstellung
      der aktuellen Umgebung.<screenshot>
          <info>
            <title>Auflistung der Start-Umgebung der
            Rails-Applikation.</title>
          </info>

          <mediaobject>
            <imageobject>
              <imagedata fileref="screenshots/virgin_rails_app_env_info.jpg"></imagedata>
            </imageobject>
          </mediaobject>
        </screenshot></para>

      <para>Gleichzeitig wird im Log des Web-Servers folgendes
      angezeigt:<screen>Started GET "/rails/info/properties" for 127.0.0.1 at 2010-09-01 09:44:41 +0200
  Processing by Rails::InfoController#properties as */*
  SQL (0.3ms)   SELECT name
 FROM sqlite_master
 WHERE type = 'table' AND NOT name = 'sqlite_sequence'

Rendered inline template (0.4ms)
Completed 200 OK in 60ms (Views: 1.2ms | ActiveRecord: 0.3ms)
</screen></para>

      <para>Da beim Aufruf der ersten Startseite kein entsprechender Eintrag
      erschien, muss es sich um zwei verschiedenartige Seiten handeln. Die
      erste Seite ist tatsächlich eine statische HTML-Seite, die unter
      <filename>public/index.html</filename> abgespeichert ist, und der Link
      auf den wir geklickt haben führt ein Rails-Programm aus.</para>

      <para>Mit <keycombo>
          <keycap function="control">Ctrl</keycap>

          <keycap>C</keycap>
        </keycombo> können Sie den Web-Server wieder stoppen.</para>
    </section>

    <section xml:id="rails-statische-inhalte">
      <title>Statische Seiten</title>

      <indexterm>
        <primary>Statische Seiten/Inhalte</primary>

        <secondary>in einer Rails-Applikation</secondary>
      </indexterm>

      <indexterm>
        <primary>public</primary>

        <secondary>Verzeichnis</secondary>
      </indexterm>

      <para>Wie eben gesehen gibt es bestimmte statische Seiten, Bilder und
      JavaScript-Dateien die von Rails automatisch und per Default sogar ohne
      Logging ausgeliefert werden. Erinnern wir uns noch mal an eine
      Teilausgabe vom Befehl <command>rails new testproject</command>:
      <screen>stefan@swmbp 0 1.9.2-p0 ~$ <command>rails new testproject</command>
      <replaceable>[...]</replaceable>
      create  public
      create  public/404.html
      create  public/422.html
      create  public/500.html
      create  public/favicon.ico
      create  public/index.html
      create  public/robots.txt
      create  public/images
      create  public/images/rails.png
      create  public/stylesheets
      create  public/stylesheets/.gitkeep
      create  public/javascripts
      create  public/javascripts/application.js
      create  public/javascripts/controls.js
      create  public/javascripts/dragdrop.js
      create  public/javascripts/effects.js
      create  public/javascripts/prototype.js
      create  public/javascripts/rails.js
      <replaceable>[...]</replaceable>
</screen></para>

      <para>Der Verzeichnisname <filename>public</filename> und die darin
      enthaltenen Dateien sehen schon sehr nach statischen Seiten aus.
      <indexterm>
          <primary>Hello World</primary>

          <secondary>In Rails</secondary>
        </indexterm><indexterm>
          <primary>Hallo Welt</primary>

          <see>Hello World</see>
        </indexterm>Probieren wir es einfach mal aus und legen die Datei
      <filename>public/hello-world.html</filename> mit folgendem Inhalt
      an:<programlisting>&lt;html&gt;
&lt;title&gt;Hello World!&lt;/title&gt;
&lt;body&gt;
  &lt;h1&gt;Hello World!&lt;/h1&gt;
  &lt;p&gt;Eine Beispielseite.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</programlisting></para>

      <note>
        <para>Ich gehe davon aus, dass Sie rudimentäre HTML-Kenntnisse haben –
        für viel mehr reicht mein HTML-Wissen auch nicht ;-).</para>
      </note>

      <para>Jetzt noch den Rails-Web-Server starten:<screen>stefan@swmbp 0 1.9.2-p0 testproject$ <command>rails server</command>
=&gt; Booting WEBrick
=&gt; Rails 3.0.0 application starting in development on http://0.0.0.0:3000
=&gt; Call with -d to detach
=&gt; Ctrl-C to shutdown server
[2010-09-01 09:49:58] INFO  WEBrick 1.3.1
[2010-09-01 09:49:58] INFO  ruby 1.9.2 (2010-08-18) [x86_64-darwin10.4.0]
[2010-09-01 09:49:58] INFO  WEBrick::HTTPServer#start: pid=40688 port=3000

</screen></para>

      <para>Diese Webseite können wir uns unter der URL <uri
      xlink:href="http://0.0.0.0:3000/hello-world">http://0.0.0.0:3000/hello-world</uri>
      anschauen:<screenshot>
          <info>
            <title>Hello-World-HTML-Seite</title>
          </info>

          <mediaobject>
            <imageobject>
              <imagedata fileref="screenshots/hello-world-html.jpg"></imagedata>
            </imageobject>

            <textobject>
              <para>Hello World!</para>
            </textobject>
          </mediaobject>
        </screenshot></para>

      <para>Wir können natürlich auch die URL <uri
      xlink:href="http://0.0.0.0:3000/hello-world.html">http://0.0.0.0:3000/hello-world.html</uri>
      nehmen. Allerdings sieht Rails HTML und damit die Datei-Endung
      <literal>.html</literal> quasi als Standard-Ausgabe-Format an und
      deshalb kann man sich das <quote><literal>.html</literal></quote> hier
      sparen.</para>

      <para>So, jetzt wissen Sie schon mal wie man gänzlich statische Seiten
      in Rails integrieren kann. Das ist manchmal für Seiten praktisch die
      sich nie ändern. Natürlich gilt dies für jegliche Art von Datei. Tyische
      Beispiele sind die <indexterm>
          <primary>Favicon</primary>
        </indexterm>Favicon-Datei (normalerweise
      <filename>favicon.ico</filename>) <footnote>
          <para>weitere Informationen zu Favicons: <uri
          xlink:href="http://de.wikipedia.org/wiki/Favicon">http://de.wikipedia.org/wiki/Favicon</uri></para>
        </footnote> und die Datei <indexterm>
          <primary>robots.txt</primary>
        </indexterm><filename>robots.txt</filename> <footnote>
          <para>weitere Informationen zur Datei
          <filename>robots.txt</filename>: <uri
          xlink:href="http://de.wikipedia.org/wiki/Robots_Exclusion_Standard">http://de.wikipedia.org/wiki/Robots_Exclusion_Standard</uri></para>
        </footnote>. Beide legt man einfach in das Verzeichnis
      <filename>public/</filename>.</para>

      <para><qandaset>
          <qandadiv>
            <qandaentry>
              <question>
                <para>Wo speichern Sie Ihr Firmenlogo (z.B.
                <filename>logo.png</filename>)?</para>
              </question>

              <answer>
                <para>Natürlich im <filename>public/</filename>-Verzeichnis,
                denn es ist eine statische Datei.</para>
              </answer>
            </qandaentry>
          </qandadiv>
        </qandaset></para>
    </section>
  </section>

  <section xml:id="dynamische_webseiten">
    <title xml:id="dynamische_webseiten.title">Dynamisch mit erb erzeugtes
    HTML</title>

    <indexterm>
      <primary>erb</primary>
    </indexterm>

    <indexterm>
      <primary>rhtml</primary>

      <see>erb</see>
    </indexterm>

    <indexterm>
      <primary>Templates</primary>

      <seealso>erb</seealso>

      <seealso>Views</seealso>

      <seealso>Layouts</seealso>
    </indexterm>

    <para>Kennen Sie PHP (ohne Frameworks)? Dann wird Ihnen der Inhalt einer
    <literal>erb</literal>-Datei sehr bekannt vorkommen. Es ist eine Mischung
    aus (beispielsweise) HTML und Ruby-Code. (<literal>erb</literal> steht für
    <foreignphrase xml:lang="en"><emphasis role="bold">e</emphasis>mbedded
    <emphasis role="bold">R</emphasis>u<emphasis
    role="bold">b</emphasis>y</foreignphrase>, also eingebettetes Ruby).
    Allerdings können wir eine solche <literal>erb</literal>-Webseite nicht
    einfach in das Verzeichnis <filename>public</filename> legen, da dort
    abgelegte Seiten 1:1 ausgeliefert werden und nicht durch einen
    <literal>erb</literal>-Parser gehen. Dummerweise müssen wir dafür jetzt
    direkt mit dem <indexterm>
        <primary>Model–View–Controller</primary>

        <see>MVC</see>
      </indexterm><indexterm>
        <primary>MVC</primary>
      </indexterm>MVC-Modell <footnote>
        <para><uri
        xlink:href="http://de.wikipedia.org/wiki/Model_View_Controller">http://de.wikipedia.org/wiki/Model_View_Controller</uri></para>
      </footnote> anrücken. Wir brauchen einen <indexterm>
        <primary>Controller</primary>
      </indexterm>Controller. Den können wir mit dem Befehl <command>rails
    generate controller</command> anlegen. Schauen wir uns mal die Hilfe
    an:<screen>stefan@swmbp 0 1.9.2-p0 testproject$ <command>rails generate controller</command>
Usage:
  rails generate controller NAME [action action] [options]

Options:
  -e, [--template-engine=NAME]  # Template engine to be invoked
                                # Default: erb
  -t, [--test-framework=NAME]   # Test framework to be invoked
                                # Default: test_unit
      [--helper]                # Indicates when to generate helper
                                # Default: true

Runtime options:
  -f, [--force]    # Overwrite files that already exist
  -p, [--pretend]  # Run but do not make any changes
  -q, [--quiet]    # Supress status output
  -s, [--skip]     # Skip files that already exist

Description:
    Stubs out a new controller and its views. Pass the controller name, either
    CamelCased or under_scored, and a list of views as arguments.

    To create a controller within a module, specify the controller name as a
    path like 'parent_module/controller_name'.

    This generates a controller class in app/controllers and invokes helper,
    template engine and test framework generators.

Example:
    `rails generate controller CreditCard open debit credit close`

    Credit card controller with URLs like /credit_card/debit.
        Controller:      app/controllers/credit_card_controller.rb
        Functional Test: test/functional/credit_card_controller_test.rb
        Views:           app/views/credit_card/debit.html.erb [...]
        Helper:          app/helpers/credit_card_helper.rb

stefan@swmbp 0 1.9.2-p0 testproject$ </screen></para>

    <para>Aha! Unten ist freundlicherweise direkt ein Beispiel
    angegeben:<programlisting>rails generate controller CreditCard open debit credit close</programlisting>Passt
    aber nicht direkt für unseren Fall.</para>

    <para>Ich bin mutig und schlage vor, dass wir einfach mal was
    ausprobieren:<screen>stefan@swmbp 0 1.9.2-p0 testproject$ <command>rails generate controller Example test</command>
      create  app/controllers/example_controller.rb
       route  get "example/test"
      invoke  erb
      create    app/views/example
      create    app/views/example/test.html.erb
      invoke  test_unit
      create    test/functional/example_controller_test.rb
      invoke  helper
      create    app/helpers/example_helper.rb
      invoke    test_unit
      create      test/unit/helpers/example_helper_test.rb

stefan@swmbp 0 1.9.2-p0 testproject$ </screen></para>

    <para>Puhhh… da wird ja direkt ne ganze Menge erstellt. Unter anderem eine
    Datei <filename>app/views/example/test.html.erb</filename>. Schauen wir
    uns die mal an:<screen>stefan@swmbp 0 1.9.2-p0 testproject$ <command>cat app/views/example/test.html.erb </command>
</screen><programlisting>&lt;h1&gt;Example#test&lt;/h1&gt;
&lt;p&gt;Find me in app/views/example/test.html.erb&lt;/p&gt;</programlisting></para>

    <para>Ist also auch HTML. Da <quote>fehlt</quote> anscheinend oben und
    unten etwas, aber prinzipiell sieht das stark nach HTML aus. Zum Testen
    starten wir den Web-Server<screen>stefan@swmbp 0 1.9.2-p0 testproject$ <command>rails server</command>
=&gt; Booting WEBrick
=&gt; Rails 3.0.0 application starting in development on http://0.0.0.0:3000
=&gt; Call with -d to detach
=&gt; Ctrl-C to shutdown server
[2010-09-01 10:30:50] INFO  WEBrick 1.3.1
[2010-09-01 10:30:50] INFO  ruby 1.9.2 (2010-08-18) [x86_64-darwin10.4.0]
[2010-09-01 10:30:50] INFO  WEBrick::HTTPServer#start: pid=40964 port=3000
</screen></para>

    <para>und schauen uns die Webseite unter der URL <uri
    xlink:href="http://0.0.0.0:3000/example/test">http://0.0.0.0:3000/example/test</uri>
    mal im Browser an:<screenshot>
        <info>
          <title>test.html.erb-Webseite</title>
        </info>

        <mediaobject>
          <imageobject>
            <imagedata fileref="screenshots/example-test-erb.jpg"></imagedata>
          </imageobject>
        </mediaobject>
      </screenshot></para>

    <para>Im <indexterm>
        <primary>Log</primary>
      </indexterm>Log <filename>log/development.log</filename> finden wir den
    folgenden Eintrag:<programlisting>Started GET "/example/test" for 127.0.0.1 at 2010-09-01 10:31:24 +0200
  Processing by ExampleController#test as HTML
Rendered example/test.html.erb within layouts/application (2.1ms)
Completed 200 OK in 21ms (Views: 20.7ms | ActiveRecord: 0.0ms)
</programlisting></para>

    <para>Das ist fast schon verständlich geschrieben. Es kam also vom
    <literal>localhost</literal> (127.0.0.1) ein HTTP-GET-Request für die URI
    <quote><literal>/example/test</literal></quote> rein. Die wurde dann
    anscheinend vom Controller <code>ExampleController</code> mit der Methode
    <methodname>test</methodname> als HTML gerendert. Das ganze hat hier
    ungefähr 21 ms gedauert.</para>

    <para>Jetzt müssen wir nur noch den Controller finden. Aber Sie haben
    Glück … ich weiß es nämlich. ;-) Alle Controller befinden sich im
    Verzeichnis <filename>app/controllers</filename>, und siehe da, dort ist
    auch tatsächlich die entsprechende Datei
    <filename>app/controllers/example_controller.rb</filename>. Schauen wir
    mal rein:<screen>stefan@swmbp 0 1.9.2-p0 testproject$ <command>ls -l app/controllers/</command>
total 16
-rw-r--r--  1 stefan  staff  80  1 Sep 09:29 application_controller.rb
-rw-r--r--  1 stefan  staff  70  1 Sep 10:29 example_controller.rb
stefan@swmbp 0 1.9.2-p0 testproject$ <command>cat app/controllers/example_controller.rb</command> 
</screen><programlisting>class ExampleController &lt; ApplicationController
  def test
  end

end</programlisting></para>

    <para>Das ist jetzt sehr übersichtlich. Der Controller
    <code>ExampleController</code> stammt vom
    <code>ApplicationController</code> ab und enthält aktuell genau eine
    Methode mit dem Namen <methodname>test</methodname>. Und diese Methode
    macht nichts.</para>

    <para><indexterm>
        <primary>Routing</primary>
      </indexterm><indexterm>
        <primary>routes.rb</primary>
      </indexterm><indexterm>
        <primary>Inflections</primary>
      </indexterm>Sie werden sich fragen, woher Rails weiß, dass bei dem
    URL-Pfad <uri>/example/test</uri> der Controller
    <code>ExampleController</code> und die Methode <code>test</code>
    abzuarbeiten ist. Das wird nämlich nicht durch eine magische Logik,
    sondern durch eine einfache <foreignphrase
    xml:lang="en">Routing</foreignphrase>-Konfiguration gesteuert. Diese
    finden Sie in der Datei <filename>config/routes.rb</filename> in der
    zweiten Zeile:<screen>stefan@swmbp 0 1.9.2-p0 testproject$ <command>cat config/routes.rb | grep example</command>
</screen><programlisting>  get "example/test"</programlisting></para>

    <para>Diese Zeile wurde vom Befehl <command>rails generate
    controller</command> automatisch eingefügt. In der Routing-Datei können
    Sie auch beliebiges <foreignphrase xml:lang="en">Mapping</foreignphrase>
    vornehmen. Aber dazu später mehr. Aktuell sehen unsere Routen sehr einfach
    aus. Mit dem Befehl <command>rake routes</command><remark>FIXME: Wurde
    rake vorher schon mal erwähnt?</remark> können wir diese abfragen:<screen>stefan@swmbp 0 1.9.2-p0 testproject$ <command>rake routes</command>
(in /Users/stefan/testproject)
example_test GET /example/test(.:format) {:controller=&gt;"example", :action=&gt;"test"}
stefan@swmbp 0 1.9.2-p0 testproject$ </screen></para>

    <para>Wir kümmern uns später noch genauer um die Routen. Ich wollte es an
    dieser Stelle nur nicht gänzlich überspringen.</para>

    <important>
      <para>Eine statische Datei im Verzeichnis <filename>public</filename>
      hat immer eine höhere Priorität als eine Route in der
      <filename>config/routes.rb</filename>! Wenn wir also eine statische
      Datei <filename>public/example/test</filename> abspeichern würden, so
      würde die Route nicht mehr greifen.</para>
    </important>

    <section xml:id="erb-programmieren">
      <title>Programmieren in einer erb-Datei</title>

      <indexterm>
        <primary>erb</primary>
      </indexterm>

      <para><literal>Erb</literal>-Seiten können Ruby-Code enthalten. Damit
      kann programmiert werden, und damit können diese Seiten dynamischen
      Inhalt bekommen.</para>

      <para>Fangen wir mal mit etwas ganz einfachem an: der Addition von 1 und
      1. Als erstes probieren wir den Code im <literal>irb</literal>
      aus:<screen>stefan@swmbp 0 1.9.2-p0 testproject$ <command>irb</command>
ruby-1.9.2-p0 &gt; <command>1 + 1</command>
 =&gt; 2 
ruby-1.9.2-p0 &gt; <command>exit</command>
stefan@swmbp 0 1.9.2-p0 testproject$ </screen></para>

      <para>Das war einfach. Die <literal>erb</literal>-Datei
      <filename>app/views/example/test.html.erb</filename> füllen wir wie
      folgt:<programlisting>&lt;h1&gt;Erste Versuche mit erb&lt;/h1&gt;
&lt;p&gt;Addition:
&lt;%= 1 + 1 %&gt;
&lt;/p&gt;
</programlisting></para>

      <para>Danach mit <command>rails server</command> den Web-Server starten
      (falls noch nicht getan) und per Browser auf die Seite gehen:<screenshot>
          <info>
            <title>Einfache Addition</title>
          </info>

          <mediaobject>
            <imageobject>
              <imagedata fileref="screenshots/erb_einfache_addition.jpg"></imagedata>
            </imageobject>
          </mediaobject>
        </screenshot></para>

      <para>Ruby-Code dessen Ergebnis ausgegeben werden soll, wird von einem
      <code>&lt;%=</code> und einem <code>%&gt;</code> eingeschlossen.
      Ausgegeben werden können nur Strings.</para>

      <para>Jetzt werden Sie sich vielleicht fragen: Wie kann den das Ergebnis
      einer Addion von zwei Fixnums als Text angezeigt werden? Schauen wir
      erst mal im <literal>irb</literal> nach, ob es wirklich ein Fixnum
      ist:<screen>stefan@swmbp 0 1.9.2-p0 testproject$ <command>irb</command>
ruby-1.9.2-p0 &gt; <command>1.class</command>
 =&gt; Fixnum 
ruby-1.9.2-p0 &gt; <command>(1 + 1).class</command>
 =&gt; Fixnum 
ruby-1.9.2-p0 &gt; <command>exit</command>
stefan@swmbp 0 1.9.2-p0 testproject$ </screen></para>

      <para>Ja, sowohl die Zahl 1 also auch das Ergebnis von 1 + 1 ist ein
      Fixnum. Was ist passiert? Rails ist so intelligent alle Objekte in einem
      <indexterm>
          <primary>View</primary>
        </indexterm>View (das ist die Datei
      <filename>test.html.erb</filename>) die nicht bereits ein String sind
      automatisch mit der Methode <indexterm>
          <primary>to_s()</primary>
        </indexterm><methodname>.to_s</methodname> aufzurufen. Noch mal kurz
      ins <literal>irb</literal>:<screen>stefan@swmbp 0 1.9.2-p0 testproject$ <command>irb</command>
ruby-1.9.2-p0 &gt; <command>(1 + 1).class</command>
 =&gt; Fixnum 
ruby-1.9.2-p0 &gt; <command>(1 + 1).to_s.class</command>
 =&gt; String 
ruby-1.9.2-p0 &gt; <command>exit</command>
stefan@swmbp 0 1.9.2-p0 testproject$ </screen></para>

      <para>Das mit dem Ruby-Code schauen wir uns mal genauer an. In einer
      <filename>.html.erb</filename>-Datei gibt zusätzlich zu den
      HTML-Elementen zwei Arten von Ruby-Code-Anweisungen:<itemizedlist>
          <listitem>
            <para><emphasis role="bold"><code>&lt;%
            <replaceable>…</replaceable> %&gt;</code></emphasis></para>

            <para>Führt den enthaltenen Ruby-Code aus, aber gibt nichts aus
            (außer Sie verwenden explizit sowas wie <code>print</code> oder
            <code>puts</code>).</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold"><code>&lt;%=
            <replaceable>…</replaceable> %&gt;</code></emphasis></para>

            <para>Führt den enthaltenen Ruby-Code aus und gibt das Ergebnis
            als Text aus. Dabei werden seit Ruby 3.0 automatisch
            problematische Zeichen <quote>escapt</quote>. Falls Sie einmal
            nicht escapten Text ausgeben möchten, so müssen Sie das mit
            <code>raw(string)</code> realisieren.</para>

            <para>Sofern also ein Objekt eine Methode
            <methodname>.to_s</methodname> hat oder das Objekt selber schon
            ein String ist, kann man es als Ergebnis im View innerhalb einer
            <code>&lt;%= <replaceable>…</replaceable> %&gt;</code> Kapselung
            ausgeben.</para>
          </listitem>
        </itemizedlist>Um ganz sicher zu sein, noch ein Beispiel. Wir ändern
      die <filename>app/views/example/test.html.erb</filename> wie
      folgt:<programlisting>&lt;p&gt;Schleife von 0 bis 5:
&lt;% (0..5).each do |i| %&gt;
&lt;%= "#{i}, " %&gt;
&lt;% end %&gt;
&lt;/p&gt;
</programlisting></para>

      <para>Das sieht dann im Browser so aus:<screenshot>
          <info>
            <title>Einfache Addition</title>
          </info>

          <mediaobject>
            <imageobject>
              <imagedata fileref="screenshots/erb_einfache_schleife.jpg"></imagedata>
            </imageobject>
          </mediaobject>
        </screenshot></para>

      <para>Schauen wir uns mal den HTML-Source-Code (-Quelltext) im Browser
      an:<programlisting>&lt;!DOCTYPE html&gt; 
&lt;html&gt; 
&lt;head&gt; 
  &lt;title&gt;Testproject&lt;/title&gt; 
  
  &lt;script src="/javascripts/prototype.js?1283326173" type="text/javascript"&gt;&lt;/script&gt; 
&lt;script src="/javascripts/effects.js?1283326173" type="text/javascript"&gt;&lt;/script&gt; 
&lt;script src="/javascripts/dragdrop.js?1283326173" type="text/javascript"&gt;&lt;/script&gt; 
&lt;script src="/javascripts/controls.js?1283326173" type="text/javascript"&gt;&lt;/script&gt; 
&lt;script src="/javascripts/rails.js?1283326173" type="text/javascript"&gt;&lt;/script&gt; 
&lt;script src="/javascripts/application.js?1283326173" type="text/javascript"&gt;&lt;/script&gt; 
  &lt;meta name="csrf-param" content="authenticity_token"/&gt; 
&lt;meta name="csrf-token" content="7vy1+iQpYWFUhvXS2UHPXZOFjkpePZj/gBOkUASWoyY="/&gt; 
&lt;/head&gt; 
&lt;body&gt; 
 
&lt;p&gt;Schleife von 0 bis 5:
0, 
1, 
2, 
3, 
4, 
5, 
&lt;/p&gt; 
 
 
&lt;/body&gt; 
&lt;/html&gt;</programlisting></para>

      <para>Alles klar? Es gibt zwei mögliche offene Fragen:<qandaset>
          <qandadiv>
            <qandaentry>
              <question>
                <para>Ich verstehe gar nichts. Mit dem Ruby-Code komme ich
                nicht zurecht. Können Sie das noch mal erklären?</para>
              </question>

              <answer>
                <para>Kann es sein, dass Sie <xref
                linkend="ruby-grundlagen" /> nicht komplett durchgearbeitet
                haben? Bitte nehmen Sie sich die Zeit dafür. Sonst macht hier
                das alles keinen Sinn.</para>
              </answer>
            </qandaentry>

            <qandaentry>
              <question>
                <para>Ich verstehe den Ruby-Code und die HTML-Ausgabe.
                Allerdings verstehe ich nicht, warum drum rum noch HTML-Code
                gerendert wurde, den ich gar nicht geschrieben habe. Woher
                kommt der, und kann ich ihn beeinflussen?</para>
              </question>

              <answer>
                <para>Sehr gute Frage! Dazu kommen wir sofort (siehe <xref
                linkend="erb_layouts" />).</para>
              </answer>
            </qandaentry>
          </qandadiv>
        </qandaset></para>

      <para>Die Feinheiten von <literal>erb</literal> werden Sie jetzt Stück
      für Stück erlernen. Es handelt sich dabei nicht um Zauberei.</para>
    </section>

    <section xml:id="erb_layouts">
      <title xml:id="erb_layouts.title">Layouts</title>

      <indexterm>
        <primary>Layouts</primary>
      </indexterm>

      <indexterm>
        <primary>Views</primary>
      </indexterm>

      <indexterm>
        <primary>application.html.erb</primary>
      </indexterm>

      <indexterm>
        <primary>Templates</primary>
      </indexterm>

      <para>Die <literal>erb</literal>-Datei im Verzeichnis
      <filename>app/views/example/</filename> bildet nur den Kern der späteren
      HTML-Seite. Per Default wird immer eine automatisch generierte
      <filename>app/views/layouts/application.html.erb</filename> drum rum
      gerendert. Schauen wir uns die mal an:<screen>stefan@swmbp 0 1.9.2-p0 testproject$ <command>cat app/views/layouts/application.html.erb</command>
</screen><programlisting>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Testproject&lt;/title&gt;
  &lt;%= stylesheet_link_tag :all %&gt;
  &lt;%= javascript_include_tag :defaults %&gt;
  &lt;%= csrf_meta_tag %&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;%= yield %&gt;

&lt;/body&gt;
&lt;/html&gt;</programlisting></para>

      <para><indexterm>
          <primary>yield()</primary>
        </indexterm>Ich löse das Rätsel auf: Interessant ist die
      Zeile<programlisting>&lt;%= yield %&gt;</programlisting></para>

      <para>Mit <code>&lt;%= yield %&gt;</code> wird hier die View-Datei
      inkludiert. Die drei Zeilen mit den Stylesheets und dem JavaScript
      lassen wir erst mal so wie sie sind. Darum kümmern wir uns
      später.</para>

      <para>Die Datei
      <filename>app/views/layouts/application.html.erb</filename> bietet Ihnen
      die Möglichkeit das Grund-Layout über die gesamte Rails-Applikation fest
      zu legen. Sie können aber auch im Verzeichnis
      <filename>app/views/layouts/</filename> noch andere Layouts anlegen und
      diese je nach Situation anwenden. Ich bin hin- und hergerissen dieses
      Thema jetzt zu vertiefen, aber lassen wir es jetzt erst mal. Wichtig ist
      jetzt, dass Sie die Grundidee verstehen.</para>
    </section>

    <section xml:id="erb_mit_programmierlogik">
      <title>Instanz-Variablen vom Controller zum View übergeben</title>

      <indexterm>
        <primary>MVC</primary>
      </indexterm>

      <indexterm>
        <primary>Model–View–Controller</primary>

        <see>MVC</see>
      </indexterm>

      <indexterm>
        <primary>Controller</primary>
      </indexterm>

      <indexterm>
        <primary>View</primary>
      </indexterm>

      <indexterm>
        <primary>Instanz-Variablen</primary>
      </indexterm>

      <para>Einer der Todsünden im MVC-Modell <footnote>
          <para><uri
          xlink:href="http://de.wikipedia.org/wiki/Model_View_Controller">http://de.wikipedia.org/wiki/Model_View_Controller</uri></para>
        </footnote> ist ja bekanntlich zu viel Programm-Logik im View
      unterzubringen. Quasi so wie man früher oft in PHP programmiert hat. Bei
      MVC ist eins der Ziele, dass quasi jeder beliebige HTML-Designer einen
      View erstellen kann ohne sich über die Programmierung Gedanken machen zu
      müssen. Ja, ja, … wenn das mal immer so einfach wäre. Trotzdem gehen wir
      das mal gedanklich weiter: Wenn ich im Controller einen Wert habe, den
      ich im View anzeigen will, so benötige ich dafür einen Mechanismus.
      Dieser heißt Instanz-Variable (<foreignphrase xml:lang="en">instance
      variable</foreignphrase>). Wer sich nicht mehr 100 % sicher ist welche
      Variable welchen Geltungsbereich (<indexterm>
          <primary>Scope</primary>
        </indexterm><foreignphrase xml:lang="en">Scope</foreignphrase>) hat,
      der sollte ganz fix noch mal einen Blick in <xref
      linkend="scope_von_variablen" /> werfen (geht schnell und lohnt
      sich).</para>

      <para>Wir brechen jetzt einfach mal ein Beispiel vom Zaun und fügen im
      Controller eine Instance-Variable für die aktuelle Uhrzeit ein und fügen
      diese dann im View ein. Wir nehmen also Programmier-Intelligenz aus dem
      View in den Controller.</para>

      <para>Die Controller Datei
      <filename>app/controllers/example_controller.rb</filename> sieht dann so
      aus:<programlisting>class ExampleController &lt; ApplicationController
  def test
    <emphasis role="bold">@current_time</emphasis> = Time.now
  end

end
</programlisting></para>

      <para>In der View Datei
      <filename>app/views/example/test.html.erb</filename> können wir dann auf
      diese Instance-Variable zurückgreifen:<programlisting>&lt;p&gt;
Die aktuelle Uhrzeit ist 
&lt;%= <emphasis role="bold">@current_time</emphasis> %&gt;
&lt;/p&gt;
</programlisting></para>

      <para>Wir haben jetzt eine klare Trennung von Programmierlogik und
      Darstellungslogik mit dem Controller und dem View. So können wir im
      Controller die Uhrzeit je nach Zeitzone des Anwenders automatisch
      anpassen, ohne dass sich der Designer der Seite darum kümmern
      muss.</para>

      <para>Mir ist klar, dass jetzt keiner aufspringen und schreien wird:
      <quote>Danke für die Erleuchtung! Ich werde nur noch sauber nach MVC
      programmieren.</quote> Das obige Beispiel ist der erste kleine Schritt
      in die Richtung und zeigt wie wir einfach mit Instance-Variablen (das
      sind die mit dem <code>@</code>-Zeichen davor) Werte aus dem Controller
      in den View bringen können.</para>
    </section>

    <section xml:id="partials">
      <title xml:id="partials.title">Partials</title>

      <indexterm>
        <primary>Partials</primary>
      </indexterm>

      <indexterm>
        <primary>erb</primary>
      </indexterm>

      <para>Selbst schon bei kleinen Webprojekten gibt es oft wiederkehrende
      Elemente. Das kann zum Beispiel ein <indexterm>
          <primary>Footer</primary>
        </indexterm><foreignphrase xml:lang="en">Footer</foreignphrase> der
      Seite mit den Kontaktdaten sein oder ein Menü. Rails gibt uns die
      Möglichkeit diesen HTML-Code in sogenannte <quote><foreignphrase
      xml:lang="en">Partials</foreignphrase></quote> abzuspeichern und dann
      innerhalb eines <indexterm>
          <primary>View</primary>
        </indexterm>Views einzubinden. Ein Partial wird ebenfalls im
      <filename>app/views/example/</filename> Verzeichnis abgespeichert.
      Allerdings muss der Dateinamen mit einem Unterstrich (<foreignphrase
      xml:lang="en">Underscore</foreignphrase> = <literal>_</literal>)
      anfangen.</para>

      <note>
        <para>Das englische Adjektiv <foreignphrase
        xml:lang="en">partial</foreignphrase> heißt sowas wie Teil-…, partiell
        oder unvollständig. <foreignphrase
        xml:lang="en">Partials</foreignphrase> sind also sowas wie Teile,
        Stückchen oder Vorlagen-Schnipsel.</para>
      </note>

      <para>Als Beispiel fügen wir unser Seite jetzt einen Mini-Footer hinzu.
      Dafür schreiben wir in die neue Datei
      <filename>app/views/example/_footer.html.erb</filename> den folgenden
      Inhalt:<programlisting>&lt;hr /&gt;
&lt;p&gt;
Copyright 2009 - &lt;%= Date.today.year %&gt; beim Osterhasen
&lt;/p&gt;</programlisting></para>

      <para>Die Datei <filename>app/views/example/test.html.erb</filename>
      verändern wir wie folgt und fügen mit dem Befehl <indexterm>
          <primary>render()</primary>
        </indexterm><methodname>render</methodname> das Partial
      ein:<programlisting>&lt;p&gt;Schleife von 0 bis 5:
&lt;% (0..5).each do |i| %&gt;
&lt;%= "#{i}, " %&gt;
&lt;% end %&gt;
&lt;/p&gt;

<emphasis>&lt;%= render "footer" %&gt;</emphasis></programlisting></para>

      <para>Es sind also jetzt folgende Dateien im Verzeichnis
      <filename>app/views/example</filename>:<screen>stefan@swmbp 0 1.9.2-p0 testproject$ <command>ls -l app/views/example</command>
total 16
-rw-r--r--  1 stefan  staff   63  1 Sep 20:12 _footer.html.erb
-rw-r--r--  1 stefan  staff  105  1 Sep 20:14 test.html.erb
stefan@swmbp 0 1.9.2-p0 testproject$ </screen></para>

      <para>Die neue Webseite sieht jetzt so aus:<screenshot>
          <info>
            <title>Seite mit Footer als Partial</title>
          </info>

          <mediaobject>
            <imageobject>
              <imagedata fileref="screenshots/partials_footer.jpg"></imagedata>
            </imageobject>
          </mediaobject>
        </screenshot></para>

      <para><important>
          <para>Der Name eines Partials im Code wird immer
          <emphasis>ohne</emphasis> den Unterstrich (<literal>_</literal>) am
          Anfang und <emphasis>ohne</emphasis> die <literal>.erb</literal> und
          <literal>.html</literal>-Endung angegeben. Aber die wirkliche Datei
          muss im Dateinamen mit einem Unterstrich anfangen und auch am Ende
          mir der <literal>.erb</literal> und <literal>.html</literal>-Endung
          aufhören.</para>
        </important></para>

      <para>Partials können auch aus anderen Bereichen des Unterverzeichnisses
      <filename>app/views</filename> eingebunden werden. So können Sie für
      wiederkehrende und übergreifende Inhalte beispielsweise ein Verzeichnis
      <filename>app/views/shared</filename> anlegen und dort eine Datei
      <filename>_footer.html.erb</filename> anlegen. Das Einbetten im
      <literal>erb</literal>-Code würde dann mit folgender Zeile
      erfolgen:<indexterm>
          <primary>render()</primary>
        </indexterm><programlisting>&lt;%= render "shared/footer" %&gt;</programlisting></para>

      <note>
        <para>Das Footer-Problem würde man - je nach Programmiergeschmack - in
        einem richtigen Projekt nicht mit einem Partial lösen das überall
        lokal aufgerufen wird, sondern eher zentral in der
        <filename>app/views/layouts/application.html.erb</filename>.</para>
      </note>

      <section xml:id="partials_locale_variables">
        <title xml:id="partials_locale_variables.title">Variablen an ein
        Partial übergeben</title>

        <indexterm>
          <primary>Partial</primary>
        </indexterm>

        <para>Partials sind im <indexterm>
            <primary>DRY</primary>
          </indexterm><indexterm>
            <primary>Don't Repeat Yourself</primary>

            <see>DRY</see>
          </indexterm>DRY-(<foreignphrase xml:lang="en"><emphasis
        role="bold">D</emphasis>on't <emphasis role="bold">R</emphasis>epeat
        <emphasis role="bold">Y</emphasis>ourself</foreignphrase>)-Gedanken
        sehr gut. Aber was sie erst richtig praktisch macht, ist die
        Möglichkeit Variablen zu übergeben. Erweitern wir einmal die Datei
        <filename>app/views/example/_footer.html.erb</filename> wie
        folgt:<programlisting>&lt;hr /&gt;
&lt;p&gt;
Copyright 2009 - &lt;%= Date.today.year %&gt; beim Osterhasen
&lt;/p&gt;
&lt;% if (defined? additional_info) != nil %&gt;
&lt;p&gt;
&lt;%= additional_info %&gt;
&lt;/p&gt;
&lt;% end %&gt;
</programlisting></para>

        <note>
          <para><indexterm>
              <primary>defined?</primary>

              <secondary>Methoden</secondary>
            </indexterm>Mit <methodname>defined?</methodname> wird in Ruby
          überprüft, ob eine Expression definiert ist.</para>
        </note>

        <para>Wenn wir jetzt die URL <uri
        xlink:href="http://0.0.0.0:3000/example/test">http://0.0.0.0:3000/example/test</uri>
        aufrufen, so sehen wir die gleiche Seite wie vorhin. Das liegt daran
        dass <varname>additional_info</varname> nicht als lokale Variable
        übergeben wurde. Ändern wir dazu die
        <filename>app/views/example/test.html.erb</filename> wie
        folgt:<indexterm>
            <primary>render()</primary>
          </indexterm><programlisting>&lt;p&gt;Schleife von 0 bis 5:
&lt;% (0..5).each do |i| %&gt;
&lt;%= "#{i}, " %&gt;
&lt;% end %&gt;
&lt;/p&gt;

&lt;%= render :partial =&gt; 'footer', :locals =&gt; {:additional_info =&gt; "abcdef"} %&gt;
</programlisting></para>

        <para>Der Aufruf von <uri
        xlink:href="http://0.0.0.0:3000/example/test">http://0.0.0.0:3000/example/test</uri>
        erzeugt erwartungsgemäß folgende Seite:<screenshot>
            <info>
              <title>Partial mit Locals</title>
            </info>

            <mediaobject>
              <imageobject>
                <imagedata fileref="screenshots/footer_partial_mit_locals.jpg"></imagedata>
              </imageobject>
            </mediaobject>
          </screenshot></para>

        <para>Sie sehen ebenfalls, das ich beim Einbinden eines einfaches
        Partials eine kürzere Schreibweise benutzen kann, als bei der Version
        mit <literal>locals</literal>.</para>
      </section>

      <section xml:id="weitere_doku_zu_partials">
        <title xml:id="weitere_doku_zu_partials.title">Weitere Dokumentation
        zum Thema Partials</title>

        <para>Wir haben hier wirklich nur die Oberfläche angekratzt. Partials
        sind sehr mächtige Werkzeuge. Unter <uri
        xlink:href="http://guides.rubyonrails.org/layouts_and_rendering.html#using-partials">http://guides.rubyonrails.org/layouts_and_rendering.html#using-partials</uri>
        finden Sie die Doku von Ruby on Rails zum Thema Partials.</para>
      </section>
    </section>
  </section>

  <section xml:id="redirects">
    <title xml:id="redirects.title">Redirects (Umleitungen)</title>

    <indexterm>
      <primary>Redirects</primary>
    </indexterm>

    <indexterm>
      <primary>Umleitungen</primary>

      <see>Redirects</see>
    </indexterm>

    <indexterm>
      <primary>Weiterleitungen</primary>

      <see>Redirects</see>
    </indexterm>

    <indexterm>
      <primary>Routing</primary>
    </indexterm>

    <para><foreignphrase xml:lang="en">Redirects</foreignphrase> sind Befehle,
    mit denen Sie innerhalb des Controllers auf andere Methoden oder auch auf
    ganz andere Webseiten <quote>springen</quote> also weiterleiten
    können.<note>
        <para>Ein redirect gibt eine "302 Moved" response mit dem neuen Ziel
        zurück.</para>
      </note> Legen wir ein neues Rails-Projekt für ein entsprechendes
    Beispiel an:<screen>stefan@swmbp 0 1.9.2-p0 ~$ <command>rails new redirect_beispiel</command>
      create  
      create  README
      create  Rakefile
      create  config.ru
      <replaceable>[...]</replaceable>
      create  tmp/pids
      create  vendor/plugins
      create  vendor/plugins/.gitkeep

stefan@swmbp 0 1.9.2-p0 ~$ <command>cd redirect_beispiel</command>
stefan@swmbp 0 1.9.2-p0 redirect_beispiel$ <command>bundle install</command>
Fetching source index for http://rubygems.org/
Using rake (0.8.7) 
Using abstract (1.0.0) 
<replaceable>[...]</replaceable>
Using rails (3.0.0) 
Using sqlite3-ruby (1.3.1) 
Your bundle is complete! Use `bundle show [gemname]` to see where a bundled gem is installed.

Your bundle was installed to `/Users/stefan/.rvm/gems/ruby-1.9.2-p0`
stefan@swmbp 0 1.9.2-p0 redirect_beispiel$ </screen></para>

    <para>Um zu springen brauchen wir mindestens einen Controller und in dem
    mindestens zwei verschiedene Methoden. Und auf gehts:<screen>stefan@swmbp 0 1.9.2-p0 redirect_beispiel$ <command>rails generate controller Game ping pong</command>
      create  app/controllers/game_controller.rb
       route  get "game/pong"
       route  get "game/ping"
      invoke  erb
      create    app/views/game
      create    app/views/game/ping.html.erb
      create    app/views/game/pong.html.erb
      invoke  test_unit
      create    test/functional/game_controller_test.rb
      invoke  helper
      create    app/helpers/game_helper.rb
      invoke    test_unit
      create      test/unit/helpers/game_helper_test.rb
stefan@swmbp 0 1.9.2-p0 redirect_beispiel$ </screen></para>

    <para>Starten wir mal den Rails-Server und rufen mit dem Browser erst <uri
    xlink:href="http://0.0.0.0:3000/game/ping">http://0.0.0.0:3000/game/ping</uri>
    und dann <uri
    xlink:href="http://0.0.0.0:3000/game/pong">http://0.0.0.0:3000/game/pong</uri>
    auf:<screen>stefan@swmbp 0 1.9.2-p0 redirect_beispiel$ <command>rails server</command>
=&gt; Booting WEBrick
=&gt; Rails 3.0.0 application starting in development on http://0.0.0.0:3000
=&gt; Call with -d to detach
=&gt; Ctrl-C to shutdown server
[2010-09-01 23:29:44] INFO  WEBrick 1.3.1
[2010-09-01 23:29:44] INFO  ruby 1.9.2 (2010-08-18) [x86_64-darwin10.4.0]
[2010-09-01 23:29:44] INFO  WEBrick::HTTPServer#start: pid=46878 port=3000


Started GET "/game/ping" for 127.0.0.1 at 2010-09-01 23:29:52 +0200
  Processing by GameController#ping as HTML
Rendered game/ping.html.erb within layouts/application (1.7ms)
Completed 200 OK in 6ms (Views: 5.7ms | ActiveRecord: 0.0ms)


Started GET "/game/pong" for 127.0.0.1 at 2010-09-01 23:29:55 +0200
  Processing by GameController#pong as HTML
Rendered game/pong.html.erb within layouts/application (1.5ms)
Completed 200 OK in 5ms (Views: 5.1ms | ActiveRecord: 0.0ms)
</screen></para>

    <para>Alles ganz normal. Das Projekt verfügt über zwei mögliche
    Routen:<screen>stefan@swmbp 0 1.9.2-p0 redirect_beispiel$ <command>rake routes</command>
(in /Users/stefan/redirect_beispiel)
game_ping GET /game/ping(.:format) {:controller=&gt;"game", :action=&gt;"ping"}
game_pong GET /game/pong(.:format) {:controller=&gt;"game", :action=&gt;"pong"}
stefan@swmbp 0 1.9.2-p0 redirect_beispiel$</screen></para>

    <para>Der Controller
    <filename>app/controllers/game_controller.rb</filename> hat folgenden
    Inhalt:<screen>stefan@swmbp 0 1.9.2-p0 redirect_beispiel$ <command>cat app/controllers/game_controller.rb</command> 
</screen><programlisting>class GameController &lt; ApplicationController
  def ping
  end

  def pong
  end

end</programlisting></para>

    <para>Jetzt zum Redirect: Wie können wir es erreichen, dass wir beim
    Aufruf von <uri
    xlink:href="http://0.0.0.0:3000/game/ping">http://0.0.0.0:3000/game/ping</uri>
    direkt auf die Methode <methodname>pong</methodname> weitergeleitet
    werden? Einfach, werden Sie sagen, in dem wir die Route in der <indexterm>
        <primary>routes.rb</primary>
      </indexterm><filename>config/routes.rb</filename> ändern. Da haben Sie
    recht. Dafür brauchen wir also nicht zwingend ein Redirect.</para>

    <para>Machen wir die Aufgabe etwas schwieriger: Wie können wir es
    erreichen, dass zwischen 9 und 17 Uhr beim Aufruf von <uri
    xlink:href="http://0.0.0.0:3000/game/ping">http://0.0.0.0:3000/game/ping</uri>
    direkt auf die Methode <methodname>pong</methodname> weitergeleitet wird?
    Das können wir nur mit einem Redirect im Controller realisieren. Bitte
    ändern Sie die Datei
    <filename>app/controllers/game_controller.rb</filename> wie folgt
    ab:<indexterm>
        <primary>redirect_to()</primary>
      </indexterm><programlisting>class GameController &lt; ApplicationController
  def ping
    if (Time.now.hour &gt; 8) and (Time.now.hour &lt; 17)
      <emphasis role="bold">redirect_to game_pong_path</emphasis>
    end    
  end

  def pong
  end

end
</programlisting></para>

    <para>Aber was ist <code>game_pong_path</code>? Schauen wir uns dazu die
    für diese Rails-Applikation generierten Routen an:<screen>stefan@swmbp 1 1.9.2-p0 pingpong$ <command>rake routes</command>
(in /Users/stefan/pingpong)
game_ping GET /game/ping(.:format) {:controller=&gt;"game", :action=&gt;"ping"}
game_pong GET /game/pong(.:format) {:controller=&gt;"game", :action=&gt;"pong"}
stefan@swmbp 0 1.9.2-p0 pingpong$ </screen></para>

    <para>Sie sehen, dass die Route zur <foreignphrase xml:lang="en">Action
    </foreignphrase><literal>ping</literal> des Controllers
    <literal>GameController</literal> den Namen <literal>game_ping</literal>
    bekommen hat. Wir könnten den Redirect auch so schreiben:<programlisting>redirect_to :action =&gt; 'pong'</programlisting></para>

    <para>Aber die Schreibweise mit den Routen ist sauberer und lässt sich
    später besser warten.</para>

    <para>Wenn wir jetzt zwischen 9 und 17 Uhr mit dem Browser die Seite <uri
    xlink:href="http://0.0.0.0:3000/game/ping">http://0.0.0.0:3000/game/ping</uri>
    aufrufen werden wir automatisch auf die Seite <uri
    xlink:href="http://0.0.0.0:3000/game/pong">http://0.0.0.0:3000/game/pong</uri>
    geleitet. Schauen wir uns das mal im Log an:<screen>Started GET "/game/ping" for 127.0.0.1 at 2010-09-01 13:44:37 +0200
  Processing by GameController#ping as HTML
Redirected to http://0.0.0.0:3000/game/pong
Completed 302 Found in 1ms


Started GET "/game/pong" for 127.0.0.1 at 2010-09-01 13:44:38 +0200
  Processing by GameController#pong as HTML
Rendered game/pong.html.erb within layouts/application (1.6ms)
Completed 200 OK in 5ms (Views: 4.9ms | ActiveRecord: 0.0ms)
</screen></para>

    <para>Wie Sie sehen wurde zwar im ersten Schritt die Methode
    <methodname>ping</methodname> im Controller
    <classname>GameController</classname> aufgerufen, aber danach fand ein
    Redirect zur Methode <methodname>pong</methodname> statt.</para>

    <para>Auf die Details und einzelnen Möglichkeiten des Redirects gehen wir
    später im jeweils konkreten Fall ein. Nur schon soviel vorweg: Man kann
    nicht nur auf eine andere Methode, sondern auch auf einen anderen
    Controller oder eine ganz andere Seite redirecten.</para>

    <section xml:id="warum-redirects">
      <title>Warum Redirects?</title>

      <indexterm>
        <primary>Redirects</primary>
      </indexterm>

      <indexterm>
        <primary>Routing</primary>
      </indexterm>

      <para>Beim obigen Beispiel fragt man sich natürlich, warum man denn im
      Controller einen Redirect einbaut und nicht direkt die Routen ändert.
      Das ist der Nachteil der Methode <quote>wir benutzen nur bisheriges
      Wissen</quote>. Schon in <xref linkend="scaffolding" /> werden Sie
      verstehen warum Redirects so praktisch sind. Sie können z.B. in einem
      Controller überprüfen, ob bestimmte Eingabedaten valide sind oder nicht,
      und wenn etwas fehlt zur ursprünglichen Eingabeseite redirecten. Das
      wäre mit einer statischen Route nicht lösbar.</para>

      <para>Allerdings muss man beim Programmieren auch darauf achten, nicht
      beliebig viele Redirects einzubauen. Wenn man tatsächlich mal in der
      Versuchung kommen zwei oder mehr Redirects hintereinander zu setzen
      (also in verschiedene Methoden), dann sollte man einen Schritt zurück
      gehen und sich Gedanken über die Gesamtidee machen. Meist geht es dann
      anders einfacher und sauberer.</para>
    </section>
  </section>

  <section xml:id="flash">
    <title xml:id="flash.title">Flash-Meldungen (Flash messages)</title>

    <indexterm>
      <primary>Flash-Meldungen</primary>
    </indexterm>

    <indexterm>
      <primary>Einblendungen</primary>

      <see>Flash-Meldungen</see>
    </indexterm>

    <indexterm>
      <primary>Redirects</primary>
    </indexterm>

    <para>Der Begriff <quote><foreignphrase xml:lang="en">Flash
    messages</foreignphrase></quote> oder <quote>Flash-Meldungen</quote> ist
    meiner Meinung nach denkbar ungeeignet gewählt worden. Mit dem
    <quote><foreignphrase xml:lang="en">Flash</foreignphrase></quote>
    assoziiert fast jeder mehr oder weniger bunte Webseiten, die mit dem
    Adobe-Shockwave-Flash-Plug-in realisiert wurden. Aber in Rails sind
    Flash-Nachrichten etwas ganz anderes. Das sind Meldungen, die nach einem
    Redirect (siehe <xref linkend="redirects" />) auf der neuen Seite
    angezeigt werden.</para>

    <para>Flash-Nachrichten sind quasi gute Freunde von Redirects. Nicht
    selten arbeiten beide im Team, um dem User Feedback über eine gerade
    vollzogene Aktion zu geben. Ein typisches Beispiel einer Flash-Meldung ist
    das Feedback des Systems, wenn ein User sich eingeloggt hat. Dann wird er
    oft wieder auf die ursprüngliche Seite <quote>redirectet</quote> und
    bekommt zusätzlich noch das Feedback: <quote>Sie sind jetzt
    eingeloggt.</quote></para>

    <note>
      <para>Der englische Begriff <foreignphrase xml:lang="en">Flash
      message</foreignphrase> lässt sich hier halbwegs gut mit
      <emphasis>Einblendung</emphasis> / <emphasis>eingeblendete
      Meldung</emphasis> übersetzen.</para>
    </note>

    <para>Wir bauen als Beispiel noch mal das Ping-Pong-Szenario aus <xref
    linkend="redirects" /> auf:<screen>stefan@swmbp 0 1.9.2-p0 ~$ <command>rails new pingpong</command>
      create  
      create  README
      <replaceable>[...]</replaceable>
      create  vendor/plugins/.gitkeep

stefan@swmbp 0 1.9.2-p0 ~$ <command>cd pingpong</command>
stefan@swmbp 0 1.9.2-p0 pingpong$ <command>bundle install</command>
Fetching source index for http://rubygems.org/
Using rake (0.8.7) 
<replaceable>[...]</replaceable>
Your bundle was installed to `/Users/stefan/.rvm/gems/ruby-1.9.2-p0`

stefan@swmbp 0 1.9.2-p0 pingpong$ <command>rails generate controller Game ping pong</command>
      create  app/controllers/game_controller.rb
      <replaceable>[...]</replaceable>
      create      test/unit/helpers/game_helper_test.rb

stefan@swmbp 0 1.9.2-p0 pingpong$ </screen></para>

    <para>Die <filename>app/controllers/game_controller.rb</filename> füllen
    wir mit folgendem Inhalt:<programlisting>class GameController &lt; ApplicationController
  def ping
    <emphasis role="bold">redirect_to game_pong_path</emphasis>
  end

  def pong
  end

end
</programlisting></para>

    <para>Jetzt starten wir den Rails-Web-Server und gehen mal per Browser auf
    <uri
    xlink:href="http://0.0.0.0:3000/game/pong">http://0.0.0.0:3000/game/pong</uri>
    und auf <uri
    xlink:href="http://0.0.0.0:3000/game/ping">http://0.0.0.0:3000/game/ping</uri>:<screen>stefan@swmbp 0 1.9.2-p0 pingpong$ <command>rails server</command>
=&gt; Booting WEBrick
=&gt; Rails 3.0.0 application starting in development on http://0.0.0.0:3000
=&gt; Call with -d to detach
=&gt; Ctrl-C to shutdown server
[2010-09-02 14:30:31] INFO  WEBrick 1.3.1
[2010-09-02 14:30:31] INFO  ruby 1.9.2 (2010-08-18) [x86_64-darwin10.4.0]
[2010-09-02 14:30:31] INFO  WEBrick::HTTPServer#start: pid=49354 port=3000


Started GET "/game/pong" for 127.0.0.1 at 2010-09-02 14:31:04 +0200
  Processing by GameController#pong as HTML
Rendered game/pong.html.erb within layouts/application (1.6ms)
Completed 200 OK in 5ms (Views: 4.8ms | ActiveRecord: 0.0ms)


Started GET "/game/ping" for 127.0.0.1 at 2010-09-02 14:31:08 +0200
  Processing by GameController#ping as HTML
Redirected to http://0.0.0.0:3000/game/pong
Completed 302 Found in 1ms


Started GET "/game/pong" for 127.0.0.1 at 2010-09-02 14:31:08 +0200
  Processing by GameController#pong as HTML
Rendered game/pong.html.erb within layouts/application (1.4ms)
Completed 200 OK in 5ms (Views: 4.5ms | ActiveRecord: 0.0ms)
</screen></para>

    <para>Wie nicht anders zu erwarten war: Egal, welche der beiden URLs wir
    aufrufen, am Ende wird immer <uri
    xlink:href="http://0.0.0.0:3000/game/pong">http://0.0.0.0:3000/game/pong</uri>
    angezeigt. Wäre es nicht schön, wenn wir beim Redirect von
    <literal>ping</literal> auf <literal>pong</literal> dem Anwender eine
    Nachricht anzeigen könnten? Jetzt raten Sie mal, wie so eine Nachricht bei
    Rails genannt wird? Ja, genau! Eine Flash-Nachricht!</para>

    <para>Bitte erweitern Sie die Datei
    <filename>app/controllers/game_controller.rb</filename> wie
    folgt:<programlisting>class GameController &lt; ApplicationController
  def ping
    <emphasis role="bold">redirect_to game_pong_path, :notice =&gt; 'Ich wurde von Ping redirected.'</emphasis>
  end

  def pong
  end

end</programlisting></para>

    <para>Und in der
    <filename>app/views/layouts/application.html.erb</filename> müssen wir
    auch noch eine Kleinigkeit einbauen:<programlisting>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Pingpong&lt;/title&gt;
  &lt;%= stylesheet_link_tag :all %&gt;
  &lt;%= javascript_include_tag :defaults %&gt;
  &lt;%= csrf_meta_tag %&gt;
&lt;/head&gt;
&lt;body&gt;

<emphasis role="bold">&lt;% if (defined? notice) != nil and ! notice.blank? %&gt;
&lt;p class="notice"&gt;&lt;%= notice %&gt;&lt;/p&gt;
&lt;% end %&gt;</emphasis>

&lt;%= yield %&gt;

&lt;/body&gt;
&lt;/html&gt;
</programlisting></para>

    <para>Beim Aufruf von <uri
    xlink:href="http://0.0.0.0:3000/game/pong">http://0.0.0.0:3000/game/pong</uri>
    bekommen wir weiterhin normal die Pong-Seite angezeigt. Beim Aufruf von
    <uri
    xlink:href="http://0.0.0.0:3000/game/pong">http://0.0.0.0:3000/game/ping</uri>
    werden wir aber zur Pong-Seite redirectet und bekommen oben die
    Flash-Nachricht angezeigt:<screenshot>
        <info>
          <title>Pong-Seite mit Flash-Meldung</title>
        </info>

        <mediaobject>
          <imageobject>
            <imagedata fileref="screenshots/flash_pong_notice.jpg"></imagedata>
          </imageobject>
        </mediaobject>
      </screenshot></para>

    <tip>
      <para>Wenn Sie später mal eine Flash-Nachricht nicht angezeigt bekommen,
      dann überprüfen Sie im View, ob dort die Flash-Nachricht überhaupt
      ausgegeben wird.</para>
    </tip>

    <section xml:id="verschiedene_arten_von_flash_nachrichten">
      <title
      xml:id="verschiedene_arten_von_flash_nachrichten.title">Verschiedene
      Arten von Flash-Meldungen</title>

      <indexterm>
        <primary>Flash-Meldungen</primary>
      </indexterm>

      <para>Per default werden die Arten <literal>error</literal> (Fehler),
      <literal>warning</literal> (Warnung) und <literal>notice</literal>
      (Notiz, Hinweis) unterschieden. Allerdings kann man auch selber eine
      Kategorie erfinden und diese später im View abfragen. Beim Arbeiten mit
      <xref linkend="scaffolding" /> werden Sie Beispiele für die
      verschiedenen Arten finden.</para>
    </section>

    <section xml:id="neue_flash_redirect_schreibweise">
      <title xml:id="neue_flash_redirect_schreibweise.title">Verschiedene
      Syntaxen</title>

      <indexterm>
        <primary>Flash-Meldungen</primary>
      </indexterm>

      <para>Je nach Wissen und Vorliebe eines Programmierers werden Sie in der
      Praxis auf verschiedene Syntaxen von Flash-Nachrichten treffen. Ich will
      mich nicht an der Diskussion über die beste Syntax beteiligen (dafür
      finde ich es einfach zu unwichtig), aber ich möchte Ihnen kurz die zwei
      häufigsten Möglichkeiten darstellen:<itemizedlist>
          <listitem>
            <para><programlisting>redirect_to game_pong_path, :notice =&gt; 'Ich wurde von Ping redirectet.'</programlisting></para>
          </listitem>

          <listitem>
            <para><programlisting>flash[:notice] = 'Ich wurde von Ping redirectet.'
redirect_to :action =&gt; :pong</programlisting></para>
          </listitem>
        </itemizedlist></para>
    </section>

    <section>
      <title>Warum gibt es überhaupt Flash-Nachrichten?</title>

      <indexterm>
        <primary>Flash-Meldungen</primary>
      </indexterm>

      <para>Sie werden sich vielleicht fragen: <quote>Warum gibt es
      Flash-Nachrichten? Das kann ich mir ja auch selber bauen, wenn ich es
      brauche.</quote> Stimmt. Flash-Nachrichten haben hauptsächlich den
      Vorteil, dass sie einen definierten und für alle Programmierer gleichen
      Weg zur Verfügung stellen. So muss man nicht das Rad neu
      erfinden.</para>
    </section>
  </section>

  <section xml:id="die_console" xml:lang="">
    <title xml:base="" xml:id="die_console.title">Die Rails-Konsole
    (Console)</title>

    <indexterm>
      <primary>Rails</primary>

      <secondary>Console</secondary>
    </indexterm>

    <indexterm>
      <primary>Console</primary>
    </indexterm>

    <indexterm>
      <primary>Konsole</primary>

      <see>Console</see>
    </indexterm>

    <para>Die <foreignphrase xml:lang="en">Console</foreignphrase> in Rails
    ist nichts weiter als ein aufgebohrtes <literal>irb</literal> (siehe <xref
    linkend="irb" />). Sowohl beim Entwicklen als auch bei der Administration
    ist die Console sehr praktisch, da die komplete Rails-Umgebung abgebildet
    wird und zur Verfügung steht. So kann man leicht mal eine Methode
    ausprobieren ohne dafür direkt ein eigenes Programm zu schreiben.</para>

    <para>Erzeugen wir kurz ein Rails-Projekt mit einem Controller um mit der
    Console zu arbeiten:<screen>stefan@swmbp 0 1.9.2-p0 ~$ <command>rails new pingpong</command>
      create  
      create  README
      create  Rakefile
      <replaceable>[...]</replaceable>
      create  vendor/plugins
      create  vendor/plugins/.gitkeep

stefan@swmbp 0 1.9.2-p0 ~$ <command>cd pingpong</command>
stefan@swmbp 0 1.9.2-p0 pingpong$ <command>bundle install</command>
Fetching source index for http://rubygems.org/
Using rake (0.8.7) 
<replaceable>[...]</replaceable>
Your bundle was installed to `/Users/stefan/.rvm/gems/ruby-1.9.2-p0`

stefan@swmbp 0 1.9.2-p0 pingpong$ <command>rails generate controller Game ping pong</command>
      create  app/controllers/game_controller.rb
       route  get "game/pong"
      <replaceable>[...]</replaceable>
      invoke    test_unit
      create      test/unit/helpers/game_helper_test.rb

stefan@swmbp 0 1.9.2-p0 pingpong$ </screen></para>

    <para>Die Rails-Console wird mit dem Befehl <command>rails
    console</command> gestartet:<screen>stefan@swmbp 0 1.9.2-p0 testproject$ <command>rails console</command>
Loading development environment (Rails 3.0.0)
ruby-1.9.2-p0 &gt; </screen></para>

    <para>Und mit <command>exit</command> kommt man wieder raus:<screen>ruby-1.9.2-p0 &gt; <command>exit</command>
stefan@swmbp 0 1.9.2-p0 testproject$ </screen></para>

    <para>In der Console hat man Zugriff auf alle Variablen, die man auch
    später in der richtigen Applikation hat:<screen>stefan@swmbp 0 1.9.2-p0 pingpong$ <command>rails console</command>
Loading development environment (Rails 3.0.0)
ruby-1.9.2-p0 &gt; <command>RAILS_ENV</command>
 =&gt; "development" 
ruby-1.9.2-p0 &gt; <command>RAILS_ROOT</command>
 =&gt; "/Users/stefan/pingpong" 
ruby-1.9.2-p0 &gt; <command>exit</command>
stefan@swmbp 0 1.9.2-p0 testproject$ </screen></para>

    <para><indexterm>
        <primary>app</primary>
      </indexterm><indexterm>
        <primary>Routing</primary>
      </indexterm>Ganz praktisch ist auch <command>app</command>, um
    verschiedene Routing-Sachen zu analysieren:<screen>stefan@swmbp 0 1.9.2-p0 pingpong$ <command>rails console</command>
Loading development environment (Rails 3.0.0)
ruby-1.9.2-p0 &gt; <command>app.url_for(:controller =&gt; 'game', :action =&gt; 'ping')</command>
 =&gt; "http://www.example.com/game/ping" 
ruby-1.9.2-p0 &gt; <command>app.get 'game/ping'</command>
 =&gt; 200 
ruby-1.9.2-p0 &gt; <command>app.get 'game/nicht_existente_action'</command>
 =&gt; 404 
ruby-1.9.2-p0 &gt; <command>exit</command>
stefan@swmbp 0 1.9.2-p0 pingpong$</screen></para>

    <para>Die Console ist in der Theorie schwer zu erklären. Schon in <xref
    linkend="activerecord_chapter" /> werden Sie mehr mit der Console arbeiten
    und die Vorteile zu schätzen lernen.</para>
  </section>
</chapter>
