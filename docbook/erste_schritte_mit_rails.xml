<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="erste_schritte_mit_rails" xml:lang="de"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title xml:id="erste_schritte_mit_rails.title">Erste Schritte mit
  Rails</title>

  <indexterm>
    <primary>Rails</primary>

    <secondary>Einleitung</secondary>
  </indexterm>

  <indexterm>
    <primary>Ruby on Rails</primary>

    <see>Rails</see>
  </indexterm>

  <section xml:id="erste-schritte-mit-rails-einleitung">
    <title>Einleitung</title>

    <para>Nachdem Sie sich mit <xref linkend="ruby-grundlagen"/> mühsam in die
    Ruby-Grundlagen eingelesen haben, können wir jetzt spannender
    weitermachen. In diesem Kapitel starten wir ein erstes Rails-Projekt und
    arbeiten uns damit Stück für Stück in die Materie ein.</para>

    <para>Auch in diesem Kapitel wird es manchmal hoppla-hopp zugehen. Wir
    stoßen auf typische Henne-Ei-Probleme.</para>

    <section xml:id="arbeits-umgebung-development">
      <title>Arbeits-Umgebung (Development)</title>

      <para>Rails kennt drei verschiedene Arbeits-Umgebungen (<indexterm>
          <primary>Environments</primary>
        </indexterm><indexterm>
          <primary>Rails</primary>

          <secondary>Environments</secondary>

          <see>Environments</see>
        </indexterm><foreignphrase
      xml:lang="en">Environments</foreignphrase>):<itemizedlist>
          <listitem>
            <para><foreignphrase
            xml:lang="en">Development</foreignphrase><indexterm>
                <primary>Development</primary>

                <secondary>Environment</secondary>
              </indexterm></para>
          </listitem>

          <listitem>
            <para><foreignphrase xml:lang="en">Test</foreignphrase><indexterm>
                <primary>Test</primary>

                <secondary>Environment</secondary>
              </indexterm></para>
          </listitem>

          <listitem>
            <para><foreignphrase
            xml:lang="en">Production</foreignphrase><indexterm>
                <primary>Production</primary>

                <secondary>Environment</secondary>
              </indexterm></para>
          </listitem>
        </itemizedlist></para>

      <para>Wir arbeiten in diesem Kapitel nur mit der Development-Umgebung.
      Sobald Sie ein besseres Gefühl für Rails bekommen haben, beginnen wir
      mit Tests und benötigen dafür die entsprechende Umgebung (dort wird z.
      B. beim Start eines Tests die Test-Datenbank neu gefüllt und danach
      gelöscht). Später erkläre ich Ihnen dann die verschiedenen Szenarien,
      wie Sie Ihre Rails-Applikation aus der Development-Umgebung in die
      Production-Umgebung ausrollen können.</para>

      <para>Die Development-Umgebung bringt bis auf einen Editor und einen
      Web-Browser alles mit, was Sie zum Entwickeln benötigen. So müssen Sie
      nicht extra einen Web-Server installieren, sondern können den
      eingebauten Rails-Web-Server benutzen. Der besticht nicht durch extreme
      Performance, aber das benötigen wir bei der Entwicklung ja auch nicht.
      Später kann man dann auf große Web-Server wie
      <application>Apache</application> umsteigen. Das Gleiche gilt für die
      Datenbank.</para>

      <para>Um in der Development-Umgebung zu arbeiten, müssen Sie erst mal
      nichts verändern – alle Befehle arbeiten per Default.</para>

      <section xml:id="sqlite3_datenbank_default">
        <title>SQLite-3-Datenbank</title>

        <indexterm>
          <primary>SQLite</primary>
        </indexterm>

        <para>Auch bei der Datenbank geht es in diesem Kapitel nicht um
        optimale Performance, sondern um einen einfachen Einstieg. Deshalb
        benutzen wir die SQLite-3-Datenbank. Dafür haben Sie bereits alles
        fertig installiert und müssen sich um nichts kümmern. Später erkläre
        ich Ihnen dann, wie Sie andere Datenbanken (z. B. MySQL) ansteuern
        können.</para>
      </section>
    </section>

    <section xml:id="warum_english">
      <title xml:id="warum_english.title">Warum alles auf Englisch?</title>

      <para>Ganz tief im Herzen liebt Rails die englische Sprache. Das ist
      fast ein wenig ironisch, weil der Erfinder David Heinemeier Hansson
      (<quote>DHH</quote>) ja aus Dänemark stammt (er lebt und arbeitet heute
      in Chicago).</para>

      <para>Rails' Liebe zur englischen Sprache muss man akzeptieren und
      sollte sogar versuchen, sie zu übernehmen. Vieles wird dadurch einfacher
      und logischer. Ein Großteil des Codes ist dann fast normal zu lesen.
      <indexterm>
          <primary>Inflections</primary>
        </indexterm><indexterm>
          <primary>Inflector</primary>

          <see>Inflections</see>
        </indexterm><indexterm>
          <primary>Flexion</primary>

          <see>Inflections</see>
        </indexterm><indexterm>
          <primary>Pluralization</primary>

          <see>Inflections</see>
        </indexterm><indexterm>
          <primary>Singularization</primary>

          <see>Inflections</see>
        </indexterm>So verwenden sehr viele Mechanismen automagisch Plural
      oder Singular von englischen Wörtern. Wenn man sich damit anfreundet,
      Datenbankfelder und -tabellen mit englischen Begriffen zu benennen, dann
      kann man die ganze Macht dieser Magie ausnutzen. Diesen Mechanismus
      nennt man <code>Inflector</code> <footnote>
          <para>siehe <uri
          xlink:href="http://api.rubyonrails.org/classes/ActiveSupport/Inflector.html">http://api.rubyonrails.org/classes/ActiveSupport/Inflector.html</uri></para>
        </footnote> oder <foreignphrase
      xml:lang="en">Inflections</foreignphrase> (Beugungen / Flexionen
      <footnote>
          <para>siehe <uri
          xlink:href="http://de.wikipedia.org/wiki/Flexion">http://de.wikipedia.org/wiki/Flexion</uri></para>
        </footnote>).</para>

      <para>Im Buch verwende ich für Variablen, Klassen und Methoden englische
      Namen. Die Kommentare sind auf Deutsch geschrieben. Falls Sie bei
      internationalen Projekten mitmachen, sollten Sie logischerweise auch die
      Kommentare auf Englisch schreiben. Ja, ja, … gut geschriebener Code
      braucht keine Kommentare. ;-)</para>
    </section>
  </section>

  <section xml:id="statische_webseiten">
    <title xml:id="statische_webseiten.title">Statische Inhalte (HTML- und
    Grafik-Dateien)</title>

    <para>Jeder, der diesen Text liest, wird sich darüber im Klaren sein, dass
    man mit Rails irgendwie Webseiten ausliefern kann. Die Frage ist nur, wie.
    Legen wir erst mal ein neues Rails-Projekt an.</para>

    <section xml:id="rails-projekt-anlegen">
      <title>Rails-Projekt anlegen</title>

      <indexterm>
        <primary>Rails</primary>

        <secondary>Projekt anlegen</secondary>
      </indexterm>

      <para>Bevor wir hier überhaupt mit dem Allereinfachsten beginnen,
      überprüfen Sie bitte, ob Sie eine Ruby-Version 1.9.3 einsetzen:<screen>MacBook:~ xyz$ <command>ruby -v</command>
ruby 1.9.3p194 (2012-04-20 revision 35410) [x86_64-darwin11.3.0]
MacBook:~ xyz$</screen></para>

      <para>Und als Nächstes überprüfen wir, ob auch Rails 3.2 installiert
      ist:<screen>MacBook:~ xyz$ <command>rails -v</command>
Rails 3.2.3
MacBook:~ xyz$ </screen></para>

      <para>Das sieht gut aus. Falls Sie eine ältere Ruby- oder Rails-Version
      installiert haben, dann installieren Sie vor dem Weiterlesen die
      aktuelle Version (siehe <xref
      linkend="installation-und-versionsauswahl"/>).</para>

      <para>Jetzt erstellen wir zuerst ein neues Rails-Projekt namens
      <literal>testproject</literal>. Da Ruby on Rails ein Framework ist,
      müssen wir als Erstes die entsprechende Verzeichnisstruktur und die
      Grundkonfiguration inkl. einiger Skripte einrichten. Das geht mit dem
      Befehl <command>rails new testproject</command> ratzfatz:<screen>MacBook:~ xyz$ <command>rails new testproject</command>
      create  
      create  README.rdoc
      create  Rakefile
      create  config.ru
      create  .gitignore
      create  Gemfile
      create  app
      create  app/assets/images/rails.png
      create  app/assets/javascripts/application.js

[...]

Using rails (3.2.3) 
Installing sass (3.1.16) 
Installing sass-rails (3.2.5) 
Installing sqlite3 (1.3.6) with native extensions 
Installing uglifier (1.2.4) 
Your bundle is complete! Use `bundle show [gemname]` to see where a bundled gem is installed.
MacBook:~ xyz$</screen></para>

      <para><indexterm>
          <primary>bundle</primary>
        </indexterm><indexterm>
          <primary>bundler</primary>
        </indexterm><indexterm>
          <primary>Gems</primary>
        </indexterm>Bei früheren Rails-Versionen musste als erstes ein
      <command>bundle install</command> ausgeführt werden. Ab Rails 3.2 wird
      dies aber automatisch beim Erstellen eines neuen Rails-Projektes
      gemacht. Damit stehen dem Rails-Projekt alle benötigten <foreignphrase
      xml:lang="en">Gems</foreignphrase> zur Verfügung. Ein <foreignphrase
      xml:lang="en">Gem</foreignphrase> ist eine Art Softwarebibliothek. Man
      kann damit bestimmte Funktionalitäten fix und fertig einbinden, ohne das
      Rad neu erfinden zu müssen.</para>

      <para><indexterm>
          <primary>Webrick</primary>
        </indexterm><indexterm>
          <primary>Web-Server</primary>

          <secondary>mitgelieferter</secondary>
        </indexterm>Als Nächstes prüfen wir, ob die neue Rails-Applikation
      funktioniert. Dazu starten wir den mitgelieferten kleinen
      Web-Server.<note>
          <para>Nein, keine Angst. Das ist lediglich der Web-Server zum
          Entwickeln – für diesen Zweck ist er sehr praktisch.</para>
        </note><note>
          <para>Bei verschiedenen Betriebssystemen (z. B. Mac OS X) erscheint
          beim ersten Starten einer Rails-Applikation – je nach
          Firewall-Einstellung – ein Fenster, das Sie fragt, ob die Firewall
          die entsprechende Verbindung erlauben soll. Da wir lokal arbeiten,
          können Sie das ruhigen Gewissens bejahen.</para>
        </note><screen>MacBook:~ xyz$ <command>cd testproject</command> 
MacBook:testproject xyz$ <command>rails server</command>
=&gt; Booting WEBrick
=&gt; Rails 3.2.3 application starting in development on http://0.0.0.0:3000
=&gt; Call with -d to detach
=&gt; Ctrl-C to shutdown server
[2012-04-24 09:52:21] INFO  WEBrick 1.3.1
[2012-04-24 09:52:21] INFO  ruby 1.9.3 (2012-04-20) [x86_64-darwin11.3.0]
[2012-04-24 09:52:21] INFO  WEBrick::HTTPServer#start: pid=57749 port=3000</screen></para>

      <para>Der Start der Rails-Applikation sieht gut aus. Er sagt
      uns:<screen>=&gt; Rails 3.2.3 application starting in development on http://0.0.0.0:3000</screen></para>

      <para>Dann rufen wir die URL <uri
      xlink:href="http://0.0.0.0:3000">http://0.0.0.0:3000</uri> oder <uri
      xlink:href="http://localhost:3000">http://localhost:3000</uri> im
      Web-Browser auf.<screenshot>
          <info>
            <title>Default Index-Seite in einem frischen
            Rails-Projekt.</title>
          </info>

          <mediaobject>
            <imageobject>
              <imagedata fileref="screenshots/virgin_rails_app.jpg"/>
            </imageobject>

            <textobject>
              <simpara>Welcome aboard</simpara>

              <simpara>You're riding Ruby on Rails!</simpara>

              <para>…</para>
            </textobject>
          </mediaobject>
        </screenshot></para>

      <para>Sieht gut aus. Rails scheint zu funktionieren. Wenn wir jetzt auf
      den Link <quote><foreignphrase xml:lang="en">About your application's
      environment</foreignphrase></quote> klicken, erscheint eine Aufstellung
      der aktuellen Umgebung.<screenshot>
          <info>
            <title>Auflistung der Start-Umgebung der
            Rails-Applikation.</title>
          </info>

          <mediaobject>
            <imageobject>
              <imagedata fileref="screenshots/virgin_rails_app_env_info.jpg"/>
            </imageobject>
          </mediaobject>
        </screenshot></para>

      <para>Gleichzeitig wird im Log des Web-Servers Folgendes
      angezeigt:<screen>Started GET "/rails/info/properties" for 127.0.0.1 at 2012-04-24 09:59:53 +0200
Processing by Rails::InfoController#properties as */*
  Rendered inline template (2.5ms)
Completed 200 OK in 37ms (Views: 36.9ms | ActiveRecord: 0.0ms)</screen></para>

      <para>Da beim Aufruf der ersten Startseite kein entsprechender Eintrag
      erschien, muss es sich um zwei verschiedenartige Seiten handeln. Die
      erste Seite ist tatsächlich eine statische HTML-Seite, die unter
      <filename>public/index.html</filename> abgespeichert ist, und der Link,
      auf den wir geklickt haben führt ein Rails-Programm aus.</para>

      <para>Mit <keycombo>
          <keycap function="control">Ctrl</keycap>

          <keycap>C</keycap>
        </keycombo> können Sie den Web-Server wieder stoppen.</para>
    </section>

    <section xml:id="rails-statische-inhalte">
      <title>Statische Seiten</title>

      <indexterm>
        <primary>Statische Seiten/Inhalte</primary>

        <secondary>in einer Rails-Applikation</secondary>
      </indexterm>

      <indexterm>
        <primary>public</primary>

        <secondary>Verzeichnis</secondary>
      </indexterm>

      <para>Wie eben gesehen, gibt es bestimmte statische Seiten, Bilder und
      JavaScript-Dateien, die von Rails automatisch ausgeliefert werden.
      Erinnern wir uns noch mal an eine Teilausgabe vom Befehl <command>rails
      new testproject</command>: <screen>MacBook:~ xyz$ <command>rails new testproject</command>
      create  

      [...]

      create  public
      create  public/404.html
      create  public/422.html
      create  public/500.html
      create  public/favicon.ico
      create  public/index.html
      create  public/robots.txt

      [...]
</screen></para>

      <para>Der Verzeichnisname <filename>public</filename> und die darin
      enthaltenen Dateien sehen schon sehr nach statischen Seiten aus.
      <indexterm>
          <primary>Hello World</primary>

          <secondary>In Rails</secondary>
        </indexterm><indexterm>
          <primary>Hallo Welt</primary>

          <see>Hello World</see>
        </indexterm>Probieren wir es einfach mal aus und legen die Datei
      <filename>public/hello-world.html</filename> mit folgendem Inhalt
      an:<programlisting>&lt;html&gt;
&lt;title&gt;Hello World!&lt;/title&gt;
&lt;body&gt;
  &lt;h1&gt;Hello World!&lt;/h1&gt;
  &lt;p&gt;Eine Beispielseite.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</programlisting></para>

      <note>
        <para>Ich gehe davon aus, dass Sie rudimentäre HTML-Kenntnisse haben –
        für viel mehr reicht mein HTML-Wissen auch nicht ;-).</para>
      </note>

      <para>Jetzt noch den Rails-Web-Server starten:<screen>MacBook:testproject xyz$ <command>rails server</command>
=&gt; Booting WEBrick
=&gt; Rails 3.2.3 application starting in development on http://0.0.0.0:3000
=&gt; Call with -d to detach
=&gt; Ctrl-C to shutdown server
[2012-04-24 10:04:59] INFO  WEBrick 1.3.1
[2012-04-24 10:04:59] INFO  ruby 1.9.3 (2012-04-20) [x86_64-darwin11.3.0]
[2012-04-24 10:04:59] INFO  WEBrick::HTTPServer#start: pid=57880 port=3000</screen></para>

      <para>Diese Webseite können wir uns unter der URL <uri
      xlink:href="http://0.0.0.0:3000/hello-world">http://0.0.0.0:3000/hello-world</uri>
      anschauen:<screenshot>
          <info>
            <title>Hello-World-HTML-Seite</title>
          </info>

          <mediaobject>
            <imageobject>
              <imagedata fileref="screenshots/hello-world-html.jpg"/>
            </imageobject>

            <textobject>
              <para>Hello World!</para>
            </textobject>
          </mediaobject>
        </screenshot></para>

      <para>Wir können natürlich auch die URL <uri
      xlink:href="http://0.0.0.0:3000/hello-world.html">http://0.0.0.0:3000/hello-world.html</uri>
      nehmen. Allerdings sieht Rails HTML und damit die Datei-Endung
      <literal>.html</literal> quasi als Standard-Ausgabe-Format an und
      deshalb kann man sich das <quote><literal>.html</literal></quote> hier
      sparen.</para>

      <para>So, jetzt wissen Sie bereits, wie man gänzlich statische Seiten in
      Rails integrieren kann. Das ist für Seiten praktisch, die sich nie
      ändern und die auch dann funktionieren sollen, wenn Rails gerade z.B.
      wegen eines Updates nicht läuft. Im Produktivbetrieb wird meistens vor
      dem Rails-Server noch ein klassischer Webserver wie Apache oder Nginx
      geschaltet. Dieser ist dann in der Lage statische Dateien aus dem
      <filename>public</filename> Verzeichnis selbstständig
      auszuliefern.</para>

      <para>Mit <keycombo>
          <keycap function="control">Ctrl</keycap>

          <keycap>C</keycap>
        </keycombo> können Sie den Rails-Server wieder stoppen.</para>
    </section>
  </section>

  <section xml:id="dynamische_webseiten">
    <title xml:id="dynamische_webseiten.title">Dynamisch mit erb erzeugtes
    HTML</title>

    <indexterm>
      <primary>erb</primary>
    </indexterm>

    <indexterm>
      <primary>rhtml</primary>

      <see>erb</see>
    </indexterm>

    <indexterm>
      <primary>Templates</primary>

      <seealso>erb</seealso>

      <seealso>Views</seealso>

      <seealso>Layouts</seealso>
    </indexterm>

    <para>Kennen Sie PHP (ohne Frameworks)? Dann wird Ihnen der Inhalt einer
    <literal>erb</literal>-Datei sehr bekannt vorkommen. Es ist eine Mischung
    aus (beispielsweise) HTML und Ruby-Code. (<literal>erb</literal> steht für
    <foreignphrase xml:lang="en"><emphasis role="bold">e</emphasis>mbedded
    <emphasis role="bold">R</emphasis>u<emphasis
    role="bold">b</emphasis>y</foreignphrase>, also eingebettetes Ruby).
    Allerdings können wir eine solche <literal>erb</literal>-Webseite nicht
    einfach in das Verzeichnis <filename>public</filename> legen, da dort
    abgelegte Seiten 1:1 ausgeliefert werden und nicht durch einen
    <literal>erb</literal>-Parser gehen. Dummerweise müssen wir dafür jetzt
    direkt mit dem <indexterm>
        <primary>Model–View–Controller</primary>

        <see>MVC</see>
      </indexterm><indexterm>
        <primary>MVC</primary>
      </indexterm>MVC-Modell <footnote>
        <para><uri
        xlink:href="http://de.wikipedia.org/wiki/Model_View_Controller">http://de.wikipedia.org/wiki/Model_View_Controller</uri></para>
      </footnote>anrücken. Wir brauchen einen <indexterm>
        <primary>Controller</primary>
      </indexterm>Controller. Den können wir mit dem Befehl <command>rails
    generate controller</command> anlegen. Schauen wir uns mal die Hilfe
    an:<screen>MacBook:testproject xyz$ <command>rails generate controller</command>
Usage:
  rails generate controller NAME [action action] [options]

Options:
      [--skip-namespace]        # Skip namespace (affects only isolated applications)
      [--old-style-hash]        # Force using old style hash (:foo =&gt; 'bar') on Ruby &gt;= 1.9
  -e, [--template-engine=NAME]  # Template engine to be invoked
                                # Default: erb
  -t, [--test-framework=NAME]   # Test framework to be invoked
                                # Default: test_unit
      [--helper]                # Indicates when to generate helper
                                # Default: true
      [--assets]                # Indicates when to generate assets
                                # Default: true

Runtime options:
  -f, [--force]    # Overwrite files that already exist
  -p, [--pretend]  # Run but do not make any changes
  -q, [--quiet]    # Supress status output
  -s, [--skip]     # Skip files that already exist

Description:
    Stubs out a new controller and its views. Pass the controller name, either
    CamelCased or under_scored, and a list of views as arguments.

    To create a controller within a module, specify the controller name as a
    path like 'parent_module/controller_name'.

    This generates a controller class in app/controllers and invokes helper,
    template engine and test framework generators.

Example:
    `rails generate controller CreditCard open debit credit close`

    Credit card controller with URLs like /credit_card/debit.
        Controller:      app/controllers/credit_card_controller.rb
        Functional Test: test/functional/credit_card_controller_test.rb
        Views:           app/views/credit_card/debit.html.erb [...]
        Helper:          app/helpers/credit_card_helper.rb
MacBook:testproject xyz$</screen></para>

    <para>Aha! Unten ist freundlicherweise direkt ein Beispiel
    angegeben:<programlisting>rails generate controller CreditCard open debit credit close</programlisting>Passt
    aber nicht direkt für unseren Fall.</para>

    <para>Ich bin mutig und schlage vor, dass wir einfach Folgendes
    ausprobieren:<screen>MacBook:testproject xyz$ <command>rails generate controller Example test</command>
      create  app/controllers/example_controller.rb
       route  get "example/test"
      invoke  erb
      create    app/views/example
      create    app/views/example/test.html.erb
      invoke  test_unit
      create    test/functional/example_controller_test.rb
      invoke  helper
      create    app/helpers/example_helper.rb
      invoke    test_unit
      create      test/unit/helpers/example_helper_test.rb
      invoke  assets
      invoke    coffee
      create      app/assets/javascripts/example.js.coffee
      invoke    scss
      create      app/assets/stylesheets/example.css.scss
MacBook:testproject xyz$</screen></para>

    <para>Puhhh …, da wird ja direkt 'ne ganze Menge erstellt. Unter anderem
    eine Datei <filename>app/views/example/test.html.erb</filename>. Schauen
    wir uns diese nachfolgend an:<screen>MacBook:testproject xyz$ <command>cat app/views/example/test.html.erb</command> 
&lt;h1&gt;Example#test&lt;/h1&gt;
&lt;p&gt;Find me in app/views/example/test.html.erb&lt;/p&gt;
MacBook:testproject xyz$</screen></para>

    <para>Ist HTML, aber für eine valide HTML-Seite <quote>fehlt</quote> oben
    und unten etwas (der fehlende HTML-"Rest" wird in <xref
    linkend="erb_layouts"/> erklärt). Zum Testen starten wir den
    Web-Server<screen>MacBook:testproject xyz$ <command>rails server</command>
=&gt; Booting WEBrick
=&gt; Rails 3.2.3 application starting in development on http://0.0.0.0:3000
=&gt; Call with -d to detach
=&gt; Ctrl-C to shutdown server
[2012-04-24 10:13:48] INFO  WEBrick 1.3.1
[2012-04-24 10:13:48] INFO  ruby 1.9.3 (2012-04-20) [x86_64-darwin11.3.0]
[2012-04-24 10:13:48] INFO  WEBrick::HTTPServer#start: pid=57898 port=3000</screen></para>

    <para>und schauen uns die Webseite unter der URL <uri
    xlink:href="http://0.0.0.0:3000/example/test">http://0.0.0.0:3000/example/test</uri>
    im Browser an:<screenshot>
        <info>
          <title>test.html.erb-Webseite</title>
        </info>

        <mediaobject>
          <imageobject>
            <imagedata fileref="screenshots/example-test-erb.jpg"/>
          </imageobject>
        </mediaobject>
      </screenshot></para>

    <para>Im <indexterm>
        <primary>Log</primary>
      </indexterm>Log <filename>log/development.log</filename> finden wir den
    folgenden Eintrag:<programlisting>Started GET "/example/test" for 127.0.0.1 at 2012-04-24 10:14:18 +0200
Processing by ExampleController#test as HTML
  Rendered example/test.html.erb within layouts/application (1.9ms)
Compiled example.css  (9ms)  (pid 57898)
Compiled application.css  (18ms)  (pid 57898)
Compiled jquery.js  (4ms)  (pid 57898)
Compiled jquery_ujs.js  (0ms)  (pid 57898)
Compiled example.js  (160ms)  (pid 57898)
Compiled application.js  (198ms)  (pid 57898)
Completed 200 OK in 305ms (Views: 304.2ms | ActiveRecord: 0.0ms)</programlisting></para>

    <para>Das ist fast schon verständlich geschrieben. Es kam also vom
    <literal>localhost</literal> (127.0.0.1) ein HTTP-GET-Request für die URI
    <quote><literal>/example/test</literal></quote> rein. Die wurde dann
    anscheinend vom Controller <code>ExampleController</code> mit der Methode
    <methodname>test</methodname> als HTML gerendert. Zusätzlich wurde noch
    ein Satz von CSS und JavaScript Dateien kompiliert (darauf gehen wir
    später im Buch ein). Das Ganze hat hier ungefähr 305 ms gedauert.</para>

    <para>Jetzt müssen wir nur noch den Controller finden. Aber Sie haben
    Glück … ich weiß es nämlich. ;-) Alle Controller befinden sich im
    Verzeichnis <filename>app/controllers</filename>, und siehe da, dort ist
    auch tatsächlich die entsprechende Datei
    <filename>app/controllers/example_controller.rb</filename><screen>MacBook:testproject xyz$ <command>ls -l app/controllers/</command>
total 16
-rw-r--r--  1 xyz  staff  80 Apr 24 09:43 application_controller.rb
-rw-r--r--  1 xyz  staff  69 Apr 24 10:11 example_controller.rb
MacBook:testproject xyz$</screen></para>

    <para>Öffnen Sie die Datei bitte mit Ihrem
    Lieblingseditor:<programlisting>class ExampleController &lt; ApplicationController
  def test
  end
end</programlisting></para>

    <para>Das ist sehr übersichtlich. Der Controller
    <code>ExampleController</code> stammt vom
    <code>ApplicationController</code> ab und enthält aktuell genau eine
    Methode namens <methodname>test</methodname>. Und diese Methode hat keinen
    Inhalt.</para>

    <para><indexterm>
        <primary>Routing</primary>
      </indexterm><indexterm>
        <primary>routes.rb</primary>
      </indexterm><indexterm>
        <primary>Inflections</primary>
      </indexterm>Sie werden sich fragen, woher Rails weiß, dass bei dem
    URL-Pfad <uri>/example/test</uri> der Controller
    <code>ExampleController</code> und die Methode <code>test</code>
    abzuarbeiten sind. Das wird nämlich nicht durch eine magische Logik,
    sondern durch eine einfache <foreignphrase
    xml:lang="en">Routing</foreignphrase>-Konfiguration gesteuert. Diese
    finden Sie in der Datei <filename>config/routes.rb</filename> in der
    zweiten Zeile:<screen>MacBook:testproject xyz$ <command>cat config/routes.rb | grep example</command>
  get "example/test"
MacBook:testproject xyz$ </screen></para>

    <para>Diese Zeile wurde vom Befehl <command>rails generate
    controller</command> automatisch eingefügt. In der Routing-Datei können
    Sie auch beliebiges <foreignphrase xml:lang="en">Mapping</foreignphrase>
    vornehmen. Aber dazu später mehr. Aktuell sehen unsere Routen sehr einfach
    aus. Mit dem Befehl <command>rake routes</command> können wir diese
    abfragen:<screen>MacBook:testproject xyz$ <command>rake routes</command>
example_test GET /example/test(.:format) example#test
MacBook:testproject xyz$</screen></para>

    <para>Wir kümmern uns später noch genauer um die Routen (<xref
    linkend="routes"/>). Ich wollte es an dieser Stelle nur nicht gänzlich
    überspringen.</para>

    <important>
      <para>Eine statische Datei im Verzeichnis <filename>public</filename>
      hat immer eine höhere Priorität als eine Route in der
      <filename>config/routes.rb</filename>! Wenn wir also eine statische
      Datei <filename>public/example/test</filename> abspeichern würden, würde
      die Route nicht mehr greifen.</para>
    </important>

    <section xml:id="erb-programmieren">
      <title>Programmieren in einer erb-Datei</title>

      <indexterm>
        <primary>erb</primary>
      </indexterm>

      <para><literal>Erb</literal>-Seiten können Ruby-Code enthalten. Damit
      kann programmiert werden, und damit können diese Seiten dynamischen
      Inhalt bekommen.</para>

      <para>Fangen wir mit etwas ganz Einfachem an: der Addition von 1 und 1.
      Als Erstes probieren wir den Code im <literal>irb</literal> aus:<screen>MacBook:testproject xyz$ <command>irb</command>
1.9.3p194 :001 &gt; <command>1 + 1</command>
 =&gt; 2 
1.9.3p194 :002 &gt; <command>exit</command>
MacBook:testproject xyz$</screen></para>

      <para>Das war einfach. Die <literal>erb</literal>-Datei
      <filename>app/views/example/test.html.erb</filename> füllen wir wie
      folgt:<programlisting>&lt;h1&gt;Erste Versuche mit erb&lt;/h1&gt;
&lt;p&gt;Addition:
&lt;%= 1 + 1 %&gt;
&lt;/p&gt;
</programlisting></para>

      <para>Danach mit <command>rails server</command> den Web-Server starten
      (falls noch nicht getan) und per Browser auf die Seite gehen:<screenshot>
          <info>
            <title>Einfache Addition</title>
          </info>

          <mediaobject>
            <imageobject>
              <imagedata fileref="screenshots/erb_einfache_addition.jpg"/>
            </imageobject>
          </mediaobject>
        </screenshot></para>

      <para>Ruby-Code, dessen Ergebnis ausgegeben werden soll, wird von einem
      <code>&lt;%=</code> und einem <code>%&gt;</code> eingeschlossen. Es
      können nur Strings ausgegeben werden.</para>

      <para>Jetzt werden Sie sich vielleicht fragen: Wie kann denn das
      Ergebnis einer Addition von zwei Fixnums als Text angezeigt werden?
      Schauen wir erst mal im <literal>irb</literal> nach, ob es wirklich ein
      Fixnum ist:<screen>MacBook:testproject xyz$ <command>irb</command>
1.9.3p194 :001 &gt; <command>1.class</command>
 =&gt; Fixnum 
1.9.3p194 :002 &gt; <command>(1 + 1).class</command>
 =&gt; Fixnum 
1.9.3p194 :003 &gt; <command>exit</command>
MacBook:testproject xyz$</screen></para>

      <para>Ja, sowohl die Zahl 1 also auch das Ergebnis von 1 + 1 ist ein
      Fixnum. Was ist passiert? Rails ist so intelligent, alle Objekte in
      einem <indexterm>
          <primary>View</primary>
        </indexterm>View (das ist die Datei
      <filename>test.html.erb</filename>), die nicht bereits ein String sind,
      automatisch mit der Methode <indexterm>
          <primary>to_s()</primary>
        </indexterm><methodname>.to_s</methodname> aufzurufen, welche per
      Konvention immer den Inhalt des Objektes in einen String konvertiert.
      Noch mal kurz ins <literal>irb</literal>:<screen>MacBook:testproject xyz$ <command>irb</command>
1.9.3p194 :001 &gt; <command>(1 + 1)</command>
 =&gt; 2 
1.9.3p194 :002 &gt; <command>(1 + 1).class</command>
 =&gt; Fixnum 
1.9.3p194 :003 &gt; <command>(1 + 1).to_s</command>
 =&gt; "2" 
1.9.3p194 :004 &gt; <command>(1 + 1).to_s.class</command>
 =&gt; String 
1.9.3p194 :005 &gt; <command>exit</command>
MacBook:testproject xyz$</screen></para>

      <para>Das mit dem Ruby-Code schauen wir uns jetzt genauer an. In einer
      <filename>.html.erb</filename>-Datei gibt es zusätzlich zu den
      HTML-Elementen zwei Arten von Ruby-Code-Anweisungen:<itemizedlist>
          <listitem>
            <para><emphasis role="bold"><code>&lt;%
            <replaceable>…</replaceable> %&gt;</code></emphasis></para>

            <para>Führt den enthaltenen Ruby-Code aus, aber gibt nichts aus
            (außer Sie verwenden explizit soetwas wie <code>print</code> oder
            <code>puts</code>).</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold"><code>&lt;%=
            <replaceable>…</replaceable> %&gt;</code></emphasis></para>

            <para>Führt den enthaltenen Ruby-Code aus und gibt das Ergebnis
            als Text aus. Dabei werden seit Rails 3.0 automatisch bestimmte
            Zeichen <quote>escapt</quote>. Falls Sie einmal nicht escapten
            Text ausgeben möchten, so müssen Sie das mit
            <code>raw(string)</code> realisieren.</para>

            <para>Sofern also ein Objekt eine Methode
            <methodname>.to_s</methodname> hat oder das Objekt selber schon
            ein String ist, kann man es als Ergebnis im View innerhalb einer
            <code>&lt;%= <replaceable>…</replaceable> %&gt;</code> Kapselung
            ausgeben.</para>
          </listitem>
        </itemizedlist>Um ganz sicher zu sein, noch ein Beispiel. Wir ändern
      die <filename>app/views/example/test.html.erb</filename> wie
      folgt:<programlisting>&lt;p&gt;Schleife von 0 bis 5:
&lt;% (0..5).each do |i| %&gt;
&lt;%= "#{i}, " %&gt;
&lt;% end %&gt;
&lt;/p&gt;
</programlisting></para>

      <para>Das sieht dann im Browser so aus:<screenshot>
          <info>
            <title>Einfache Addition</title>
          </info>

          <mediaobject>
            <imageobject>
              <imagedata fileref="screenshots/erb_einfache_schleife.jpg"/>
            </imageobject>
          </mediaobject>
        </screenshot></para>

      <para>Schauen wir uns nachfolgend den HTML-Source-Code (-Quelltext) im
      Browser an:<programlisting>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Testproject&lt;/title&gt;
  &lt;link href="/assets/application.css?body=1" media="all" rel="stylesheet" type="text/css" /&gt;
&lt;link href="/assets/example.css?body=1" media="all" rel="stylesheet" type="text/css" /&gt;
  &lt;script src="/assets/jquery.js?body=1" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="/assets/jquery_ujs.js?body=1" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="/assets/example.js?body=1" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="/assets/application.js?body=1" type="text/javascript"&gt;&lt;/script&gt;
  &lt;meta content="authenticity_token" name="csrf-param" /&gt;
&lt;meta content="TDIallkBmGrMzsL6TC8Chet4r/X1yLK0tthFmIig4+E=" name="csrf-token" /&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;p&gt;Schleife von 0 bis 5:
0, 
1, 
2, 
3, 
4, 
5, 
&lt;/p&gt;


&lt;/body&gt;
&lt;/html&gt;</programlisting></para>

      <para>Alles klar? Es gibt zwei mögliche offene Fragen:<qandaset>
          <qandadiv>
            <qandaentry>
              <question>
                <para>Ich verstehe gar nichts. Mit dem Ruby-Code komme ich
                nicht zurecht. Können Sie das noch mal erklären?</para>
              </question>

              <answer>
                <para>Kann es sein, dass Sie <xref linkend="ruby-grundlagen"/>
                nicht komplett durchgearbeitet haben? Bitte nehmen Sie sich
                die Zeit dafür. Sonst macht hier das alles keinen Sinn.</para>
              </answer>
            </qandaentry>

            <qandaentry>
              <question>
                <para>Ich verstehe den Ruby-Code und die HTML-Ausgabe.
                Allerdings verstehe ich nicht, warum drum herum noch HTML-Code
                gerendert wurde, den ich gar nicht geschrieben habe. Woher
                kommt der, und kann ich ihn beeinflussen?</para>
              </question>

              <answer>
                <para>Sehr gute Frage! Dazu kommen wir sofort (siehe <xref
                linkend="erb_layouts"/>).</para>
              </answer>
            </qandaentry>
          </qandadiv>
        </qandaset></para>

      <para>Die Feinheiten von <literal>erb</literal> werden Sie jetzt Stück
      für Stück erlernen. Es handelt sich dabei nicht um Zauberei.</para>
    </section>

    <section xml:id="erb_layouts">
      <title xml:id="erb_layouts.title">Layouts</title>

      <indexterm>
        <primary>Layouts</primary>
      </indexterm>

      <indexterm>
        <primary>Views</primary>
      </indexterm>

      <indexterm>
        <primary>application.html.erb</primary>
      </indexterm>

      <indexterm>
        <primary>Templates</primary>
      </indexterm>

      <para>Die <literal>erb</literal>-Datei im Verzeichnis
      <filename>app/views/example/</filename> bildet nur den Kern der späteren
      HTML-Seite. Per Default wird immer eine automatisch generierte
      <filename>app/views/layouts/application.html.erb</filename> drum herum
      gerendert. Schauen wir uns die mal an:<screen>MacBook:testproject xyz$ <command>cat app/views/layouts/application.html.erb</command> 
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Testproject&lt;/title&gt;
  &lt;%= stylesheet_link_tag    "application", :media =&gt; "all" %&gt;
  &lt;%= javascript_include_tag "application" %&gt;
  &lt;%= csrf_meta_tags %&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;%= yield %&gt;

&lt;/body&gt;
&lt;/html&gt;
MacBook:testproject xyz$</screen></para>

      <para><indexterm>
          <primary>yield()</primary>
        </indexterm>Ich löse das Rätsel auf: Interessant ist die
      Zeile<programlisting>&lt;%= yield %&gt;</programlisting></para>

      <para>Mit <code>&lt;%= yield %&gt;</code> wird hier die View-Datei
      inkludiert. Die drei Zeilen mit den Stylesheets und dem JavaScript
      lassen wir erst mal so, wie sie sind. Damit werden default CSS und
      JavaScript Dateien eingebaut.</para>

      <para>Die Datei
      <filename>app/views/layouts/application.html.erb</filename> bietet Ihnen
      die Möglichkeit, das Grund-Layout für die gesamte Rails-Applikation
      festzulegen. Wenn Sie als Header für jede Seite ein
      <code>&lt;hr&gt;</code> und darüber einen Text eintragen wollen, dann
      können Sie das zwischen dem <code>&lt;%= yield %&gt;</code> und dem
      <code>&lt;body&gt;</code> Tag machen:<programlisting>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Testproject&lt;/title&gt;
  &lt;%= stylesheet_link_tag    "application", :media =&gt; "all" %&gt;
  &lt;%= javascript_include_tag "application" %&gt;
  &lt;%= csrf_meta_tags %&gt;
&lt;/head&gt;
&lt;body&gt;

<emphasis>&lt;p&gt;</emphasis>Ein Test.&lt;/p&gt;
&lt;hr&gt;

&lt;%= yield %&gt;

&lt;/body&gt;
&lt;/html&gt;
MacBook:testproject xyz$</programlisting></para>

      <para>Sie können aber auch im Verzeichnis
      <filename>app/views/layouts/</filename> noch andere Layouts anlegen und
      diese je nach Situation anwenden, aber lassen wir das erst mal. Wichtig
      ist, dass Sie die Grundidee verstehen.</para>
    </section>

    <section xml:id="erb_mit_programmierlogik">
      <title>Instanz-Variablen vom Controller zum View übergeben</title>

      <indexterm>
        <primary>MVC</primary>
      </indexterm>

      <indexterm>
        <primary>Model–View–Controller</primary>

        <see>MVC</see>
      </indexterm>

      <indexterm>
        <primary>Controller</primary>
      </indexterm>

      <indexterm>
        <primary>View</primary>
      </indexterm>

      <indexterm>
        <primary>Instanz-Variablen</primary>
      </indexterm>

      <para>Einer der Todsünden im MVC-Modell <footnote>
          <para><uri
          xlink:href="http://de.wikipedia.org/wiki/Model_View_Controller">http://de.wikipedia.org/wiki/Model_View_Controller</uri></para>
        </footnote>ist ja bekanntlich, zu viel Programm-Logik im View
      unterzubringen. Quasi so, wie man früher oft in PHP programmiert hat.
      Bei MVC ist eins der Ziele, dass jeder beliebige HTML-Designer einen
      View erstellen kann, ohne sich über die Programmierung Gedanken machen
      zu müssen. Ja, ja, … wenn das immer so einfach wäre. Trotzdem gehen wir
      das mal gedanklich weiter: Wenn ich im Controller einen Wert habe, den
      ich im View anzeigen will, so benötige ich dafür einen Mechanismus.
      Dieser heißt Instanz-Variable (<foreignphrase xml:lang="en">instance
      variable</foreignphrase>) und fängt immer mit einem <code>@</code> an.
      Wer sich nicht mehr 100 % sicher ist, welche Variable welchen
      Geltungsbereich (<indexterm>
          <primary>Scope</primary>
        </indexterm><foreignphrase xml:lang="en">Scope</foreignphrase>) hat,
      der sollte ganz fix noch mal einen Blick in <xref
      linkend="scope_von_variablen"/> werfen.</para>

      <para>Im folgenden Beispiel fügen wir im Controller eine
      Instanz-Variable für die aktuelle Uhrzeit ein und fügen diese dann im
      View ein. Wir nehmen also Programmier-Intelligenz aus dem View in den
      Controller.</para>

      <para>Die Controller Datei
      <filename>app/controllers/example_controller.rb</filename> sieht so
      aus:<programlisting>class ExampleController &lt; ApplicationController
  def test
    <emphasis role="bold">@current_time</emphasis> = Time.now
  end

end
</programlisting></para>

      <para>In der View Datei
      <filename>app/views/example/test.html.erb</filename> können wir dann auf
      diese Instance-Variable zurückgreifen:<programlisting>&lt;p&gt;
Die aktuelle Uhrzeit ist 
&lt;%= <emphasis role="bold">@current_time</emphasis> %&gt;
&lt;/p&gt;
</programlisting></para>

      <para>Wir haben jetzt eine klare Trennung von Programmierlogik und
      Darstellungslogik mit dem Controller und dem View. So können wir im
      Controller die Uhrzeit je nach Zeitzone des Anwenders automatisch
      anpassen, ohne dass sich der Designer der Seite darum kümmern muss. Wie
      immer wird im View automatisch die Methode <methodname>to_s</methodname>
      angewendet.</para>

      <para>Mir ist klar, dass jetzt keiner aufspringen und schreien wird:
      <quote>Danke für die Erleuchtung! Ich werde nur noch sauber nach MVC
      programmieren.</quote> Das obige Beispiel ist der erste kleine Schritt
      in die Richtung und zeigt, wie wir einfach mit Instanz-Variablen Werte
      aus dem Controller in den View bringen können.</para>
    </section>

    <section xml:id="partials">
      <title xml:id="partials.title">Partials</title>

      <indexterm>
        <primary>Partials</primary>
      </indexterm>

      <indexterm>
        <primary>erb</primary>
      </indexterm>

      <para>Selbst bei kleinen Webprojekten gibt es oft wiederkehrende
      Elemente. Das kann zum Beispiel ein <indexterm>
          <primary>Footer</primary>
        </indexterm><foreignphrase xml:lang="en">Footer</foreignphrase> der
      Seite mit den Kontaktdaten sein oder ein Menü. Rails gibt uns die
      Möglichkeit, diesen HTML-Code in sogenannte <quote><foreignphrase
      xml:lang="en">Partials</foreignphrase></quote> abzuspeichern und dann
      innerhalb eines <indexterm>
          <primary>View</primary>
        </indexterm>Views einzubinden. Ein Partial wird ebenfalls im
      <filename>app/views/example/</filename> Verzeichnis abgespeichert.
      Allerdings muss der Dateinamen mit einem Unterstrich (<foreignphrase
      xml:lang="en">Underscore</foreignphrase> = <literal>_</literal>)
      anfangen.</para>

      <note>
        <para>Das englische Adjektiv <foreignphrase
        xml:lang="en">partial</foreignphrase> heißt so viel wie Teil-…,
        partiell oder unvollständig. <foreignphrase
        xml:lang="en">Partials</foreignphrase> sind also soetwas wie Teile,
        Stückchen oder Vorlagen-Schnipsel.</para>
      </note>

      <para>Als Beispiel fügen wir unserer Seite jetzt einen Mini-Footer in
      einem eigenen Partial hinzu. Dafür schreiben wir in die neue Datei
      <filename>app/views/example/_footer.html.erb</filename> den folgenden
      Inhalt:<programlisting>&lt;hr&gt;
&lt;p&gt;
Copyright 2009 - &lt;%= Date.today.year %&gt; beim Osterhasen
&lt;/p&gt;</programlisting></para>

      <para>Die Datei <filename>app/views/example/test.html.erb</filename>
      verändern wir wie folgt und fügen mit dem Befehl <indexterm>
          <primary>render()</primary>
        </indexterm><methodname>render</methodname> das Partial
      ein:<programlisting>&lt;p&gt;Schleife von 0 bis 5:
&lt;% (0..5).each do |i| %&gt;
&lt;%= "#{i}, " %&gt;
&lt;% end %&gt;
&lt;/p&gt;

<emphasis>&lt;%= render "footer" %&gt;</emphasis></programlisting></para>

      <para>Es sind also jetzt folgende Dateien im Verzeichnis
      <filename>app/views/example</filename>:<screen>MacBook:testproject xyz$ <command>ls -l app/views/example</command> 
total 8
-rw-r--r--  1 xyz  staff   0 Apr 24 11:03 _footer.html.erb
-rw-r--r--  1 xyz  staff  81 Apr 24 10:33 test.html.erb
MacBook:testproject xyz$</screen></para>

      <para>Die neue Webseite sieht nun so aus:<screenshot>
          <info>
            <title>Seite mit Footer als Partial</title>
          </info>

          <mediaobject>
            <imageobject>
              <imagedata fileref="screenshots/partials_footer.jpg"/>
            </imageobject>
          </mediaobject>
        </screenshot></para>

      <para><important>
          <para>Der Name eines Partials im Code wird immer
          <emphasis>ohne</emphasis> den Unterstrich (<literal>_</literal>) am
          Anfang und <emphasis>ohne</emphasis> die <literal>.erb</literal> und
          <literal>.html</literal>-Endung angegeben. Aber die wirkliche Datei
          muss im Dateinamen mit einem Unterstrich anfangen und auch am Ende
          mir der <literal>.erb</literal>- und <literal>.html</literal>-Endung
          aufhören.</para>
        </important></para>

      <para>Partials können auch aus anderen Bereichen des Unterverzeichnisses
      <filename>app/views</filename> eingebunden werden. So können Sie für
      wiederkehrende und übergreifende Inhalte beispielsweise ein Verzeichnis
      <filename>app/views/shared</filename> einrichten und dort eine Datei
      <filename>_footer.html.erb</filename> anlegen. Das Einbetten im
      <literal>erb</literal>-Code würde dann mit folgender Zeile
      erfolgen:<indexterm>
          <primary>render()</primary>
        </indexterm><programlisting>&lt;%= render "shared/footer" %&gt;</programlisting></para>

      <note>
        <para>Das Footer-Problem würde man – je nach Programmiergeschmack – in
        einem richtigen Projekt nicht mit einem Partial lösen, das überall
        lokal aufgerufen wird, sondern eher zentral in der
        <filename>app/views/layouts/application.html.erb</filename>.</para>
      </note>

      <section xml:id="partials_locale_variables">
        <title xml:id="partials_locale_variables.title">Variablen an ein
        Partial übergeben</title>

        <indexterm>
          <primary>Partial</primary>
        </indexterm>

        <para>Partials sind im <indexterm>
            <primary>DRY</primary>
          </indexterm><indexterm>
            <primary>Don't Repeat Yourself</primary>

            <see>DRY</see>
          </indexterm>DRY (<foreignphrase xml:lang="en"><emphasis
        role="bold">D</emphasis>on't <emphasis role="bold">R</emphasis>epeat
        <emphasis role="bold">Y</emphasis>ourself</foreignphrase>)-Gedanken
        sehr gut. Aber was sie erst richtig praktisch macht, ist die
        Möglichkeit, Variablen zu übergeben. Bleiben wir bei unserem
        Copyright-Beispiel. Wenn wir das Startjahr als Wert übergeben möchten,
        so können wir das mit folgender Erweiterung in der Datei
        <filename>app/views/example/_footer.html.erb</filename>
        einbauen:<programlisting>&lt;hr /&gt;
&lt;p&gt;
Copyright <emphasis>&lt;%= start_year %&gt;</emphasis> - &lt;%= Date.today.year %&gt; beim Osterhasen
&lt;/p&gt;</programlisting></para>

        <para>Ändern wir dazu die
        <filename>app/views/example/test.html.erb</filename> wie
        folgt:<indexterm>
            <primary>render()</primary>
          </indexterm><programlisting>&lt;p&gt;Schleife von 0 bis 5:
&lt;% (0..5).each do |i| %&gt;
&lt;%= "#{i}, " %&gt;
&lt;% end %&gt;
&lt;/p&gt;

&lt;%= render 'footer', :start_year =&gt; '2000' %&gt;</programlisting></para>

        <para>Wenn wir jetzt die URL <uri
        xlink:href="http://0.0.0.0:3000/example/test">http://0.0.0.0:3000/example/test</uri>
        aufrufen, so sehen wir die 2000:<screenshot>
            <info>
              <title>Partial mit local start_year</title>
            </info>

            <mediaobject>
              <imageobject>
                <imagedata fileref="screenshots/partial_start_year_2000.jpg"/>
              </imageobject>
            </mediaobject>
          </screenshot></para>

        <para>Manchmal braucht man ein Partial, das teilweise eine Local
        Variable benutzt und an anderer Stelle braucht man das gleiche
        Partial, aber ohne Local Variable. Das können wir im Partial selber
        mit einer if-Abfrage abfangen:</para>

        <para><programlisting>&lt;hr /&gt;
&lt;p&gt;
Copyright 
&lt;% if defined? start_year %&gt;
&lt;%= start_year %&gt;
 - 
&lt;% end %&gt;
&lt;%= Date.today.year %&gt; beim Osterhasen
&lt;/p&gt;</programlisting></para>

        <note>
          <para><indexterm>
              <primary>defined?</primary>

              <secondary>Methoden</secondary>
            </indexterm>Mit <methodname>defined?</methodname> wird in Ruby
          überprüft, ob eine Expression definiert ist.</para>
        </note>

        <para>Diese Partial könnte man mit <code>&lt;%= render 'footer',
        :start_year =&gt; '2000' %&gt;</code> und mit <code>&lt;%= render
        'footer' %&gt;</code> aufrufen.</para>

        <para>Sie sehen ebenfalls, dass ich beim Einbinden eines einfaches
        Partials eine kürzere Schreibweise benutzen kann, als bei der Version
        mit <literal>locals</literal>.</para>
      </section>

      <section xml:id="partials_lange_schreibweise">
        <title>Andere Schreibweise</title>

        <para>In <xref linkend="partials_locale_variables"/> benutzen wir nur
        die Kurzform, um Partials zu rendern. Oft sehen Sie auch diese
        Langform:<programlisting>&lt;%= render :partial =&gt; "footer", :locals =&gt; { :start_year =&gt; '2000' } %&gt;</programlisting></para>
      </section>

      <section xml:id="weitere_doku_zu_partials">
        <title xml:id="weitere_doku_zu_partials.title">Weitere Dokumentation
        zum Thema Partials</title>

        <para>Wir haben hier wirklich nur die Oberfläche angekratzt. Partials
        sind sehr mächtige Werkzeuge. Unter <uri
        xlink:href="http://guides.rubyonrails.org/layouts_and_rendering.html#using-partials">http://guides.rubyonrails.org/layouts_and_rendering.html#using-partials</uri>
        finden Sie die Doku von Ruby on Rails zum Thema Partials.</para>
      </section>
    </section>
  </section>

  <section xml:id="redirects">
    <title xml:id="redirects.title">Redirects (Umleitungen)</title>

    <indexterm>
      <primary>Redirects</primary>
    </indexterm>

    <indexterm>
      <primary>Umleitungen</primary>

      <see>Redirects</see>
    </indexterm>

    <indexterm>
      <primary>Weiterleitungen</primary>

      <see>Redirects</see>
    </indexterm>

    <indexterm>
      <primary>Routing</primary>
    </indexterm>

    <para><foreignphrase xml:lang="en">Redirects</foreignphrase> sind Befehle,
    mit denen Sie innerhalb des Controllers auf andere Methoden oder auch auf
    ganz andere Webseiten <quote>springen</quote>, also weiterleiten,
    können.<note>
        <para>Ein redirect gibt eine "302 Moved" response mit dem neuen Ziel
        an den Browser zurück.</para>
      </note> Legen wir ein neues Rails-Projekt für ein entsprechendes
    Beispiel an:<screen>MacBook:~ xyz$ <command>rails new redirect_example</command>
      create  
      create  README.rdoc
      create  Rakefile

[...]

Using sqlite3 (1.3.6) 
Using uglifier (1.2.4) 
Your bundle is complete! Use `bundle show [gemname]` to see where a bundled gem is installed.
MacBook:~ xyz$ <command>cd redirect_example</command> 
MacBook:redirect_example xyz$</screen></para>

    <para>Um zu springen, brauchen wir einen Controller mit mindestens zwei
    verschiedene Methoden. Und auf gehts:<screen>MacBook:redirect_example xyz$ <command>rails generate controller Game ping pong</command>
      create  app/controllers/game_controller.rb
       route  get "game/pong"
       route  get "game/ping"
      invoke  erb
      create    app/views/game
      create    app/views/game/ping.html.erb
      create    app/views/game/pong.html.erb
      invoke  test_unit
      create    test/functional/game_controller_test.rb
      invoke  helper
      create    app/helpers/game_helper.rb
      invoke    test_unit
      create      test/unit/helpers/game_helper_test.rb
      invoke  assets
      invoke    coffee
      create      app/assets/javascripts/game.js.coffee
      invoke    scss
      create      app/assets/stylesheets/game.css.scss
MacBook:redirect_example xyz$</screen></para>

    <para>Starten wir mal den Rails-Server und rufen mit dem Browser erst <uri
    xlink:href="http://0.0.0.0:3000/game/ping">http://0.0.0.0:3000/game/ping</uri>
    und dann <uri
    xlink:href="http://0.0.0.0:3000/game/pong">http://0.0.0.0:3000/game/pong</uri>
    auf:<screen>MacBook:redirect_example xyz$ <command>rails server</command>
=&gt; Booting WEBrick
=&gt; Rails 3.2.3 application starting in development on http://0.0.0.0:3000
=&gt; Call with -d to detach
=&gt; Ctrl-C to shutdown server
[2012-04-24 13:59:36] INFO  WEBrick 1.3.1
[2012-04-24 13:59:36] INFO  ruby 1.9.3 (2012-04-20) [x86_64-darwin11.3.0]
[2012-04-24 13:59:36] INFO  WEBrick::HTTPServer#start: pid=58476 port=3000


Started GET "/game/ping" for 127.0.0.1 at 2012-04-24 14:00:01 +0200
Processing by GameController#ping as HTML
  Rendered game/ping.html.erb within layouts/application (1.9ms)
Compiled game.css  (8ms)  (pid 58476)
Compiled application.css  (18ms)  (pid 58476)
Compiled jquery.js  (3ms)  (pid 58476)
Compiled jquery_ujs.js  (0ms)  (pid 58476)
Compiled game.js  (139ms)  (pid 58476)
Compiled application.js  (173ms)  (pid 58476)
Completed 200 OK in 271ms (Views: 270.4ms | ActiveRecord: 0.0ms)

[...]

Started GET "/game/pong" for 127.0.0.1 at 2012-04-24 14:00:07 +0200
Processing by GameController#pong as HTML
  Rendered game/pong.html.erb within layouts/application (1.2ms)
Completed 200 OK in 8ms (Views: 7.8ms | ActiveRecord: 0.0ms)
</screen></para>

    <para>Alles ganz normal. Das Projekt verfügt über zwei mögliche
    Routen:<screen>MacBook:redirect_example xyz$ <command>rake routes</command>
game_ping GET /game/ping(.:format) game#ping
game_pong GET /game/pong(.:format) game#pong
MacBook:redirect_example xyz$</screen></para>

    <para>Der Controller
    <filename>app/controllers/game_controller.rb</filename> hat folgenden
    Inhalt:<screen>MacBook:redirect_example xyz$ <command>cat app/controllers/game_controller.rb</command> 
class GameController &lt; ApplicationController
  def ping
  end

  def pong
  end
end
MacBook:redirect_example xyz$</screen></para>

    <para>Jetzt zum Redirect: Wie können wir es erreichen, dass wir beim
    Aufruf von <uri
    xlink:href="http://0.0.0.0:3000/game/ping">http://0.0.0.0:3000/game/ping</uri>
    direkt auf die Methode <methodname>pong</methodname> weitergeleitet
    werden? Einfach, werden Sie sagen, indem wir die Route in der <indexterm>
        <primary>routes.rb</primary>
      </indexterm><filename>config/routes.rb</filename> ändern. Da haben Sie
    Recht. Dafür brauchen wir also nicht zwingend ein Redirect. Wenn wir aber
    vor der Umleitung in der <methodname>ping</methodname> Methode noch etwas
    abarbeiten wollen, dann geht das nur mit einem
    <methodname>redirect_to</methodname> im Controller
    <filename>app/controllers/game_controller.rb</filename>:<programlisting>class GameController &lt; ApplicationController
  def ping
   logger.info '++++++++++  Beispiel  ++++++++++'
   redirect_to game_pong_path
  end

  def pong
  end
end</programlisting></para>

    <para>Beim Aufruf von <uri
    xlink:href="http://0.0.0.0:3000/game/ping">http://0.0.0.0:3000/game/ping</uri>
    landen wir nach dem automatischen redirect auf <uri
    xlink:href="http://0.0.0.0:3000/game/pong">http://0.0.0.0:3000/game/pong</uri>
    und sehen in der Log-Ausgabe die Logger Ausgabe:<screen>Started GET "/game/ping" for 127.0.0.1 at 2012-04-24 14:24:08 +0200
Processing by GameController#ping as HTML
++++++++++  Beispiel  ++++++++++
Redirected to http://0.0.0.0:3000/game/pong
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)


Started GET "/game/pong" for 127.0.0.1 at 2012-04-24 14:24:08 +0200
Processing by GameController#pong as HTML
  Rendered game/pong.html.erb within layouts/application (0.3ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)</screen></para>

    <para>Aber was ist <code>game_pong_path</code>? Schauen wir uns dazu die
    für diese Rails-Applikation generierten Routen an:<screen>MacBook:redirect_example xyz$ <command>rake routes</command>
game_ping GET /game/ping(.:format) game#ping
game_pong GET /game/pong(.:format) game#pong
MacBook:redirect_example xyz$</screen></para>

    <para>Sie sehen, dass die Route zur <foreignphrase xml:lang="en">Action
    </foreignphrase><literal>ping</literal> des Controllers
    <literal>GameController</literal> den Namen <literal>game_ping</literal>
    bekommen hat (siehe Anfang der Zeile). Wir könnten den Redirect auch
    folgendermaßen schreiben:<programlisting>redirect_to :action =&gt; 'pong'</programlisting></para>

    <para>Auf die Details und einzelnen Möglichkeiten des Redirects gehen wir
    später im jeweils konkreten Fall ein. Nur schon so viel vorweg: Man kann
    nicht nur auf eine andere Methode, sondern auch auf einen anderen
    Controller oder eine ganz andere Webseite redirecten.</para>
  </section>

  <section xml:id="flash">
    <title xml:id="flash.title">Flash-Meldungen (Flash messages)</title>

    <indexterm>
      <primary>Flash-Meldungen</primary>
    </indexterm>

    <indexterm>
      <primary>Einblendungen</primary>

      <see>Flash-Meldungen</see>
    </indexterm>

    <indexterm>
      <primary>Redirects</primary>
    </indexterm>

    <para>Den Begriff <quote><foreignphrase xml:lang="en">Flash
    messages</foreignphrase></quote> oder <quote>Flash-Meldungen</quote> halte
    ich für denkbar ungeeignet gewählt. Mit dem <quote><foreignphrase
    xml:lang="en">Flash</foreignphrase></quote> assoziiert fast jeder mehr
    oder weniger bunte Webseiten, die mit dem Adobe-Shockwave-Flash-Plug-in
    realisiert wurden. Aber in Rails sind Flash-Nachrichten etwas ganz
    anderes. Das sind Meldungen, die z.B. nach einem Redirect (siehe <xref
    linkend="redirects"/>) auf der neuen Seite angezeigt werden.</para>

    <para>Flash-Nachrichten sind quasi gute Freunde von Redirects. Nicht
    selten arbeiten beide im Team, um dem User Feedback über eine gerade
    vollzogene Aktion zu geben. Ein typisches Beispiel einer Flash-Meldung ist
    das Feedback des Systems, wenn ein User sich eingeloggt hat. Dann wird er
    oft wieder auf die ursprüngliche Seite <quote>redirectet</quote> und
    bekommt zusätzlich noch das Feedback: <quote>Sie sind jetzt
    eingeloggt.</quote></para>

    <note>
      <para>Der englische Begriff <foreignphrase xml:lang="en">Flash
      message</foreignphrase> lässt sich hier halbwegs gut mit
      <emphasis>Einblendung</emphasis> / <emphasis>eingeblendete
      Meldung</emphasis> übersetzen.</para>
    </note>

    <para>Wir bauen als Beispiel noch mal das Ping-Pong-Szenario aus <xref
    linkend="redirects"/> auf:<screen>MacBook:~ xyz$ <command>rails new pingpong</command>

      [...]

MacBook:~ xyz$ <command>cd pingpong</command> 
MacBook:pingpong xyz$ <command>rails generate controller Game ping pong</command>

      [...]

MacBook:pingpong xyz$</screen></para>

    <para>Die <filename>app/controllers/game_controller.rb</filename> füllen
    wir mit folgendem Inhalt:<programlisting>class GameController &lt; ApplicationController
  def ping
   <emphasis>redirect_to game_pong_path, notice: 'Ping-Pong!'</emphasis>
  end

  def pong
  end
end</programlisting></para>

    <para>Jetzt starten wir den Rails-Web-Server mit <command>rails
    server</command> und gehen per Browser auf <uri
    xlink:href="http://0.0.0.0:3000/game/ping">http://0.0.0.0:3000/game/ping</uri>.
    Wir werden von <methodname>ping</methodname> auf
    <methodname>pong</methodname> umgeleitet. Von der Flash-Nachricht
    "Ping-Pong!" ist aber nichts zu sehen. Dazu müssen wir
    <filename>app/views/layouts/application.html.erb</filename>
    erweitern:<programlisting>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Pingpong&lt;/title&gt;
  &lt;%= stylesheet_link_tag    "application", :media =&gt; "all" %&gt;
  &lt;%= javascript_include_tag "application" %&gt;
  &lt;%= csrf_meta_tags %&gt;
&lt;/head&gt;
&lt;body&gt;

<emphasis>&lt;%- flash.each do |name, message| %&gt;
&lt;p&gt;&lt;i&gt;&lt;%= "#{name}: #{message}" %&gt;&lt;/i&gt;&lt;/p&gt;
&lt;% end %&gt;</emphasis>

&lt;%= yield %&gt;

&lt;/body&gt;
&lt;/html&gt;
</programlisting></para>

    <para>Jetzt erst sehen wir beim Aufruf von <uri
    xlink:href="http://0.0.0.0:3000/game/ping">http://0.0.0.0:3000/game/ping</uri>
    im Browser die Flash-Nachricht am Kopf der Seite:<screenshot>
        <info>
          <title>Pong-Seite mit Flash-Meldung</title>
        </info>

        <mediaobject>
          <imageobject>
            <imagedata fileref="screenshots/flash_pong_notice.jpg"/>
          </imageobject>
        </mediaobject>
      </screenshot></para>

    <para>Beim Aufruf von <uri
    xlink:href="http://0.0.0.0:3000/game/pong">http://0.0.0.0:3000/game/pong</uri>
    bekommen wir weiterhin normal die Pong-Seite angezeigt. Beim Aufruf von
    <uri
    xlink:href="http://0.0.0.0:3000/game/pong">http://0.0.0.0:3000/game/ping</uri>
    werden wir aber zur Pong-Seite redirectet und bekommen oben die
    Flash-Nachricht angezeigt:</para>

    <tip>
      <para>Wenn Sie später mal eine Flash-Nachricht nicht angezeigt bekommen,
      dann überprüfen Sie als erstes im View, ob dort die Flash-Nachricht
      überhaupt ausgegeben wird.</para>
    </tip>

    <section xml:id="verschiedene_arten_von_flash_nachrichten">
      <title
      xml:id="verschiedene_arten_von_flash_nachrichten.title">Verschiedene
      Arten von Flash-Meldungen</title>

      <indexterm>
        <primary>Flash-Meldungen</primary>
      </indexterm>

      <para>Flash-Nachrichten werden automagisch in einem Hash an den View
      übergeben. Per Default gibt es dabei die Arten <literal>error</literal>
      (Fehler), <literal>warning</literal> (Warnung) und
      <literal>notice</literal> (Notiz, Hinweis). Allerdings kann man auch
      selber eine Kategorie erfinden und diese später im View abfragen.</para>
    </section>

    <section xml:id="neue_flash_redirect_schreibweise">
      <title xml:id="neue_flash_redirect_schreibweise.title">Verschiedene
      Syntaxen</title>

      <indexterm>
        <primary>Flash-Meldungen</primary>
      </indexterm>

      <para>Je nach Vorliebe eines Programmierers, werden Sie in der Praxis
      auf verschiedene Syntaxen von Flash-Nachrichten treffen. Ich will mich
      nicht an der Diskussion über die beste Syntax beteiligen, aber ich
      möchte Ihnen kurz die zwei häufigsten Varianten vorstellen:<itemizedlist>
          <listitem>
            <para><programlisting>redirect_to game_pong_path, notice: 'Ping-Pong!'</programlisting></para>
          </listitem>

          <listitem>
            <para><programlisting>flash[:notice] = 'Ping-Pong!'
redirect_to action: pong</programlisting></para>
          </listitem>
        </itemizedlist></para>
    </section>

    <section>
      <title>Warum gibt es überhaupt Flash-Nachrichten?</title>

      <indexterm>
        <primary>Flash-Meldungen</primary>
      </indexterm>

      <para>Sie werden sich vielleicht fragen: <quote>Warum gibt es
      Flash-Nachrichten? Das kann ich mir ja auch selber bauen, wenn ich es
      brauche.</quote> Stimmt. Flash-Nachrichten haben hauptsächlich den
      Vorteil, dass sie einen definierten und für alle Programmierer gleichen
      Weg zur Verfügung stellen. So muss man nicht das Rad neu
      erfinden.</para>
    </section>
  </section>

  <section xml:id="die_console" xml:lang="">
    <title xml:base="" xml:id="die_console.title">Die Rails-Konsole
    (Console)</title>

    <indexterm>
      <primary>Rails</primary>

      <secondary>Console</secondary>
    </indexterm>

    <indexterm>
      <primary>Console</primary>
    </indexterm>

    <indexterm>
      <primary>Konsole</primary>

      <see>Console</see>
    </indexterm>

    <para>Die <foreignphrase xml:lang="en">Console</foreignphrase> in Rails
    ist nichts weiter als ein um die Rails-Umgebung aufgebohrtes
    <literal>irb</literal> (siehe <xref linkend="irb"/>). Sowohl beim
    Entwickeln als auch bei der Administration ist die Console sehr praktisch,
    da die komplette Rails-Umgebung abgebildet wird und zur Verfügung steht.
    So kann man leicht mal eine Methode ausprobieren, ohne dafür direkt ein
    eigenes Programm zu schreiben.</para>

    <para>Wir bauen als Arbeitsumgebung wieder das Ping-Pong-Szenario aus
    <xref linkend="redirects"/> auf:<screen>MacBook:~ xyz$ <command>rails new pingpong</command>

      [...]

MacBook:~ xyz$ <command>cd pingpong</command> 
MacBook:pingpong xyz$ <command>rails generate controller Game ping pong</command>

      [...]

MacBook:pingpong xyz$</screen></para>

    <para>Die Rails-Console wird mit dem Befehl <command>rails
    console</command> gestartet:<screen>MacBook:pingpong xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.3)
1.9.3p194 :001 &gt;</screen></para>

    <para>Und mit <command>exit</command> kommt man wieder raus:<screen>1.9.3p194 :001 &gt; <command>exit</command>
MacBook:pingpong xyz$ </screen></para>

    <para>In der Console hat man Zugriff auf alle Variablen, die man auch
    später in der richtigen Applikation hat:<screen>MacBook:pingpong xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.3)
1.9.3p194 :001 &gt; <command>Rails.env</command>
 =&gt; "development" 
1.9.3p194 :002 &gt; <command>Rails.root</command>
 =&gt; #&lt;Pathname:/Users/xyz/pingpong&gt; 
1.9.3p194 :003 &gt; <command>exit</command>
MacBook:pingpong xyz$</screen></para>

    <para><indexterm>
        <primary>app</primary>
      </indexterm><indexterm>
        <primary>Routing</primary>
      </indexterm>Ganz praktisch ist auch <command>app</command>, um
    verschiedene Routing-Sachen zu analysieren:<screen>MacBook:pingpong xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.3)
1.9.3p194 :001 &gt; <command>app.url_for(:controller =&gt; 'game', :action =&gt; 'ping')</command>
 =&gt; "http://www.example.com/game/ping" 
1.9.3p194 :002 &gt; <command>app.get 'game/ping'</command>
 =&gt; 200 
1.9.3p194 :003 &gt; <command>app.get 'game/gibt_es_nicht'</command>
 =&gt; 404 
1.9.3p194 :004 &gt; <command>exit</command>
MacBook:pingpong xyz$</screen></para>

    <para>Schon in <xref linkend="activerecord_chapter"/> werden Sie viel mit
    der Console arbeiten und die Möglichkeiten schätzen lernen.</para>
  </section>

  <section xml:id="was_ist_ein_generator">
    <title xml:id="was_ist_ein_generator.title">Was ist ein Generator?</title>

    <indexterm>
      <primary>Rails</primary>

      <secondary>Generator</secondary>
    </indexterm>

    <para>Wir haben in diesem Kapitel den Befehl <command>rails generate
    controller</command> benutzt. Damit starten wir den Generator mit dem
    Namen <code>controller</code>. Es gibt noch andere Generatoren. Eine Liste
    der verfügbaren Generatoren bekommen Sie mit <command>rails
    generate</command> angezeigt:<screen>MacBook:pingpong xyz$ <command>rails generate</command>
Usage: rails generate GENERATOR [args] [options]

General options:
  -h, [--help]     # Print generator's options and usage
  -p, [--pretend]  # Run but do not make any changes
  -f, [--force]    # Overwrite files that already exist
  -s, [--skip]     # Skip files that already exist
  -q, [--quiet]    # Suppress status output

Please choose a generator below.

Rails:
  assets
  controller
  generator
  helper
  integration_test
  mailer
  migration
  model
  observer
  performance_test
  resource
  scaffold
  scaffold_controller
  session_migration
  task

Coffee:
  coffee:assets

Jquery:
  jquery:install

Js:
  js:assets

MacBook:pingpong xyz$</screen></para>

    <para>Was macht ein Generator? Ein Generator nimmt dem Programmierer
    stupide Arbeit hab. Er legt Dateien an und füllt sie mit Inhalt abhängig
    von den übergebenen Parametern. Das gleiche können Sie auch händisch ohne
    den Generator machen. Sie müssen also nicht einen Generator benutzen. Er
    soll in erster Linie eine Arbeitserleichterung sein und Fehlerquellen bei
    stupiden Aufgaben vermeiden.</para>
  </section>

  <section xml:id="einstieg_misc">
    <title xml:id="einstieg_misc.title">Misc</title>

    <para>Sie haben jetzt schon mal eine einfache Rails-Applikation ausgeführt
    und werden im nächsten Kapitel tief ins Thema ActiveRecord einsteigen.
    Deshalb an dieser Stelle eine minimale Erklärung zu einigen
    Begrifflichkeiten, die in der Rails-Welt immer mal wieder
    auftauchen.</para>

    <section xml:id="mvc">
      <title xml:id="mvc.title">"Model View Controller"-Architektur
      (MVC)</title>

      <para>Laut <uri
      xlink:href="http://de.wikipedia.org/wiki/Model_View_Controller">http://de.wikipedia.org/wiki/Model_View_Controller</uri>
      heißt MVC im Deutschen "Modell-Präsentation-Steuerung". Das macht die
      Sache schon viel einfacher. ;-)</para>

      <para>MVC ist eine Struktur zur Software-Entwicklung. Man hat sich
      einfach darauf geeinigt, das ein Teil der Software an dieser Stelle und
      ein anderer Teil der Software immer an einer anderen Stelle ist. Nicht
      mehr und nicht weniger. Diese Einigung birgt den enormen Vorteil, das
      man nach einer gewissen Einarbeitungszeit genau weiß, wo man welche
      Funktionalität in einem Rails-Projekt suchen bzw. neu einbauen
      muss.</para>

      <section xml:id="mvc_model">
        <title xml:id="mvc_model.title">Model</title>

        <indexterm>
          <primary>Rails</primary>

          <secondary>MVC</secondary>

          <tertiary>Model</tertiary>
        </indexterm>

        <para>"Model" steht hier für Datenmodel. Per Default handelt es sich
        bei Rails-Applikationen um ein ActiveRecord Datenmodell (siehe <xref
        linkend="activerecord_chapter"/>).</para>

        <para>Alle Models finden Sie im Verzeichnis
        <filename>app/models/</filename></para>
      </section>

      <section xml:id="mvc_view">
        <title xml:id="mvc_view.title">View</title>

        <indexterm>
          <primary>Rails</primary>

          <secondary>MVC</secondary>

          <tertiary>View</tertiary>
        </indexterm>

        <para>Der "View" ist für die Präsentation der Applikation zuständig.
        Er übernimmt das Rendern der Webseite, einer XML- oder JSON-Datei. Ein
        View könnte aber auch ein PDF oder einen ASCII-Text rendern. Das hängt
        ganz von Ihrer Applikation ab.</para>

        <para>Alle Views finden Sie im Verzeichnis
        <filename>app/views/</filename></para>
      </section>

      <section xml:id="mvc_controller">
        <title xml:id="mvc_controller.title">Controller</title>

        <indexterm>
          <primary>Rails</primary>

          <secondary>MVC</secondary>

          <tertiary>Controller</tertiary>
        </indexterm>

        <para>Nachdem ein Webseitenaufruf in einer Route (siehe <xref
        linkend="routes"/>) gelandet ist, kommt er von dort in den Controller.
        Die Route gibt dabei als Ziel eine bestimmte Methode (Action) an.
        Diese Methode kann dann gewünschte Aufgaben (z.B. einen bestimmten
        Datensatz suchen und in einer Instanz-Variable abspeichern) erfüllen
        und lässt danach den gewünschten View rendern.</para>

        <para>Alle Controller finden Sie im Verzeichnis
        <filename>app/controllers/</filename></para>
      </section>
    </section>

    <section xml:id="helper">
      <title xml:id="helper.title">Helper</title>

      <indexterm>
        <primary>Rails</primary>

        <secondary>Helper</secondary>
      </indexterm>

      <para>Eine Helper-Methode nimmt Ihnen wiederholende Arbeiten in einem
      View ab. Wenn Sie z.B. bei einer Hotel-Bewertung Sterne (*) und nicht
      eine Zahl von 1 bis 5 anzeigen wollen, so können Sie folgenden Helper in
      der Datei <filename>app/helpers/application_helper.rb</filename>
      definieren:<programlisting>module ApplicationHelper

  def render_stars(value)
    output = ''
    if (1..5).include?(value)
      value.times { output += '*'}
    end
    output
  end

end
</programlisting></para>

      <para>Mit diesem Helper können wir dann in einem View den folgenden Code
      anwenden:<programlisting>&lt;p&gt;
&lt;b&gt;Bewertung:&lt;/b&gt; &lt;%= render_stars(5) %&gt;
&lt;/p&gt;</programlisting></para>

      <para>Sie können einen Helper auch in der Console ausprobieren:<screen>MacBook:webshop xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.5)
1.9.3-p194 :001 &gt; <command>helper.render_stars(5)</command>
 =&gt; "*****" 
1.9.3-p194 :002 &gt; <command>exit</command>
MacBook:webshop xyz$</screen></para>

      <para>Es gibt von Rails eine Menge vordefinierter Helper, die wir in den
      nächsten Kapiteln benutzen werden. Sie können aber auch selber Helper
      definieren. Dabei können alle Helper aus der Datei
      <filename>app/helpers/application_helper.rb</filename> in jedem View
      angewendet werden. Helper, die nur in bestimmten Views verfügbar sein
      sollen, müssen pro Controller definiert werden. Beim Erstellen eines
      Controllers wird automatisch in <filename>app/helpers</filename> eine
      Datei für Helper dieses Controllers erstellt. Diese bietet die
      Möglichkeit Helper nur für diesen Controller bzw. für die Views dieses
      Controllers zu definieren.</para>

      <para>Alle Helper finden Sie im Verzeichnis
      <filename>app/helpers/</filename></para>
    </section>

    <section xml:id="dry">
      <title xml:id="dry.title">DRY - Don't repeat yourself</title>

      <indexterm>
        <primary>DRY</primary>
      </indexterm>

      <para>Viele Rails-Programmierer sind grosse DRY-Fans. DRY heißt nichts
      anderes, als das man versuchen sollte sich wiederholende
      Programmierlogic in eigene Methoden auszulagern.</para>

      <section xml:id="refactoring">
        <title xml:id="refactoring.title">Refactoring</title>

        <indexterm>
          <primary>Refactoring</primary>
        </indexterm>

        <para>Im Zusammenhang von DRY wird oft das Wort Refactoring benutzt.
        Dabei geht es um funktionierende Applikationen, die weiter optimiert
        werden. Die Applikation an sich verändert dabei nicht Ihre Oberfläche.
        Sie wird im Kern aber u.a. durch DRY optimiert.</para>
      </section>
    </section>

    <section xml:id="convention_over_configuration">
      <title xml:id="convention_over_configuration.title">Convention Over
      Configuration</title>

      <indexterm>
        <primary>Convention over configuration</primary>
      </indexterm>

      <para>Convention over configuration (auf Deutsch Konvention vor
      Konfiguration siehe <uri
      xlink:href="http://de.wikipedia.org/wiki/Konvention_vor_Konfiguration">http://de.wikipedia.org/wiki/Konvention_vor_Konfiguration</uri>)
      ist ein wichtiger Grundpfeiler einer Rails-Applikation. Es sagt aus, das
      der Programmierer sich beim Start eines Projektes nicht erst für
      bestimmte Features entscheiden und diese per Konfigurationsparameter
      einstellen muss. Es gibt einen Grund-Konsens und dieser ist per Default
      eingestellt. Erst wenn man außerhalb dieses Grund-Konsenses arbeiten
      will, dann muss man die entsprechenden Parameter verändern.</para>
    </section>
  </section>
</chapter>
