<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="i18n" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title xml:id="i18n.title">Internationalisierung</title>

  <section xml:id="i18n_einfuehrung">
    <title xml:id="i18n_einfuehrung.title">Einführung</title>

    <para>Falls Sie in der glücklichen Lage sind, nur englische Webseiten zu
    erstellen, dann können Sie dieses Kapitel komplett überspringen. Für Sie
    ist per Default alles korrekt eingestellt. Aber bereits wenn Sie eine
    Webseite erstellen wollen, die nur deutsch ist, dann müssen Sie in dieses
    Kapitel eintauchen. Es reicht nicht, nur die Views zu übersetzen. Denn so
    bald Sie auch nur Scaffolding benützen, müssen Sie sich schon um die
    englischen und damit noch nicht übersetzen Validierungsfehler
    kümmern.</para>

    <para>Die <classname>I18n</classname> Klasse ist innerhalb der
    Rails-Applikation für alle Übersetzungbelange zuständig. Sie stellt zwei
    dafür wichtige Methoden zur Verfügung:<itemizedlist>
        <listitem>
          <para><methodname>I18n.translate</methodname> oder
          <methodname>I18n.t</methodname></para>

          <para>Übernimmt das Einfügen von vorher definierten Textbausteinen.
          Diese können Variablen enthalten.</para>
        </listitem>

        <listitem>
          <para><methodname>I18n.localize</methodname> oder
          <methodname>I18n.l</methodname></para>

          <para>Übernimmt das Anpassen von Zeit- und Datumsangaben an das
          lokale Format.</para>
        </listitem>
      </itemizedlist></para>

    <para>Mit <methodname>I18n.locale</methodname> wird die im aktuellen
    Aufruf gewünschte Sprache definiert. In der Konfigurationsdatei
    <filename>config/application.rb</filename> wird mit dem Eintrag
    <varname>config.i18n.default_locale</varname> der Defaultwert für
    <methodname>I18n.locale</methodname> gesetzt. Wenn Sie dort nichts ändern
    ist dieser Wert auf <varname>:en</varname> für Englisch
    eingestellt.</para>

    <para>Für Sonderfälle wie das Anzeigen von Zahlen, Währungen und Uhrzeiten
    gibt es spezielle Helper. So ist sichergestellt, das auf einer deutschen
    Webseite die Zahl 1000,23 als "1.000,23" und auf einer englischen Webseite
    als "1,000.23" dargestellt werden kann. Als Beispiel dafür hier die
    Deutsche und die Englisch (US) Variante für diesen Betrag als Geldbetrag
    mit Währung in der Console:<screen>MacBook:webshop xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.5)
1.9.3-p194 :001 &gt; <command>helper.number_to_currency('1000.23', :locale =&gt; :de)</command>
 =&gt; "1.000,23 €" 
1.9.3-p194 :002 &gt; <command>helper.number_to_currency('1000.23', :locale =&gt; :en)</command>
 =&gt; "$1,000.23" 
1.9.3-p194 :003 &gt; <command>exit</command>
MacBook:webshop xyz$</screen></para>

    <note>
      <para>Um das <methodname>helper.number_to_currency</methodname> Beispiel
      auf die Schnelle auszuprobieren, müssen Sie vorher die Zeile <code>gem
      'rails-i18n'</code> in die Datei <filename>Gemfile</filename> einfügen
      und danach <command>bundle</command> ausführen. Damit bekommen Sie alle
      benötigten Sprachdateien installiert.</para>
    </note>

    <section xml:id="i18n_i18n_t">
      <title xml:id="i18n_i18n_t.title">I18n.t</title>

      <indexterm>
        <primary>I18n</primary>

        <secondary>I18n.t</secondary>
      </indexterm>

      <indexterm>
        <primary>I18n</primary>

        <secondary>I18n.translate</secondary>
      </indexterm>

      <para>Mit <methodname>I18n.t</methodname> können Sie vorher definierte
      Übersetzungen abrufen. Die Übersetzungen werden per Default im
      YAML-Format im Verzeichnis <filename>config/locales/</filename>
      abgespeichert. Die Verwendung von YAML als Format ist allerdings nicht
      technisch zwingend notwendig.</para>

      <para>In <filename>config/locales/</filename> findet sich eine
      Beispieldatei <filename>config/locales/en.yml</filename> mit folgendem
      Inhalt:<programlisting>en:
  hello: "Hello world"</programlisting></para>

      <para>In der Rails-Console können wir mal ausprobieren, wie
      <methodname>I18n.t</methodname> funktioniert:<screen>MacBook:webshop xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.3)
1.9.3p194 :001 &gt; <command>I18n.t :hello</command>
 =&gt; "Hello world" 
1.9.3p194 :002 &gt; <command>I18n.locale</command>
 =&gt; :en 
1.9.3p194 :003 &gt; <command>exit</command>
MacBook:webshop xyz$</screen></para>

      <para>Erstellen wir einmal eine
      <filename>config/locales/de.yml</filename> mit folgendem
      Inhalt:<programlisting>de:
  hello: "Hallo Welt"</programlisting></para>

      <para>Jetzt noch mal in die Console:<screen>MacBook:webshop xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.3)
1.9.3p194 :001 &gt; <command>I18n.locale</command>
 =&gt; :en 
1.9.3p194 :002 &gt; <command>I18n.t :hello</command>
 =&gt; "Hello world" 
1.9.3p194 :003 &gt; <command>I18n.locale = :de</command>
 =&gt; :de 
1.9.3p194 :004 &gt; <command>I18n.t :hello</command>
 =&gt; "Hallo Welt" 
1.9.3p194 :005 &gt; <command>exit</command>
MacBook:webshop xyz$ </screen></para>

      <para><methodname>I18n.t</methodname> sucht per Default den Eintrag in
      der in <varname>I18n.locale</varname> definierten Sprache. Dabei ist es
      egal, ob Sie mit <methodname>I18n.t</methodname> oder
      <methodname>I18n.translate</methodname> arbeiten. Es ist auch egal, ob
      Sie nach einem Symbol oder einem String suchen:<screen>MacBook:webshop xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.3)
1.9.3p194 :001 &gt; <command>I18n.t :hello</command>
 =&gt; "Hello world" 
1.9.3p194 :002 &gt; <command>I18n.t 'hello'</command>
 =&gt; "Hello world" 
1.9.3p194 :003 &gt; <command>I18n.translate 'hello'</command>
 =&gt; "Hello world" 
1.9.3p194 :004 &gt; <command>exit</command>
MacBook:webshop xyz$ </screen></para>

      <para>Sie können die gewünschte Sprache auch für einen einzelnen
      <methodname>I18n.t</methodname> Aufruf mit <code>:locale =&gt;
      :de</code> spezifizieren.<screen>MacBook:webshop xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.3)
1.9.3p194 :001 &gt; <command>I18n.locale</command>
 =&gt; :en 
1.9.3p194 :002 &gt; <command>I18n.t :hello, :locale =&gt; :de</command>
 =&gt; "Hallo Welt" 
1.9.3p194 :003 &gt; <command>I18n.t :hello</command>
 =&gt; "Hello world" 
1.9.3p194 :004 &gt; <command>exit</command>
MacBook:webshop xyz$</screen></para>

      <para>Wenn eine Übersetzung nicht vorhanden ist, bekommen Sie eine
      "<code>translation missing:</code>"-Fehlermeldung. Dies gilt auch, wenn
      eine Übersetzung nur in einer Sprache fehlt (dann gehen alle anderen
      Sprachen, aber bei der fehlenden Übersetzung wird die Fehlermeldung
      ausgegeben). Sie können für diesen Fall mit <code>:default =&gt;
      'beliebiger Default-Wert'</code> einen Default definieren:<screen>MacBook:webshop xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.3)
1.9.3p194 :001 &gt; <command>I18n.t 'asdfasdfasdf'</command>
 =&gt; "translation missing: en.asdfasdfasdf" 
1.9.3p194 :002 &gt; <command>I18n.t 'asdfasdfasdf', :default =&gt; 'asdfasdfasdf'</command>
 =&gt; "asdfasdfasdf" 
1.9.3p194 :003 &gt; <command>exit</command>
MacBook:webshop xyz$ </screen></para>

      <para>Sie können in der YAML-Struktur auch mehrere Ebenen angeben. Bitte
      ergänzen Sie dazu die <filename>config/locale/en.yml</filename> wie
      folgt:<programlisting>en:
  hello: "Hello world"
  example:
    test: "A test"
  aaa:
    bbb:
      test: "An other test"</programlisting></para>

      <para>Die verschiedenen Ebenen können Sie innerhalb des Strings mit
      Punkten anzeigen oder mit einem <code>:scope</code> bei den Symbols. Sie
      können auch beide Varianten vermischen.<screen>MacBook:webshop xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.3)
1.9.3p194 :001 &gt; <command>I18n.t 'example.test'</command>
 =&gt; "A test" 
1.9.3p194 :002 &gt; <command>I18n.t 'aaa.bbb.test'</command>
 =&gt; "An other test" 
1.9.3p194 :003 &gt; <command>I18n.t :test, :scope =&gt; [:aaa, :bbb]</command>
 =&gt; "An other test" 
1.9.3p194 :004 &gt; <command>I18n.t :test, :scope =&gt; 'aaa.bbb'</command>
 =&gt; "An other test" 
1.9.3p194 :005 &gt; <command>exit</command>
MacBook:webshop xyz$</screen></para>

      <para>Die Struktur, mit der Sie Ihre Übersetzungen in den YAML-Dateien
      abspeichern bleibt Ihnen überlassen. Die in <xref
      linkend="i18n_einsprachig_deutsch"/> vorgestellte Struktur erleichtert
      aber einiges und deshalb werden wir dies auch für diese Applikation
      übernehmen.</para>

      <section>
        <title>I18n.t im View einsetzen</title>

        <para>Im View können Sie <methodname>I18n.t</methodname> wie folgt
        verwenden:<programlisting>&lt;%= t :hello-world %&gt;

&lt;%= I18n.t :hello-world %&gt;

&lt;%= I18n.translate :hello-world %&gt;

&lt;%= I18n.t 'hello-world' %&gt;

&lt;%= I18n.t 'aaa.bbb.test' %&gt;

&lt;%= link_to <emphasis>I18n.t('views.destroy')</emphasis>, book, confirm: <emphasis>I18n.t('views.are_you_sure')</emphasis>, method: :delete %&gt;</programlisting></para>
      </section>
    </section>

    <section xml:id="i18n_localized_views">
      <title xml:id="i18n_localized_views.title">Lokalisierte Views (localized
      views)</title>

      <indexterm>
        <primary>I18n</primary>

        <secondary>Localized views</secondary>
      </indexterm>

      <para>In Rails gibt es eine praktische Möglichkeiten für einen View
      mehrere Varianten als "localized views" abzuspeichern, die jeweils
      andere Sprachen abbilden. Diese Technik ist unabhängig von der möglichen
      Verwendung von <methodname>I18n.t</methodname> in diesen Views. Der
      Dateiname ergibt sich dabei aus dem Viewnamen, dem Sprachcode (z.B.
      <filename>de</filename> für Deutsch) und <filename>html.erb</filename>
      für ERB-Seiten. Jeweils durch einen Punkt abgetrennt. So würde die
      Deutschsprachige Variante der <filename>index.html.erb</filename> Seite
      den Dateinamen <filename>index.de.html.erb</filename> bekommen.</para>

      <para>Damit könnte Ihr Views Verzeichnis beispielsweie so
      aussehen:<screen>|-app
|---views
|-----products
|-------_form.html.erb
|-------_form.de.html.erb
|-------edit.html.erb
|-------edit.de.html.erb
|-------index.html.erb
|-------index.de.html.erb
|-------new.html.erb
|-------new.de.html.erb
|-------show.html.erb
|-------show.de.html.erb
|-------
|-----page
|-------index.html.erb
|-------index.de.html.erb
</screen></para>

      <para>Die in <varname>config.i18n.default_locale</varname> gespeicherte
      Sprache wird dabei automatisch benutzt, wenn im Dateinamen keine Sprache
      eincodiert wurde. Dies ist in einem neuen und noch nicht konfigurieren
      Rails-Projekt Englisch.</para>
    </section>
  </section>

  <section xml:id="i18n_einsprachig_deutsch">
    <title xml:id="i18n_einsprachig_deutsch.title">Eine einsprachig deutsche
    Rails-Applikation</title>

    <indexterm>
      <primary>I18n</primary>

      <secondary>Einsprachig Deutsch</secondary>
    </indexterm>

    <para>Es reicht bei einer nur für deutsche User ausgerichteten
    Rails-Applikation leider nicht aus, einfach alle Views ins Deutsche zu
    übersetzen. Die Vorgehensweise ähnelt in vielen Punkten der einer
    mehrsprachigen Rails-Applikation (siehe <xref
    linkend="i18n_mehrsprachige_rails_applikation"/>). Entsprechend wird es
    einige Wiederholungen geben. Anhand einer einfachen Applikation zeige ich
    Ihnen, welche Schritte beachtet werden müssen. Gehen wir alle diese
    Änderung an folgender Literaturverzeichnis-Applikation durch:<screen>MacBook:~ xyz$ <command>rails new bibliography</command>
[...]
MacBook:~ xyz$ <command>cd bibliography</command> 
MacBook:bibliography xyz$ <command>rails generate scaffold book title number_of_pages:integer 'price:decimal{7,2}'</command>
[...]
MacBook:bibliography xyz$ <command>rake db:migrate</command>
[...]
MacBook:bibliography xyz$</screen></para>

    <para>Um Beispiele für Validierungsfehler zu bekommen, fügen Sie bitte in
    der <filename>app/models/book.rb</filename> folgende Validierungen
    ein:<programlisting>class Book &lt; ActiveRecord::Base
  attr_accessible :number_of_pages, :price, :title

  validates :title,
            :presence =&gt; true,
            :uniqueness =&gt; true,
            :length =&gt; { :within =&gt; 2..255 }

  validates :price,
            :presence =&gt; true,
            :numericality =&gt; { :greater_than =&gt; 0 }
end
</programlisting></para>

    <para>Bitte suchen Sie in der Konfigurations-Datei
    <filename>config/application.rb</filename> nach dem Wert
    <varname>config.i18n.default_locale</varname> und setzen Sie in auf
    <code>:de</code> für deutsch. Im gleichen Zusammenhang fügen wir dann auch
    in der Zeile darüber noch zwei weitere Verzeichnisse für Übersetzungen der
    Models und der Views ein. Diese Verzeichnisstruktur ist nicht technisch
    notwendig, verschafft aber bei größeren Applikationen einen besseren
    Überblick:<programlisting>    # The default locale is :en and all translations from config/locales/*.rb,yml are auto loaded.
<emphasis>    config.i18n.load_path += Dir[Rails.root.join('config', 'locales', 'models', '*', '*.yml').to_s]
    config.i18n.load_path += Dir[Rails.root.join('config', 'locales', 'views', '*', '*.yml').to_s]
    config.i18n.default_locale = :de</emphasis></programlisting></para>

    <para>Die entsprechenden Verzeichnisse müssen dann noch angelegt
    werden:<screen>MacBook:bibliography xyz$ <command>mkdir -p config/locales/models/book</command>
MacBook:bibliography xyz$ <command>mkdir -p config/locales/views/book</command>
MacBook:bibliography xyz$</screen></para>

    <para>Jetzt müssen Sie eine Sprachkonfigurationsdatei für deutsch
    generieren oder einfacher eine fertige von Sven Fuchs aus seinem
    Github-Repository <uri
    xlink:href="https://github.com/svenfuchs/rails-i18n">https://github.com/svenfuchs/rails-i18n</uri>
    downloaden:<screen>MacBook:bibliography xyz$ <command>cd config/locales</command>
MacBook:locales xyz$ <command>curl -O https://raw.github.com/svenfuchs/rails-i18n/master/rails/locale/de.yml</command>
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  4940  100  4940    0     0   9574      0 --:--:-- --:--:-- --:--:-- 11932
MacBook:locales xyz$ </screen></para>

    <note>
      <para>Wenn Sie wissen, wie Bundler funktioniert, könne Sie auch die
      Zeile <code>gem 'rails-i18n'</code> in die Datei
      <filename>Gemfile</filename> einfügen und danach
      <command>bundle</command> ausführen. Damit bekommen Sie alle
      Sprachdateien aus dem Repository eingespielt.</para>
    </note>

    <para>In der <filename>config/locales/de.yml</filename> Datei sind
    benötigten Formate und generischen Formulierungen für Deutsch enthalten,
    die wir für eine normale Rails-Applikation benötigen (z.B. die Wochentage,
    Währungssymbol, usw.). Schauen Sie einmal mit Ihrem Lieblingseditor rein,
    um einen Überblick zu bekommen.</para>

    <para>Als nächstes müssen wir Rails erklären, das in Deutsch ein Model
    'book' nicht 'book', sondern 'Buch' heißt. Das gleiche gilt für alle
    Attribute. Dafür legen wir die Datei
    <filename>config/locales/models/book/de.yml</filename> mit folgender
    Struktur an. Als Nebeneffekt bekommen wir die Methoden
    <methodname>Model.model_name.human</methodname> und
    <methodname>Model.human_attribute_name(attribute)</methodname>, mit denen
    wir die Model- und Attributnamen im View einfügen können.<programlisting># ruby encoding: utf-8

de:
  activerecord:
    models:
      book: 'Buch'
    attributes:
      book:
        title: 'Titel'
        number_of_pages: 'Seitenanzahl'
        price: 'Preis'
</programlisting></para>

    <para>In der Datei <filename>config/locales/views/book/de.yml</filename>
    fügen wir ein paar Werte für die Scaffold Views ein:<programlisting># ruby encoding: utf-8

de:
  views:
    show: Anzeigen
    edit: Editieren
    destroy: Löschen
    are_you_sure: Sind Sie sicher?
    back: Zurück
    edit: Editieren
    book:
      index:
        title: Bücherliste
        new: Neues Buch
      edit:
        title: Buch editieren
      new:
        title: Neues Buch
      flash_messages:
        book_was_successfully_created: 'Das Buch wurde erfolgreich angelegt.'
        book_was_successfully_updated: 'Das Buch wurde erfolgreich aktualisiert.'</programlisting></para>

    <para>Jetzt müssen wir noch "ein paar" Veränderungen in den Views
    einbauen. Wir benutzen dabei den <methodname>I18n.t</methodname> Helper,
    der im View auch mit <methodname>t</methodname> abgekürzt werden kann.
    <methodname>I18n.t</methodname> ließt aus der YAML-Datei den ensprechenden
    Eintrag aus. Wir könnten bei einer rein deutschsprachigen Applikation auch
    direkt den deutschen Text in den View schreiben, aber so können wir im
    Fall des Falles leichter auf Mehrsprachigkeit umstellen. Mehr
    Informationen zu I18n.t finden Sie unter <xref
    linkend="i18n_i18n_t"/>.</para>

    <para><filename>app/views/books/_form.html.erb</filename><programlisting>&lt;%= form_for(@book) do |f| %&gt;
  &lt;% if @book.errors.any? %&gt;
    &lt;div id="error_explanation"&gt;
      &lt;h2&gt;<emphasis>&lt;%= t 'activerecord.errors.template.header', :model =&gt; Book.model_name.human, :count =&gt; @book.errors.count %&gt;</emphasis>&lt;/h2&gt;
      &lt;ul&gt;
      &lt;% @book.errors.full_messages.each do |msg| %&gt;
        &lt;li&gt;&lt;%= msg %&gt;&lt;/li&gt;
      &lt;% end %&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;% end %&gt;

  &lt;div class="field"&gt;
    &lt;%= f.label :title %&gt;&lt;br /&gt;
    &lt;%= f.text_field :title %&gt;
  &lt;/div&gt;
  &lt;div class="field"&gt;
    &lt;%= f.label :number_of_pages %&gt;&lt;br /&gt;
    &lt;%= f.number_field :number_of_pages %&gt;
  &lt;/div&gt;
  &lt;div class="field"&gt;
    &lt;%= f.label :price %&gt;&lt;br /&gt;
    &lt;%= f.text_field :price %&gt;
  &lt;/div&gt;
  &lt;div class="actions"&gt;
    &lt;%= f.submit %&gt;
  &lt;/div&gt;
&lt;% end %&gt;
</programlisting></para>

    <para><filename>app/views/books/edit.html.erb</filename><programlisting>&lt;h1&gt;<emphasis>&lt;%= t 'views.book.edit.title' %&gt;</emphasis>&lt;/h1&gt;

&lt;%= render 'form' %&gt;

&lt;%= link_to <emphasis>I18n.t('views.show')</emphasis>, @book %&gt; |
&lt;%= link_to <emphasis>I18n.t('views.back')</emphasis>, books_path %&gt;
</programlisting></para>

    <para><filename>app/views/books/index.html.erb</filename><programlisting>&lt;h1&gt;<emphasis>&lt;%= t 'views.book.index.title' %&gt;</emphasis>&lt;/h1&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;<emphasis>&lt;%= Book.human_attribute_name(:title) %&gt;</emphasis>&lt;/th&gt;
    &lt;th&gt;<emphasis>&lt;%= Book.human_attribute_name(:number_of_pages) %&gt;</emphasis>&lt;/th&gt;
    &lt;th&gt;<emphasis>&lt;%= Book.human_attribute_name(:price) %&gt;</emphasis>&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
  &lt;/tr&gt;

&lt;% @books.each do |book| %&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;%= book.title %&gt;&lt;/td&gt;
    &lt;td&gt;&lt;%= <emphasis>number_with_delimiter(book.number_of_pages)</emphasis> %&gt;&lt;/td&gt;
    &lt;td&gt;&lt;%= <emphasis>number_to_currency(book.price)</emphasis> %&gt;&lt;/td&gt;
    &lt;td&gt;&lt;%= link_to <emphasis>I18n.t('views.show')</emphasis>, book %&gt;&lt;/td&gt;
    &lt;td&gt;&lt;%= link_to <emphasis>I18n.t('views.edit')</emphasis>, edit_book_path(book) %&gt;&lt;/td&gt;
    &lt;td&gt;&lt;%= link_to <emphasis>I18n.t('views.destroy')</emphasis>, book, confirm: <emphasis>I18n.t('views.are_you_sure')</emphasis>, method: :delete %&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;% end %&gt;
&lt;/table&gt;

&lt;br /&gt;

&lt;%= link_to <emphasis>I18n.t('views.book.index.new')</emphasis>, new_book_path %&gt;
</programlisting></para>

    <para><filename>app/views/books/new.html.erb</filename><programlisting>&lt;h1&gt;<emphasis>&lt;%= t 'views.book.new.title' %&gt;</emphasis>&lt;/h1&gt;

&lt;%= render 'form' %&gt;

&lt;%= link_to <emphasis>I18n.t('views.back')</emphasis>, books_path %&gt;
</programlisting></para>

    <para><filename>app/views/books/show.html.erb</filename><programlisting>&lt;p id="notice"&gt;&lt;%= notice %&gt;&lt;/p&gt;

&lt;p&gt;
  &lt;b&gt;<emphasis>&lt;%= Book.human_attribute_name(:title) %&gt;</emphasis>:&lt;/b&gt;
  &lt;%= @book.title %&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;b&gt;<emphasis>&lt;%= Book.human_attribute_name(:number_of_pages) %&gt;</emphasis>:&lt;/b&gt;
  &lt;%= <emphasis>number_with_delimiter(@book.number_of_pages)</emphasis> %&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;b&gt;<emphasis>&lt;%= Book.human_attribute_name(:price) %&gt;</emphasis>:&lt;/b&gt;
  &lt;%= <emphasis>number_to_currency(@book.price)</emphasis> %&gt;
&lt;/p&gt;


&lt;%= link_to <emphasis>I18n.t('views.edit')</emphasis>, edit_book_path(@book) %&gt; |
&lt;%= link_to <emphasis>I18n.t('views.back')</emphasis>, books_path %&gt;</programlisting></para>

    <note>
      <para>Im show- und index-View habe ich die Helper
      <methodname>number_with_delimiter</methodname> und
      <methodname>number_to_currency</methodname> eingebaut, damit die Zahlen
      für den End-User schöner dargestellt werden.</para>
    </note>

    <para>Ganz zum Schluss müssen wir im Controller
    <filename>app/controllers/books_controller.rb</filename> noch ein paar
    Flash-Messages anpassen:<programlisting>class BooksController &lt; ApplicationController
  # GET /books
  # GET /books.json
  def index
    @books = Book.all

    respond_to do |format|
      format.html # index.html.erb
      format.json { render json: @books }
    end
  end

  # GET /books/1
  # GET /books/1.json
  def show
    @book = Book.find(params[:id])

    respond_to do |format|
      format.html # show.html.erb
      format.json { render json: @book }
    end
  end

  # GET /books/new
  # GET /books/new.json
  def new
    @book = Book.new

    respond_to do |format|
      format.html # new.html.erb
      format.json { render json: @book }
    end
  end

  # GET /books/1/edit
  def edit
    @book = Book.find(params[:id])
  end

  # POST /books
  # POST /books.json
  def create
    @book = Book.new(params[:book])

    respond_to do |format|
      if @book.save
        format.html { redirect_to @book, notice: <emphasis>I18n.t('views.book.flash_messages.book_was_successfully_created')</emphasis> }
        format.json { render json: @book, status: :created, location: @book }
      else
        format.html { render action: "new" }
        format.json { render json: @book.errors, status: :unprocessable_entity }
      end
    end
  end

  # PUT /books/1
  # PUT /books/1.json
  def update
    @book = Book.find(params[:id])

    respond_to do |format|
      if @book.update_attributes(params[:book])
        format.html { redirect_to @book, notice: <emphasis>I18n.t('views.book.flash_messages.book_was_successfully_updated')</emphasis> }
        format.json { head :no_content }
      else
        format.html { render action: "edit" }
        format.json { render json: @book.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /books/1
  # DELETE /books/1.json
  def destroy
    @book = Book.find(params[:id])
    @book.destroy

    respond_to do |format|
      format.html { redirect_to books_url }
      format.json { head :no_content }
    end
  end
end
</programlisting></para>

    <para>Jetzt können Sie die vom Scaffold Generator angelegten Views
    komplett auf Deutsch benutzen. Die hier gezeigte Struktur der YAML-Dateien
    lässt sich natürlich nach eigenem Geschmack anpassen. Die Texte in den
    Views und im Controller werden mit <methodname>I18n.t
    </methodname>angezeigt. An dieser Stelle könnte man natürlich bei einer
    rein deutschen Anwendung auch direkt den deutschen Text einbauen.</para>

    <section xml:id="i18n_deutschsprachige_pfade">
      <title xml:id="i18n_deutschsprachige_pfade.title">Deutschsprachige
      Pfade</title>

      <indexterm>
        <primary>I18n</primary>

        <secondary>Deutschsprachige Pfade</secondary>
      </indexterm>

      <para>Unsere Bücherliste ist komplett deutsch, aber die aufzurufenden
      URLs sind alle noch in English. Wenn wir alle Bücher unter der URL <uri
      xlink:href="http://0.0.0.0:3000/buecher">http://0.0.0.0:3000/buecher</uri>
      und nicht unter <uri
      xlink:href="http://0.0.0.0:3000/books">http://0.0.0.0:3000/books</uri>
      abrufbar machen möchten, so müssen wir in der
      <filename>config/routes.rb</filename> folgenden Eintrag
      machen:<programlisting>Bibliography::Application.routes.draw do

<emphasis>  scope(:path_names =&gt; { :new =&gt; "neu", :edit =&gt; "bearbeiten" }) do
    resources :books, :path =&gt; "buecher"
  end</emphasis>

end
</programlisting></para>

      <para>Damit ergeben sich folgende neue Pfade:<screen>MacBook:bibliography xyz$ <command>rake routes</command>
    books GET    /buecher(.:format)                books#index
          POST   /buecher(.:format)                books#create
 new_book GET    /buecher/neu(.:format)            books#new
edit_book GET    /buecher/:id/bearbeiten(.:format) books#edit
     book GET    /buecher/:id(.:format)            books#show
          PUT    /buecher/:id(.:format)            books#update
          DELETE /buecher/:id(.:format)            books#destroy
MacBook:bibliography xyz$</screen></para>

      <para>Das schöne an den Rails-Routen ist, das Sie nicht mehr machen
      müssen. Der Rest wird transparent von den Routen verwaltet.</para>
    </section>
  </section>

  <section xml:id="i18n_mehrsprachige_rails_applikation">
    <title xml:id="i18n_mehrsprachige_rails_applikation.title">Mehrsprachige
    Rails-Applikation</title>

    <para>Die Vorgehensweise bei mehrsprachigen Rails-Applikationen ändelt
    sehr der in <xref linkend="i18n_einsprachig_deutsch"/> gezeigten rein
    Deutschen Rails-Applikation. Allerdings müssen wir YAML-Sprachdateien für
    alle benötigten Sprachen definieren und der Rails-Applikation sagen,
    welche Sprache gerade benutzt werden soll. Dazu verwenden wir
    <varname>I18n.locale</varname>.</para>

    <section xml:id="i18n_sprache_einstellen">
      <title xml:id="i18n_sprache_einstellen.title">I18n.locale zum Definieren
      der gewünschten Sprache benutzen</title>

      <indexterm>
        <primary>I18n</primary>

        <secondary>I18n.locale</secondary>
      </indexterm>

      <para>Natürlich muss eine Rails-Applikation wissen, in welcher Sprache
      eine Webseite dargestellt werden soll. <code>I18n.locale</code>
      speichert die aktuelle Sprache ab und kann von der Applikation
      ausgelesen werden. Ich zeige Ihnen das mit einem
      Mini-Webshop-Beispiel:<screen>MacBook:~ xyz$ <command>rails new webshop</command>
[...]
MacBook:~ xyz$ <command>cd webshop</command>
MacBook:webshop xyz$ </screen></para>

      <para>Dieser bekommt eine Homepage:<screen>MacBook:webshop xyz$ <command>rails generate controller Page index</command>
[...]
MacBook:webshop xyz$ <command>rm public/index.html</command> 
MacBook:webshop xyz$</screen></para>

      <para>Diese müssen wir noch in der <filename>config/routes.rb</filename>
      als Root-Seite eintragen:<programlisting>Webshop::Application.routes.draw do

  root :to =&gt; 'page#index'
  get "page/index"

end</programlisting></para>

      <para>Die <filename>app/views/page/index.html.erb</filename> füllen wir
      mit folgendem Beispiel: <programlisting>&lt;h1&gt;Example Webshop&lt;/h1&gt;
&lt;p&gt;Welcome to this webshop.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;I18n.locale:&lt;/b&gt; 
&lt;%= I18n.locale %&gt;
&lt;/p&gt;</programlisting></para>

      <para>Wenn wir den Rails-Server mit <command>rails server</command>
      starten und im Browser <uri
      xlink:href="http://0.0.0.0:3000/">http://0.0.0.0:3000/</uri> aufrufen,
      dann sehen wir folgende Webseite:<screenshot>
          <info>
            <title>Index-Seite page#index</title>
          </info>

          <mediaobject>
            <imageobject>
              <imagedata fileref="screenshots/i18n_ganze_seite_page_index.jpg"/>
            </imageobject>
          </mediaobject>
        </screenshot></para>

      <para>Sie sehen, das "en" für Englisch als Default eingestellt ist.
      Stoppen Sie den Rails-Server mit <keycap>CTRL-C</keycap> und ändern Sie
      in der Datei <filename>config/application.rb</filename> die Einstellung
      für die Default-Sprache auf:<programlisting>    # The default locale is :en and all translations from config/locales/*.rb,yml are auto loaded.
    # config.i18n.load_path += Dir[Rails.root.join('my', 'locales', '*.{rb,yml}').to_s]

    <emphasis>config.i18n.default_locale = :de</emphasis></programlisting></para>

      <para>Wenn Sie danach rails server starten und mit dem Webbrowser <uri
      xlink:href="http://0.0.0.0:3000/">http://0.0.0.0:3000/</uri> wieder
      aufrufen, dann sehen Sie folgende Webseite:<screenshot>
          <info>
            <title>Index-Seite page#index mit config.i18n.default_locale =
            :de</title>
          </info>

          <mediaobject>
            <imageobject>
              <imagedata fileref="screenshots/i18n_ganze_seite_page_index_default_locale_de.jpg"/>
            </imageobject>
          </mediaobject>
        </screenshot></para>

      <para>Die Webseite hat sich nicht verändert, aber als Ausgabe von
      <code>&lt;%= I18n.locale %&gt;</code> bekommen sie jetzt
      '<code>de</code>' für Deutsch und nicht mehr '<code>en</code>' für
      Englisch angezeigt.</para>

      <para>Bitte stoppen Sie den Rails-Server mit <keycap>CTRL-C</keycap> und
      ändern Sie in der Datei <filename>config/application.rb</filename> die
      Einstellung für die Default-Sprache auf <code>en</code> für
      Englisch:<programlisting>    # The default locale is :en and all translations from config/locales/*.rb,yml are auto loaded.
    # config.i18n.load_path += Dir[Rails.root.join('my', 'locales', '*.{rb,yml}').to_s]

    <emphasis>config.i18n.default_locale = :en</emphasis></programlisting></para>

      <para>Wir wissen jetzt wie der Default für
      <varname>I18n.locale</varname> in der gesamten Applikation gesetzt wird,
      aber das ist ja nur die halbe Miete. Ein User möchte sich seine Sprache
      selber aussuchen. Dafür gibt es ein verschiedene Ansätze. Zum
      Veranschaulichen dieser Ansätze brauchen wir eine zweite Seite, die
      einen deutschen Text anzeigt. Bitte legen Sie die Datei
      <filename>app/views/page/index.de.html.erb</filename> mit diesem Inhalt
      an:<programlisting>&lt;h1&gt;Beispiel Webshop&lt;/h1&gt;
&lt;p&gt;Willkommen in diesem Webshop.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;I18n.locale:&lt;/b&gt; 
&lt;%= I18n.locale %&gt;
&lt;/p&gt;</programlisting></para>

      <section xml:id="i18n_url_path_prefix">
        <title xml:id="i18n_url_path_prefix.title">I18n.locale per URL
        Path-Prefix setzen</title>

        <indexterm>
          <primary>I18n.locale</primary>

          <secondary>Path-Prefix</secondary>
        </indexterm>

        <indexterm>
          <primary>default_url_options</primary>
        </indexterm>

        <para>Der charmanter Weg die Sprache zu setzen ist sie als Prefix mit
        in die URL aufzunehmen. So können Suchmaschinen besser verschiedene
        Sprachversionen verwalten. <uri
        xlink:href="http://0.0.0.0:3000/de">http://0.0.0.0:3000/de</uri> soll
        die Deutsche Version der Homepage und <uri
        xlink:href="http://0.0.0.0:3000/en">http://0.0.0.0:3000/en</uri> die
        Englische Version der Homepage anzeigen. Der erste Schritt dafür ist
        eine Anpassung der
        <filename>config/routes.rb</filename><programlisting>Webshop::Application.routes.draw do

  <emphasis>scope "(:locale)", :locale =&gt; /en|de/ do</emphasis>
    root :to =&gt; 'page#index'
    get "page/index"
  <emphasis>end</emphasis>

end</programlisting></para>

        <para>Als nächstes müssen wir in der
        <filename>app/controllers/application_controller.rb</filename> einen
        <methodname>before_filter</methodname> setzen, der den von der Route
        gesetzen Parameter locale als <varname>I18n.locale</varname>
        setzt:<programlisting>class ApplicationController &lt; ActionController::Base
  protect_from_forgery

  <emphasis>before_filter :set_locale</emphasis>
 
  private
<emphasis>  def set_locale
    I18n.locale = params[:locale] || I18n.default_locale
  end</emphasis>
end</programlisting></para>

        <para>Zum Testen Rails mit <command>rails server</command> starten und
        die URL <uri
        xlink:href="http://0.0.0.0:3000/de">http://0.0.0.0:3000/de</uri>
        aufrufen. <screenshot>
            <info>
              <title>http://0.0.0.0:3000/de</title>
            </info>

            <mediaobject>
              <imageobject>
                <imagedata fileref="screenshots/i18n_path_prefix_de_root.jpg"/>
              </imageobject>
            </mediaobject>
          </screenshot></para>

        <para>Natürlich können wir auch <uri
        xlink:href="http://0.0.0.0:3000/de/page/index">http://0.0.0.0:3000/de/page/index</uri>
        aufrufen:<screenshot>
            <info>
              <title>http://0.0.0.0:3000/de/page/index</title>
            </info>

            <mediaobject>
              <imageobject>
                <imagedata fileref="screenshots/i18n_path_prefix_de_page_index.jpg"/>
              </imageobject>
            </mediaobject>
          </screenshot></para>

        <para>Beim Aufruf von <uri
        xlink:href="http://0.0.0.0:3000/de">http://0.0.0.0:3000/en</uri> und
        <uri
        xlink:href="http://0.0.0.0:3000/de/page/index">http://0.0.0.0:3000/en/page/index</uri>
        bekommen wir die jeweils englischen Seiten angezeigt.</para>

        <para>Jetzt haben wir aber ein Problem: Zwar kommen wir initial mit
        dem Prefix auf eine Seite mit der richtigen Sprache, aber was ist,
        wenn wir von dieser Seite auf eine andere Seite in unserem
        Rails-Projekt verlinken wollen? Dann müssten wir den Prefix manuell in
        den Link einbauen. Das will keiner. Deshalb gibt es eine Lösung in
        Form von <code>Rails.application.routes.default_url_options</code>.
        Wir müssen nur unsere <methodname>set_locale</methodname> Methode in
        <filename>app/controllers/application_controller.rb</filename>
        entsprechend erweitern:<programlisting>class ApplicationController &lt; ActionController::Base
  protect_from_forgery

  before_filter :set_locale
 
  private
  def set_locale
    I18n.locale = params[:locale] || I18n.default_locale
    <emphasis>Rails.application.routes.default_url_options[:locale]= I18n.locale</emphasis> 
  end
end</programlisting></para>

        <para>Damit werden alle mit <methodname>link_to</methodname> und
        <methodname>url_for</methodname> (auf das
        <methodname>link_to</methodname> aufsetzt) erzeugten Links automatisch
        um den Parameter <varname>locale</varname> erweitert. Sie müssen
        nichts weiter tun. Alle mit dem Scaffold Generator generierten Links
        werden automatisch entsprechend verändert.</para>

        <section>
          <title>Navigationsbeispiel</title>

          <para>Um dem User die Möglichkeit zu geben einfach zwischen den
          Sprachversionen hin- und herzuschalten, bieten sich am Kopf der
          Webseite zwei Links an. Dabei sollte die aktuelle Sprache nicht als
          aktiver Link angezeigt werden. Dies kann man in der
          <filename>app/views/layouts/application.html.erb</filename> Datei
          für alle Views wie folgt realisieren:<programlisting>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Webshop&lt;/title&gt;
  &lt;%= stylesheet_link_tag    "application", :media =&gt; "all" %&gt;
  &lt;%= javascript_include_tag "application" %&gt;
  &lt;%= csrf_meta_tags %&gt;
&lt;/head&gt;
&lt;body&gt;

<emphasis>&lt;p&gt;
&lt;%= link_to_unless I18n.locale == :en, "English", locale: :en %&gt;
|
&lt;%= link_to_unless I18n.locale == :de, "Deutsch", locale: :de %&gt;
&lt;/p&gt;</emphasis>

&lt;%= yield %&gt;

&lt;/body&gt;
&lt;/html&gt;</programlisting></para>

          <para>Die Navigation wird dann am Kopf der Seite angezeigt.</para>

          <screenshot>
            <info>
              <title>Sprachauswahl in der Kopfzeile</title>
            </info>

            <mediaobject>
              <imageobject>
                <imagedata fileref="screenshots/I18n_locale_url_prefix_navigation.jpg"/>
              </imageobject>
            </mediaobject>
          </screenshot>
        </section>
      </section>

      <section>
        <title>I18n.locale per Accept-Language HTTP Header des Browsers
        setzen</title>

        <indexterm>
          <primary>I18n.locale</primary>

          <secondary>Accept-Language HTTP Header</secondary>
        </indexterm>

        <para>Wenn ein User Ihrer Webseite zum ersten mal aufschlägt, möchten
        Sie ihm im Idealfall direkt die Webseite in der richtigen Sprache
        anzeigen. Dafür können Sie das Accept-Language Feld im HTTP Header
        auslesen. In jedem Webbrowser kann der Benutzer der Software seine
        bevorzugte Sprache einstellen (siehe <uri
        xlink:href="http://www.w3.org/International/questions/qa-lang-priorities">http://www.w3.org/International/questions/qa-lang-priorities</uri>).
        Dieser Wert wird dem Webserver und damit Rails automatisch vom Browser
        mitgeteilt.</para>

        <para>Bitte verändern Sie
        <filename>app/controllers/application_controller.rb</filename> wie
        folgt ab:<programlisting>class ApplicationController &lt; ActionController::Base
  protect_from_forgery

  before_filter :set_locale
 
  private
<emphasis>  def extract_locale_from_accept_language_header
    request.env['HTTP_ACCEPT_LANGUAGE'].scan(/^[a-z]{2}/).first
  end

  def set_locale
    I18n.locale = extract_locale_from_accept_language_header || I18n.default_locale
  end</emphasis>
end
</programlisting></para>

        <para>Und vergessen Sie bitte nicht die
        <filename>config/routes.rb</filename> von den Einstellungen in <xref
        linkend="i18n_url_path_prefix"/> zu bereinigen:<programlisting>Webshop::Application.routes.draw do

  get "page/index"
  root :to =&gt; 'page#index'

end</programlisting></para>

        <para>Jetzt bekommen Sie immer die im Webbrowser definierte Sprache
        ausgeliefert. Dabei ist zu beachten, das
        <code>request.env['HTTP_ACCEPT_LANGUAGE'].scan(/^[a-z]{2}/).first</code>
        nicht alle Fälle abfängt. So sollten Sie überprüfen, ob Sie in Ihrer
        Rails-Applikation die angegebene Sprache überhaupt unterstützen. Es
        gibt einige fertige Gems, die Ihnen diese Arbeit einfach abnehmen. Die
        Suchmaschine Ihrer Wahl wird Ihnen bei der Suche helfen.</para>
      </section>

      <section xml:id="i18n_local_session">
        <title xml:id="i18n_local_session.title">I18n.locale in einer Session
        abspeichern</title>

        <indexterm>
          <primary>I18n.locale</primary>

          <secondary>Session</secondary>
        </indexterm>

        <para>Oft soll der Wert von <varname>I18n.locale</varname> in einer
        Session (siehe <xref linkend="sessions"/>) gespeichert werden.<tip>
            <para>Der hier mit Sessions beschriebene Weg funktioniert
            natürlich genau so gut mit Cookies. Siehe <xref
            linkend="cookies"/>.</para>
          </tip> Legen wir zum Setzen des Wertes als Beispiel in unserem
        Webshop einen Controller <classname>SetLanguage</classname> mit den
        beiden Actions <methodname>english</methodname> und
        <methodname>german</methodname> an:<screen>MacBook:webshop xyz$ <command>rails generate controller SetLanguage english german</command>
[...]
MacBook:webshop xyz$ </screen></para>

        <para>In der
        <filename>app/controllers/set_language_controller.rb</filename> Datei
        füllen wir die beiden Actions wie folgt:<programlisting>class SetLanguageController &lt; ApplicationController
  def english
    I18n.locale = :en
    set_session_and_redirect
  end

  def german
    I18n.locale = :de
    set_session_and_redirect
  end

  private
  def set_session_and_redirect
    session[:locale] = I18n.locale
    redirect_to :back
    rescue ActionController::RedirectBackError
      redirect_to :root
  end
end</programlisting></para>

        <para>Zum Schluss müssen wir noch in der Datei
        <filename>app/controllers/application_controller.rb</filename> die
        <methodname>set_locale</methodname> Methode anpassen:<programlisting>class ApplicationController &lt; ActionController::Base
  protect_from_forgery

  before_filter :set_locale
 
  private
  def set_locale
<emphasis>    I18n.locale = session[:locale] || I18n.default_locale
    session[:locale] = I18n.locale</emphasis>
  end
end
</programlisting></para>

        <para>Jetzt können Sie nach dem Starten von Rails mit <command>rails
        server</command> mit dem Aufruf der URL <uri
        xlink:href="http://0.0.0.0:3000/set_language/german">http://0.0.0.0:3000/set_language/german</uri>
        die Sprache auf Deutsch und mit dem Aufruf von <uri
        xlink:href="http://0.0.0.0:3000/set_language/english">http://0.0.0.0:3000/set_language/english</uri>
        die Sprache auf Englisch stellen.</para>

        <section>
          <title>Navigationsbeispiel</title>

          <para>Um dem User die Möglichkeit zu geben einfach zwischen den
          Sprachversionen hin- und herzuschalten, bieten sich am Kopf der
          Webseite zwei Links an. Dabei sollte die aktuelle Sprache nicht als
          aktiver Link angezeigt werden. Dies kann man in der
          <filename>app/views/layouts/application.html.erb</filename> Datei
          für alle Views wie folgt realisieren:<programlisting>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Webshop&lt;/title&gt;
  &lt;%= stylesheet_link_tag    "application", :media =&gt; "all" %&gt;
  &lt;%= javascript_include_tag "application" %&gt;
  &lt;%= csrf_meta_tags %&gt;
&lt;/head&gt;
&lt;body&gt;

<emphasis>&lt;p&gt;
&lt;%= link_to_unless I18n.locale == :en, "English", set_language_english_path %&gt;
|
&lt;%= link_to_unless I18n.locale == :de, "Deutsch", set_language_german_path %&gt;
&lt;/p&gt;</emphasis>

&lt;%= yield %&gt;

&lt;/body&gt;
&lt;/html&gt;</programlisting></para>

          <para>Die Navigation wird dann am Kopf der Seite angezeigt.</para>

          <screenshot>
            <info>
              <title>Sprachauswahl in der Kopfzeile</title>
            </info>

            <mediaobject>
              <imageobject>
                <imagedata fileref="screenshots/I18n_locale_url_prefix_navigation.jpg"/>
              </imageobject>
            </mediaobject>
          </screenshot>
        </section>
      </section>

      <section xml:id="i18n_locale_per_domain_endung">
        <title xml:id="i18n_locale_per_domain_endung.title">I18n.locale per
        Domain-Endung setzen</title>

        <indexterm>
          <primary>I18n.locale</primary>

          <secondary>Domain-Endung</secondary>
        </indexterm>

        <para>Wenn Sie mehrer Domains mit den für die entsprechenden Sprachen
        typischen Domain-Endungen haben, dann können Sie natürlich darüber
        auch die Sprache setzen. So würde ein Besucher von <uri
        xlink:href="http://www.example.com">http://www.example.com</uri> die
        Englische Version und ein Besucher von <uri
        xlink:href="http://www.example.de">http://www.example.de</uri> die
        Deutsche Version angezeigt bekommen.</para>

        <para>Dazu müssen wir in der
        <filename>app/controllers/application_controller.rb</filename> einen
        <methodname>before_filter</methodname> setzen, der die aufgerufene
        Domain analysiert und <varname>I18n.locale</varname>
        setzt:<programlisting>class ApplicationController &lt; ActionController::Base
  protect_from_forgery

  before_filter :set_locale
 
  private
<emphasis>  def set_locale
    case request.host.split('.').last
    when 'de'
      I18n.locale = :de
    when 'com'
      I18n.locale = :en
    else
      I18n.locale = I18n.default_locale
    end 
  end</emphasis>
 
end</programlisting></para>

        <tip>
          <para>Zum Testen dieser Funktionalität können Sie auf Ihrem Linux
          oder Mac OS X Entwicklungssystem in der Datei
          <filename>/etc/hosts</filename> die folgenden Einträge
          hinzufügen:<programlisting>0.0.0.0 www.example.com
0.0.0.0 www.example.de
</programlisting></para>

          <para>Danach können Sie die URLs <uri
          xlink:href="http://www.example.com:3000">http://www.example.com:3000</uri>
          und <uri
          xlink:href="http://www.example.de:3000">http://www.example.de:3000</uri>
          aufrufen und bekommen die entsprechenden Sprachversionen
          angezeigt.</para>
        </tip>
      </section>

      <section xml:id="i18n_welcher_weg">
        <title xml:id="i18n_welcher_weg.title">Welcher Weg ist der
        beste?</title>

        <para>Meiner Meinung nach führt eine Kombination der vorgestellten
        Wege zum besten Ergebnis. Als Erst-Besucher einer Webseite freue ich
        mich, wenn der Accept-Language HTTP Header meines Browsers korrekt
        gelesen und umgesetzt wird. Es ist aber auch schön, die Sprache später
        in der User-Konfiguration ändern zu können (gerade bei schlecht
        übersetzen Seite ist oft Englisch besser). Und zum Schluss muss man
        sagen, das eine gute Abbildbarkeit der Seite inklusive der Sprachen
        für eine Suchmaschine sehr viel Wert ist. Rails gibt Ihnen die
        Möglichkeit alle Varianten leicht zu benutzen und sogar zu
        verknüpfen.</para>
      </section>
    </section>

    <section xml:id="i18n_mehrsprachiges_scaffold">
      <title xml:id="i18n_mehrsprachiges_scaffold.title">Mehrsprachiges
      Scaffolds</title>

      <para>Als Beispiel benutzen wir einen Mini-Webshop in dem wir einen
      Product Scaffold übersetzen. Das Ziel ist es die Applikation in Deutsch
      und Englisch zur Verfügung zu stellen. Die Rails-Applikation:<screen>MacBook:~ xyz$ <command>rails new webshop</command>
[...]
MacBook:~ xyz$ <command>cd webshop</command>
MacBook:webshop xyz$ <command>rails generate scaffold Product name description 'price:decimal{7,2}'</command>
[...]
MacBook:webshop xyz$ <command>rake db:migrate</command>
[...]
MacBook:webshop xyz$ </screen></para>

      <para>Das Product-Model definieren wir in der
      <filename>app/models/product.rb</filename><programlisting>class Product &lt; ActiveRecord::Base
  attr_accessible :description, :name, :price

  validates :name,
            :presence =&gt; true,
            :uniqueness =&gt; true,
            :length =&gt; { :within =&gt; 2..255 }

  validates :price,
            :presence =&gt; true,
            :numericality =&gt; { :greater_than =&gt; 0 }
end</programlisting></para>

      <para>Bei der Sprachauswahl für den User nehmen wir den
      URL-Prefix-Variante, die in <xref linkend="i18n_url_path_prefix"/>
      beschrieben wird. Dazu verwenden wir folgende
      <filename>app/controllers/application_controller.rb</filename><programlisting>class ApplicationController &lt; ActionController::Base
  protect_from_forgery

  before_filter :set_locale
 
  private
  def set_locale
    I18n.locale = params[:locale] || I18n.default_locale
    Rails.application.routes.default_url_options[:locale]= I18n.locale
  end
end</programlisting></para>

      <para>Diese <filename>config/routes.rb</filename><programlisting>Webshop::Application.routes.draw do

  scope "(:locale)", :locale =&gt; /en|de/ do
    root :to =&gt; 'products#index'
    resources :products
  end

end</programlisting></para>

      <para>Fügen in der
      <filename>app/views/layouts/application.html.erb</filename> noch die
      Links für die Navigation ein:<programlisting>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Webshop&lt;/title&gt;
  &lt;%= stylesheet_link_tag    "application", :media =&gt; "all" %&gt;
  &lt;%= javascript_include_tag "application" %&gt;
  &lt;%= csrf_meta_tags %&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;p&gt;
&lt;%= link_to_unless I18n.locale == :en, "English", locale: :en %&gt;
|
&lt;%= link_to_unless I18n.locale == :de, "Deutsch", locale: :de %&gt;
&lt;/p&gt;

&lt;%= yield %&gt;

&lt;/body&gt;
&lt;/html&gt;</programlisting></para>

      <para>Und vorm Starten von Rails mit <command>rails server</command>
      löschen wir noch die <filename>public/index.html</filename> Datei, damit
      wir als Root-Seite die Liste aller Produkte angezeigt bekommen.<screen>MacBook:webshop xyz$ <command>rm public/index.html</command> 
MacBook:webshop xyz$ <command>rails server</command>
=&gt; Booting WEBrick
=&gt; Rails 3.2.3 application starting in development on http://0.0.0.0:3000
=&gt; Call with -d to detach
=&gt; Ctrl-C to shutdown server
[2012-06-01 10:43:06] INFO  WEBrick 1.3.1
[2012-06-01 10:43:06] INFO  ruby 1.9.3 (2012-04-20) [x86_64-darwin11.3.0]
[2012-06-01 10:43:06] INFO  WEBrick::HTTPServer#start: pid=51412 port=3000</screen></para>

      <para>Beim Aufruf von <uri
      xlink:href="http://0.0.0.0:3000">http://0.0.0.0:3000</uri> bekommen wir
      die normale Englische Seite angezeigt. <screenshot>
          <info>
            <title>Grundversion</title>
          </info>

          <mediaobject>
            <imageobject>
              <imagedata fileref="screenshots/i18n_webshop_base_version.jpg"/>
            </imageobject>
          </mediaobject>
        </screenshot></para>

      <para>Wenn wir auf Deutsch klicken verändert sich bis auf die
      Sprachnavigation ganz oben nichts auf der Seite.<screenshot>
          <info>
            <title>Grundversion de</title>
          </info>

          <mediaobject>
            <imageobject>
              <imagedata fileref="screenshots/i18n_webshop_base_version_de.jpg"/>
            </imageobject>
          </mediaobject>
        </screenshot></para>

      <para>Bei beiden Sprachen wir die Datei
      <filename>app/views/products/index.html.erb</filename> gerendet. Sie
      enthält folgenden Code:<programlisting>&lt;h1&gt;Listing products&lt;/h1&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Name&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
    &lt;th&gt;Price&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
  &lt;/tr&gt;

&lt;% @products.each do |product| %&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;%= product.name %&gt;&lt;/td&gt;
    &lt;td&gt;&lt;%= product.description %&gt;&lt;/td&gt;
    &lt;td&gt;&lt;%= product.price %&gt;&lt;/td&gt;
    &lt;td&gt;&lt;%= link_to 'Show', product %&gt;&lt;/td&gt;
    &lt;td&gt;&lt;%= link_to 'Edit', edit_product_path(product) %&gt;&lt;/td&gt;
    &lt;td&gt;&lt;%= link_to 'Destroy', product, confirm: 'Are you sure?', method: :delete %&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;% end %&gt;
&lt;/table&gt;

&lt;br /&gt;

&lt;%= link_to 'New Product', new_product_path %&gt;</programlisting></para>

      <para>Jetzt müssen wir nur noch einen Weg finden die einzelnen Elemente
      dieser Seite sinnvoll und möglichst generisch zu übersetzen.</para>

      <section>
        <title>Textbausteine im YAML-Format</title>

        <para>Jetzt müssen wir für <methodname>I18n.t</methodname> die
        einzelnen Textbausteine definieren. Die entsprechenden Verzeichnisse
        müssen dazu noch angelegt werden:<screen>MacBook:webshop xyz$ <command>mkdir -p config/locales/models/product</command>
MacBook:webshop xyz$ <command>mkdir -p config/locales/views/product</command>
MacBook:webshop xyz$</screen></para>

        <para>Damit die dort angelegten YAML-Dateien auch automatisch
        eingelesen werden, müssen Sie die folgenden Zeilen in der Datei
        <filename>config/application.rb</filename> einfügen:<programlisting>    # The default locale is :en and all translations from config/locales/*.rb,yml are auto loaded.
<emphasis>    config.i18n.load_path += Dir[Rails.root.join('config', 'locales', 'models', '*', '*.yml').to_s]
    config.i18n.load_path += Dir[Rails.root.join('config', 'locales', 'views', '*', '*.yml').to_s]
    config.i18n.default_locale = :en</emphasis></programlisting></para>

        <section>
          <title>Deutsch</title>

          <para>Bitte legen Sie die Datei
          <filename>config/locales/models/product/de.yml</filename> mit
          folgendem Inhalt an.<programlisting># ruby encoding: utf-8

de:
  activerecord:
    models:
      product: 'Produkt'
    attributes:
      product:
        name: 'Name'
        description: 'Beschreibung'
        price: 'Preis'
</programlisting></para>

          <para>In der Datei
          <filename>config/locales/views/product/de.yml</filename> fügen wir
          ein paar Werte für die Scaffold Views ein:<programlisting># ruby encoding: utf-8

de:
  views:
    show: Anzeigen
    edit: Editieren
    destroy: Löschen
    are_your_sure: Sind Sie sicher?
    back: Zurück
    edit: Editieren
    product:
      index:
        title: Liste aller Produkte
        new_product: Neues Produkt
      edit:
        title: Produkt editieren
      new:
        title: Neues Produkt
      flash_messages:
        product_was_successfully_created: 'Das Produkt wurde erfolgreich angelegt.'
        product_was_successfully_updated: 'Das Produkt wurde erfolgreich aktualisiert.'</programlisting></para>

          <para>Zum Schluss kopieren wir noch eine fertige
          Standard-Übersetzung von Sven Fuchs aus seinem Github-Repository
          <uri
          xlink:href="https://github.com/svenfuchs/rails-i18n">https://github.com/svenfuchs/rails-i18n</uri>:<screen>MacBook:webshop xyz$ <command>cd config/locales</command>
MacBook:locales xyz$ <command>curl -O https://raw.github.com/svenfuchs/rails-i18n/master/rails/locale/de.yml</command>
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  4940  100  4940    0     0   9574      0 --:--:-- --:--:-- --:--:-- 11932
MacBook:locales xyz$ <command>cd ../..</command>
MacBook:webshop xyz$ </screen></para>

          <note>
            <para>Wenn Sie wissen, wie Bundler funktioniert, könne Sie auch
            die Zeile <code>gem 'rails-i18n'</code> in die Datei
            <filename>Gemfile</filename> einfügen und danach
            <command>bundle</command> ausführen. Damit bekommen Sie alle
            Sprachdateien aus dem Repository eingespielt.</para>
          </note>

          <para>In der <filename>config/locales/de.yml</filename> Datei sind
          benötigten Formate und generischen Formulierungen für Deutsch
          enthalten, die wir für eine normale Rails-Applikation benötigen
          (z.B. die Wochentage, Währungssymbol, usw.). Schauen Sie einmal mit
          Ihrem Lieblingseditor rein, um einen Überblick zu bekommen.</para>
        </section>

        <section>
          <title>Englisch</title>

          <para>Da für Englisch die meisten Sachen schon im System vorhanden
          sind, müssen wir nur in der Datei
          <filename>config/locales/views/product/en.yml</filename> ein paar
          Werte für die Scaffold Views einfügen:<programlisting>en:
  views:
    show: Show
    edit: Edit
    destroy: Delete
    are_you_sure: Are you sure?
    back: Back
    edit: Edit
    product:
      index:
        title: List of all products
        new_product: New product
      edit:
        title: Edit Product
      new:
        title: New product
      flash_messages:
        product_was_successfully_created: 'Product was successfully created.'
        product_was_successfully_updated: 'Product was successfully updated.'</programlisting></para>
        </section>
      </section>

      <section>
        <title>Views mit I18n.t ausstatten</title>

        <para>Bitte verändern Sie die aufgeführten View-Dateien wie
        angegeben.</para>

        <section>
          <title>_form.html.erb</title>

          <para>In der Datei
          <filename>app/views/products/_form.html.erb</filename> müssen wir im
          oberen Teil die Anzeige der Validierungsfehler auf
          <methodname>I18n.t</methodname> umstellen. Die Namen der
          Formularfehler werden automatisch aus
          <varname>activerecord.attributes.product</varname>
          eingelesen:<programlisting>&lt;%= form_for(@product) do |f| %&gt;
  &lt;% if @product.errors.any? %&gt;
    &lt;div id="error_explanation"&gt;
      &lt;h2&gt;&lt;%= t 'activerecord.errors.template.header', :model =&gt; Product.model_name.human, :count =&gt; @product.errors.count %&gt;&lt;/h2&gt;

      &lt;ul&gt;
      &lt;% @product.errors.full_messages.each do |msg| %&gt;
        &lt;li&gt;&lt;%= msg %&gt;&lt;/li&gt;
      &lt;% end %&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;% end %&gt;

  &lt;div class="field"&gt;
    &lt;%= f.label :name %&gt;&lt;br /&gt;
    &lt;%= f.text_field :name %&gt;
  &lt;/div&gt;
  &lt;div class="field"&gt;
    &lt;%= f.label :description %&gt;&lt;br /&gt;
    &lt;%= f.text_field :description %&gt;
  &lt;/div&gt;
  &lt;div class="field"&gt;
    &lt;%= f.label :price %&gt;&lt;br /&gt;
    &lt;%= f.text_field :price %&gt;
  &lt;/div&gt;
  &lt;div class="actions"&gt;
    &lt;%= f.submit %&gt;
  &lt;/div&gt;
&lt;% end %&gt;
</programlisting></para>
        </section>

        <section>
          <title>edit.html.erb</title>

          <para>In der Datei
          <filename>app/views/products/edit.html.erb</filename> müssen wir die
          Überschrift und die Links am Fuss der Seite mit <methodname>I18n.t
          </methodname>einbauen:<programlisting>&lt;h1&gt;&lt;%= t 'views.product.edit.title' %&gt;&lt;/h1&gt;

&lt;%= render 'form' %&gt;

&lt;%= link_to I18n.t('views.show'), @product %&gt; |
&lt;%= link_to I18n.t('views.back'), products_path %&gt;</programlisting></para>
        </section>

        <section>
          <title>index.html.erb</title>

          <para>In der Datei
          <filename>app/views/products/index.html.erb</filename> müssen wir so
          gut wie jede Zeile verändern. Im Tabellenkopf benutze ich dafür
          <methodname>human_attribute_name()</methodname>, das könnte aber
          auch direkt mit <methodname>I18n.t</methodname> gemacht werden. Der
          Preis des Produktes wird mit dem Helper number_to_currency
          angegeben. In einer realen Applikation müssen wir an dieser Stelle
          noch eine definierte Währung angeben.<programlisting>&lt;h1&gt;&lt;%= t 'views.product.index.listing_products' %&gt;&lt;/h1&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;%= Product.human_attribute_name(:name) %&gt;&lt;/th&gt;
    &lt;th&gt;&lt;%= Product.human_attribute_name(:description) %&gt;&lt;/th&gt;
    &lt;th&gt;&lt;%= Product.human_attribute_name(:price) %&gt;&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
  &lt;/tr&gt;

&lt;% @products.each do |product| %&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;%= product.name %&gt;&lt;/td&gt;
    &lt;td&gt;&lt;%= product.description %&gt;&lt;/td&gt;
    &lt;td&gt;&lt;%= number_to_currency(product.price) %&gt;&lt;/td&gt;
    &lt;td&gt;&lt;%= link_to I18n.t('views.show'), product %&gt;&lt;/td&gt;
    &lt;td&gt;&lt;%= link_to I18n.t('views.edit'), edit_product_path(product) %&gt;&lt;/td&gt;
    &lt;td&gt;&lt;%= link_to I18n.t('views.destroy'), product, confirm: I18n.t('views.are_you_sure'), method: :delete %&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;% end %&gt;
&lt;/table&gt;

&lt;br /&gt;

&lt;%= link_to I18n.t('views.product.index.new_product'), new_product_path %&gt;
</programlisting></para>
        </section>

        <section>
          <title>new.html.erb</title>

          <para>In der <filename>app/views/products/new.html.erb</filename>
          muss die Überschrift und der Link angepasst werden:<programlisting>&lt;h1&gt;&lt;%= t 'views.product.new.title' %&gt;&lt;/h1&gt;

&lt;%= render 'form' %&gt;

&lt;%= link_to I18n.t('views.back'), products_path %&gt;</programlisting></para>
        </section>

        <section>
          <title>show.html.erb</title>

          <para>In der <filename>app/views/products/show.html.erb</filename>
          benutzen wir wieder <methodname>human_attribute_name()</methodname>
          für die Attribute. Zusätzlich müssen noch die Links mit
          <methodname>I18n.t</methodname> übersetzt werden. Wie beim index
          View benutzen wir auch
          <methodname>number_to_currency()</methodname>, um den Preis
          formatiert anzuzeigen:<programlisting>&lt;p id="notice"&gt;&lt;%= notice %&gt;&lt;/p&gt;

&lt;p&gt;
  &lt;b&gt;&lt;%= Product.human_attribute_name(:name) %&gt;:&lt;/b&gt;
  &lt;%= @product.name %&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;b&gt;&lt;%= Product.human_attribute_name(:description) %&gt;:&lt;/b&gt;
  &lt;%= @product.description %&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;b&gt;&lt;%= Product.human_attribute_name(:price) %&gt;:&lt;/b&gt;
  &lt;%= number_to_currency(@product.price) %&gt;
&lt;/p&gt;

&lt;%= link_to I18n.t('views.edit'), edit_product_path(@product) %&gt; |
&lt;%= link_to I18n.t('views.back'), products_path %&gt;</programlisting></para>
        </section>
      </section>

      <section>
        <title>Flash-Messages im Controller übersetzen</title>

        <para>Zum Schluss müssen wir in der
        <filename>app/controllers/products_controller.rb</filename> die zwei
        Flash-Nachrichten beim Erstellen (create) und Updaten (update) von
        Datensätzen mit <methodname>I18n.t</methodname>
        übersetzen:<programlisting>class ProductsController &lt; ApplicationController
  # GET /products
  # GET /products.json
  def index
    @products = Product.all

    respond_to do |format|
      format.html # index.html.erb
      format.json { render json: @products }
    end
  end

  # GET /products/1
  # GET /products/1.json
  def show
    @product = Product.find(params[:id])

    respond_to do |format|
      format.html # show.html.erb
      format.json { render json: @product }
    end
  end

  # GET /products/new
  # GET /products/new.json
  def new
    @product = Product.new

    respond_to do |format|
      format.html # new.html.erb
      format.json { render json: @product }
    end
  end

  # GET /products/1/edit
  def edit
    @product = Product.find(params[:id])
  end

  # POST /products
  # POST /products.json
  def create
    @product = Product.new(params[:product])

    respond_to do |format|
      if @product.save
        format.html { redirect_to @product, notice: <emphasis>I18n.t('views.product.flash_messages.product_was_successfully_created')</emphasis> }
        format.json { render json: @product, status: :created, location: @product }
      else
        format.html { render action: "new" }
        format.json { render json: @product.errors, status: :unprocessable_entity }
      end
    end
  end

  # PUT /products/1
  # PUT /products/1.json
  def update
    @product = Product.find(params[:id])

    respond_to do |format|
      if @product.update_attributes(params[:product])
        format.html { redirect_to @product, notice: <emphasis>I18n.t('views.product.flash_messages.product_was_successfully_updated')</emphasis> }
        format.json { head :no_content }
      else
        format.html { render action: "edit" }
        format.json { render json: @product.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /products/1
  # DELETE /products/1.json
  def destroy
    @product = Product.find(params[:id])
    @product.destroy

    respond_to do |format|
      format.html { redirect_to products_url }
      format.json { head :no_content }
    end
  end
end
</programlisting></para>
      </section>

      <section>
        <title>Das Ergebnis</title>

        <para>Jetzt können sie das Scaffold products sowohl in Deutsch wie
        auch in Englisch bedienen. Die Umschaltung der Sprache erfolgt über
        den Link am Kopf der Seite.</para>
      </section>
    </section>
  </section>

  <section xml:id="i18n_weiterfuehrende_informationen">
    <title xml:id="i18n_weiterfuehrende_informationen.title">Weiterführende
    Informationen</title>

    <para>Die beste Informationsquelle zu diesem Thema ist die Seite <uri
    xlink:href="http://guides.rubyonrails.org/i18n.html">http://guides.rubyonrails.org/i18n.html</uri>
    aus der Rails Dokumentation. Dort wird auch gezeigt wie Sie andere
    Backends zur Definierung der Übersetzungen bedienen können.</para>

    <para>Wie so oft gibt es auf <uri
    xlink:href="http://railscasts.com">Railscasts.com</uri> eine ganze Reihe
    an Railscasts zum Thema I18n: <uri
    xlink:href="http://railscasts.com/episodes?utf8=%E2%9C%93&amp;search=i18n">http://railscasts.com/episodes?utf8=%E2%9C%93&amp;search=i18n</uri></para>
  </section>
</chapter>
