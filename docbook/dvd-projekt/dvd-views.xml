<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="views" xml:lang="de"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title xml:id="views.title">Views</title>

  <section xml:id="grundwissen-views">
    <title>Grundwissen View</title>

    <para>Ein View ist im MVC für die Darstellung der Webseite zuständig.
    Wobei ein View nicht zwangsläufig eine HTML-Seite erstellt, sondern z.B.
    auch PDFs oder XML-Dateien rendern kann.</para>

    <section xml:id="view-verzeichnis">
      <title>Das View-Verzeichnis</title>

      <para>Einer der Vorteile von Ruby on Rails ist eine ganz stringente
      Verzeichnisstruktur. Views finden sich immer im Verzeichnis
      <filename>app/views/</filename>. Schauen wir mal rein:<screen>sw@debian:~/dvd-sammlung$ <command>tree app/views/</command>
app/views/
|-- dvds
|   |-- edit.html.erb
|   |-- index.html.erb
|   |-- new.html.erb
|   `-- show.html.erb
`-- layouts
    `-- dvds.html.erb

2 directories, 5 files
sw@debian:~/dvd-sammlung$</screen></para>

      <para>Die erb-Dateien im Verzeichnis <filename>app/views/dvds</filename>
      erscheinen sinnvoll und jeweils für die verschiedenen durch den
      Controller eingeleiteten Aktionen da zu sein.</para>
    </section>

    <section xml:id="app-views-layouts">
      <title>app/views/layouts/</title>

      <para>Das <filename>app/views/layouts/</filename> Verzeichnis enthält
      Default-Dateien. Quasi eine Schablonen in die die Views aus dem
      Verzeichnis <filename>app/views/dvds/</filename> eingebaut werden. Die
      Datei <filename>app/views/layouts/dvds.html.erb</filename> wurde
      automatisch beim <link linkend="dvd-scaffolding">Scaffolding</link>
      erstellt. Schauen wir mal rein:<programlisting>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
       "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;

&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"&gt;
&lt;head&gt;
  &lt;meta http-equiv="content-type" content="text/html;charset=UTF-8" /&gt;
  &lt;title&gt;Dvds: &lt;%= controller.action_name %&gt;&lt;/title&gt;
  &lt;%= stylesheet_link_tag 'scaffold' %&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;p style="color: green"&gt;&lt;%= flash[:notice] %&gt;&lt;/p&gt;

&lt;%= yield %&gt;

&lt;/body&gt;
&lt;/html&gt;
</programlisting></para>

      <para>Ich gehe davon aus, das Sie HTML lesen können und prinzipiell
      verstehen, was in dieser Datei enthalten ist. Gehen wir also nur auf die
      Rails-Spezialitäten ein.</para>

      <section xml:id="controller-action-name">
        <title>&lt;%= controller.action_name %&gt; (Zeile 7)</title>

        <para>Leider ist das ein Wert, den wir nicht in der Console
        nachstellen können (da er nur im Live-Betrieb sinnvolle Werte
        enthält). Glücklicherweise ist er aber sehr selbstredend. An dieser
        Stelle wir die aktuelle RESTful Aktion angezeigt. Also Edit, Index,
        New oder Show.</para>
      </section>

      <section xml:id="stlyesheet-link-tag-scaffold">
        <title>&lt;%= stylesheet_link_tag 'scaffold' %&gt; (Zeile 8)</title>

        <para>Mit dem Helper stylesheet_link_tag wird ein CSS-Stylesheet
        eingebunden. Das hier automatisch eingebundene Stylesheet können Sie
        auf der Linux-Shell mit <application>find</application>
        finden:<screen>sw@debian:~/dvd-sammlung$ <command>find . -name "scaffold.css"</command>
./public/stylesheets/scaffold.css
sw@debian:~/dvd-sammlung$</screen></para>

        <para>Dieses Default
        <filename>public/stylesheets/scaffold.css</filename> ist recht
        übersichtlich. Sie können es nach belieben verändern oder auch an
        dieser Stelle auf ein anderes CSS-File verweisen.<programlisting>body { background-color: #fff; color: #333; }

body, p, ol, ul, td {
  font-family: verdana, arial, helvetica, sans-serif;
  font-size:   13px;
  line-height: 18px;
}

pre {
  background-color: #eee;
  padding: 10px;
  font-size: 11px;
}

a { color: #000; }
a:visited { color: #666; }
a:hover { color: #fff; background-color:#000; }

.fieldWithErrors {
  padding: 2px;
  background-color: red;
  display: table;
}

#errorExplanation {
  width: 400px;
  border: 2px solid red;
  padding: 7px;
  padding-bottom: 12px;
  margin-bottom: 20px;
  background-color: #f0f0f0;
}

#errorExplanation h2 {
  text-align: left;
  font-weight: bold;
  padding: 5px 5px 5px 15px;
  font-size: 12px;
  margin: -7px;
  background-color: #c00;
  color: #fff;
}

#errorExplanation p {
  color: #333;
  margin-bottom: 0;
  padding: 5px;
}

#errorExplanation ul li {
  font-size: 12px;
  list-style: square;
}
</programlisting></para>
      </section>

      <section xml:id="flash-notice">
        <title>&lt;%= flash[:notice] %&gt; (Zeile 12)</title>

        <para>Der Begriff flash ist meiner Meinung nach selten unglücklich
        gewählt. Die meisten Nicht-Rails-User denken bei Flash direkt an
        Adobe-Flash und nicht an Rails-Flash.</para>

        <para>Rails-Flash ist die Nachricht, die Sie angezeigt bekommen, wenn
        Sie zum Beispiel einen neuen Datensatz abgespeichert haben. Per
        default ist Sie in einem Kasten mit leicht grünen Hintergrund. Dort
        steht bei unserem DVD-Model nach dem Anlegen einer neuen DVD "Dvd was
        successfully created.". Diese Nachricht wurde im DVD-Controller
        (app/controller/dvds_controller.rb) in der create-Methode
        gesetzt:<programlisting>  # POST /dvds
  # POST /dvds.xml
  def create
    @dvd = Dvd.new(params[:dvd])

    respond_to do |format|
      if @dvd.save
        <emphasis>flash[:notice] = 'Dvd was successfully created.'</emphasis>
        format.html { redirect_to(@dvd) }
        format.xml  { render :xml =&gt; @dvd, :status =&gt; :created, :location =&gt; @dvd }
      else
        format.html { render :action =&gt; "new" }
        format.xml  { render :xml =&gt; @dvd.errors, :status =&gt; :unprocessable_entity }
      end
    end
  end
</programlisting></para>

        <para>Dort sehen Sie in der Zeile 8 das der Hash
        <varname>flash[:notice]</varname> mit genau diesem String gefüllt
        wird. Das interessante an einem Flash ist die Eigenschaft, das der
        Inhalt eines flash-Hashes erst beim View angezeigt und so lange
        mitgeschleppt wird. Die <methodname>create</methodname>-Methode legt
        den Datensatz an, aber rendert nicht selbstständig einen View. Anstatt
        wird in Zeile 9 ein Redirect zur <methodname>show</methodname>-Methode
        getriggert. Erst die show-Methode rendert den show-View und darin dann
        auch <varname>flash[:notice]</varname>.</para>

        <para>Probieren Sie es am besten mal durch den neuen Eintrag einer DVD
        aus.</para>
      </section>

      <section xml:id="yield">
        <title>&lt;%= yield %&gt; (Zeile 14)</title>

        <para>Yield rendert die entsprechende View-Datei und fügt sie an
        dieser Stelle ein.</para>
      </section>
    </section>

    <section xml:id="ein-layout-fuer-die-gesamte-application">
      <title>Ein Layout für die gesamte Application</title>

      <para>Scafolding legt per default pro Model auch eine eigene
      Layout-Datei an. In den meisten Fällen ist es praktisch diese Datei
      direkt zu löschen und stattdessen eine
      <filename>app/views/layouts/applications.html.erb</filename> Datei
      anzugelegen. Diese Datei gilt dann für alle Views unabhängig vom
      Controller. So können Sie leicht ein einheitliches Layout
      realisieren.</para>
    </section>
  </section>

  <section xml:id="views-anpassen">
    <title>Views customizen</title>

    <para>Es gibt bei allen Views prinzipiell zwei Dateien, die wir für
    Layoutanpassungen benutzen können:<itemizedlist>
        <listitem>
          <para>Die View-Datei selber.</para>
        </listitem>

        <listitem>
          <para>Die Layout-Datei.</para>
        </listitem>
      </itemizedlist></para>

    <para>Über Geschmack und Ergonomie lässt sich oft trefflich streiten. Es
    geht in diesem Kapitel aber nicht um "bestes Webdesign", sondern um den
    prinzipiellen Weg. Was Sie damit später in Ihrer Applikation machen,
    bleibt Ihnen überlassen. Ich werde gezielt nur einfache Änderungen
    machen.</para>

    <para>Die angezeigten Datensätze wurden mit der
    <filename>db/seeds.rb</filename> Datei aus <xref linkend="dvd-seeds" />
    erstelle.</para>

    <section xml:id="index-view-anpassen">
      <title>Index-View anpassen</title>

      <para>Per Default Scaffolding sieht unsere Index-Ansicht wie folgt
      aus:<screen>sw@debian:~/dvd-sammlung$ <command>w3m -dump http://0.0.0.0:3000/dvds</command>
Received cookie: _dvd-sammlung_session=BAh7BzoPc2Vzc2lvbl9pZCIlYWY3YjlmZGIxMmM4NTk2ZjI3MTZmZGFhZWQ2ZTUzMTE6EF9jc3JmX3Rva2VuSSIxNU5Cc1lFVkxraHRtbldRa2tiOFR4a0pKeEh6bnpPRzJhOTlzcjQwUTNsZz0GOg1lbmNvZGluZyINVVMtQVNDSUk%3D--747d803a3f9fff004a404dad1f88b66e294dca2a
Listing dvds

       Title         Production year Duration Plot Rating
The Terminator       1984                                 Show Edit Destroy
Terminator 2         1992                                 Show Edit Destroy
Terminator Salvation 2009                                 Show Edit Destroy
Rain Man             1988                          5      Show Edit Destroy
War of the Worlds    2005                          4      Show Edit Destroy
Collateral           2004                          5      Show Edit Destroy
Miami Vice           2006                          5      Show Edit Destroy
Hancock              2008                          4      Show Edit Destroy
The Aviator          2004                          4      Show Edit Destroy
Some Like It Hot     1959                          5      Show Edit Destroy
W.                   2008                          4      Show Edit Destroy
Iron Man             2008                          5      Show Edit Destroy
The Dark Knight      2008                          5      Show Edit Destroy


New dvd
sw@debian:~/dvd-sammlung$</screen></para>

      <para>Rechts neben der DVD-Tabelle werden immer Links auf die Methoden
      Show, Edit und Destroy angezeigt. Das ist in der Index-Tabelle irgendwie
      deplaziert. Wir werden folgendes machen:<itemizedlist>
          <listitem>
            <para>Der Titel eines Films wird mit der Show-Methode des Filmes
            verlinkt.</para>
          </listitem>

          <listitem>
            <para>Die Links zu Show, Edit und Destroy werden gelöscht.</para>
          </listitem>

          <listitem>
            <para>Das Produktionsjahr wird in Klammern hinter den Filmtitel
            geschrieben.</para>
          </listitem>

          <listitem>
            <para>Die Überschriften der Tabelle werden optimiert.</para>
          </listitem>
        </itemizedlist></para>

      <section>
        <title>Default app/views/dvds/index.html.erb</title>

        <para>Die vom Scaffolding-Skript angelegte Default Datei für die
        index-Methode sieht wie folgt aus:<programlisting>&lt;h1&gt;Listing dvds&lt;/h1&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Title&lt;/th&gt;
    &lt;th&gt;Production year&lt;/th&gt;
    &lt;th&gt;Duration&lt;/th&gt;
    &lt;th&gt;Plot&lt;/th&gt;
    &lt;th&gt;Rating&lt;/th&gt;
  &lt;/tr&gt;

&lt;% @dvds.each do |dvd| %&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;%=h dvd.title %&gt;&lt;/td&gt;
    &lt;td&gt;&lt;%=h dvd.production_year %&gt;&lt;/td&gt;
    &lt;td&gt;&lt;%=h dvd.duration %&gt;&lt;/td&gt;
    &lt;td&gt;&lt;%=h dvd.plot %&gt;&lt;/td&gt;
    &lt;td&gt;&lt;%=h dvd.rating %&gt;&lt;/td&gt;
    &lt;td&gt;&lt;%= link_to 'Show', dvd %&gt;&lt;/td&gt;
    &lt;td&gt;&lt;%= link_to 'Edit', edit_dvd_path(dvd) %&gt;&lt;/td&gt;
    &lt;td&gt;&lt;%= link_to 'Destroy', dvd, :confirm =&gt; 'Are you sure?', :method =&gt; :delete %&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;% end %&gt;
&lt;/table&gt;

&lt;br /&gt;

&lt;%= link_to 'New dvd', new_dvd_path %&gt;</programlisting></para>
      </section>

      <section>
        <title>Neue app/views/dvds/index.html.erb</title>

        <para>Unsere neue index-View sieht wie folgt aus:<programlisting>&lt;h1&gt;Listing dvds&lt;/h1&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Title (Production Year)&lt;/th&gt;
    &lt;th&gt;Duration&lt;/th&gt;
    &lt;th&gt;Plot&lt;/th&gt;
    &lt;th&gt;Rating&lt;/th&gt;
  &lt;/tr&gt;

&lt;% @dvds.each do |dvd| %&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;%= link_to dvd.title, dvd %&gt; (&lt;%=h dvd.production_year %&gt;)&lt;/td&gt;
    &lt;td&gt;&lt;%=h dvd.duration %&gt;&lt;/td&gt;
    &lt;td&gt;&lt;%=h dvd.plot %&gt;&lt;/td&gt;
    &lt;td&gt;&lt;%=h dvd.rating %&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;% end %&gt;
&lt;/table&gt;

&lt;br /&gt;

&lt;%= link_to 'New dvd', new_dvd_path %&gt;
</programlisting></para>

        <para>Und sieht später im Browser wie folgt aus (die Links werden
        leider hier im Screenshot nicht richtig dargestellt):<screen>sw@debian:~/dvd-sammlung$ <command>w3m -dump http://0.0.0.0:3000/dvds</command>
Received cookie: _dvd-sammlung_session=BAh7BjoPc2Vzc2lvbl9pZCIlMWFjNGFjNjNkM2Y2MjBlYTExYWJmYzZjOTI3OTI3Zjg%3D--37d20b23033911a041510f873a2ae4a437abd4fb
Listing dvds

  Title (Production Year)   Duration Plot Rating
The Terminator (1984)
Terminator 2 (1992)
Terminator Salvation (2009)
Rain Man (1988)                           5
War of the Worlds (2005)                  4
Collateral (2004)                         5
Miami Vice (2006)                         5
Hancock (2008)                            4
The Aviator (2004)                        4
Some Like It Hot (1959)                   5
W. (2008)                                 4
Iron Man (2008)                           5
The Dark Knight (2008)                    5


New dvd
sw@debian:~/dvd-sammlung$</screen></para>

        <para>Als nächstes fügen wir noch folgende Verbesserungen
        ein:<itemizedlist>
            <listitem>
              <para>Den <methodname>stars_for_rating()</methodname> Helper aus
              <xref linkend="dvd-sterne-helper" />.</para>
            </listitem>

            <listitem>
              <para>Eine Längen-Limitierung bei
              <methodname>dvd.plot</methodname>. Mit dem Helper
              <methodname>truncate</methodname> aus der Class
              ActionView::Helpers geht das am einfachsten (Hilfe zu truncate
              können Sie unter <command>ri
              ActionView::Helpers::TextHelper.truncate</command> abrufbar).
              Damit stellen wir sicher, das in dieser Tabelle nicht ein Plot
              von mehreren DIN-A4 Seiten ausgegeben wird.</para>
            </listitem>

            <listitem>
              <para>Wir erstellen eine Methode in
              <filename>app/models/dvd.rb</filename> die uns die Länge des
              Filmes in hh:mm als String ausgibt. Diesen Wert geben wir dann
              im Webinterface aus. Hier die
              <filename>app/models/dvd.rb</filename> Datei:<programlisting>class Dvd &lt; ActiveRecord::Base
  def hh_mm
    return 'NA' if duration.blank?
    hh = duration / 60    
    mm = duration - (hh * 60)
    hh.to_s + ':%.2d' % mm
  end
end
</programlisting></para>
            </listitem>
          </itemizedlist>Die neue erb-Datei sieht dann wie folgt
        aus:<programlisting>&lt;h1&gt;Listing dvds&lt;/h1&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Title (Production Year)&lt;/th&gt;
    &lt;th&gt;Duration&lt;/th&gt;
    &lt;th&gt;Plot&lt;/th&gt;
    &lt;th&gt;Rating&lt;/th&gt;
  &lt;/tr&gt;

&lt;% @dvds.each do |dvd| %&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;%= link_to dvd.title, dvd %&gt; (&lt;%=h dvd.production_year %&gt;)&lt;/td&gt;
    &lt;td&gt;&lt;%=h dvd.hh_mm %&gt;&lt;/td&gt;
    &lt;td&gt;&lt;%=h truncate(dvd.plot, :length =&gt; 100) %&gt;&lt;/td&gt;
    &lt;td&gt;&lt;%=h stars_for_rating(dvd.rating) %&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;% end %&gt;
&lt;/table&gt;

&lt;br /&gt;

&lt;%= link_to 'New dvd', new_dvd_path %&gt;
</programlisting></para>

        <para>Die Webseite sieht dann wie folgt aus:<screen>sw@debian:~/dvd-sammlung$ <command>w3m -dump http://0.0.0.0:3000/dvds</command>
Received cookie: _dvd-sammlung_session=BAh7BjoPc2Vzc2lvbl9pZCIlMDU3NWM1YmYwNzc3MjgyNzU4YmRiZmFmZDU5ZjhlZWY%3D--faa1b385dadea5fade4063f6ad4c0484b894f109
Listing dvds

  Title (Production Year)   Duration Plot Rating
The Terminator (1984)       NA
Terminator 2 (1992)         NA
Terminator Salvation (2009) NA
Rain Man (1988)             NA            *****
War of the Worlds (2005)    NA            ****
Collateral (2004)           NA            *****
Miami Vice (2006)           NA            *****
Hancock (2008)              NA            ****
The Aviator (2004)          NA            ****
Some Like It Hot (1959)     NA            *****
W. (2008)                   NA            ****
Iron Man (2008)             NA            *****
The Dark Knight (2008)      NA            *****


New dvd
sw@debian:~/dvd-sammlung$</screen></para>
      </section>

      <section>
        <title>Helpers vs. Methoden</title>

        <para>Sie werden sich vielleicht gefragt haben, warum wir für die
        Anzeige der Bewertung (rating) einen Helper und für die Anzeige der
        Zeit eine Methode genommen haben. Darüber habe ich selber auch lange
        nachgedacht.<footnote>
            <para>Ein Dank an David Vrensk, der mir den entscheidenen Tipp
            gegeben hat.</para>
          </footnote> Wie so oft kann man in Rails beides nehmen. Bei den
        Sternen für das Rating ist die Sache klar. Aber bei der Methode für
        die Zeit ist die Argumentation wie folgt.</para>

        <para>Die Anzeige in Sternen ist eine Einwegstrasse. Wir werden nie
        das Rating in Sternen eingeben. Bei der hh:mm Anzeige ist das aber
        etwas anderes. Es macht durch aus Sinn zu der Getter-Methode
        <methodname>hh_mm</methodname> auch noch eine Setter-Methode
        <methodname>hh_mm =</methodname> zu setzen. Damit können wir dann auch
        die <varname>duration</varname> in Stunden und Minuten setzten.</para>

        <para>Die neue <filename>app/models/dvd.rb</filename> sieht dann so
        aus:<programlisting>class Dvd &lt; ActiveRecord::Base
  # Getter method for the duration
  #
  # Example:
  # self.duration = 108 =&gt; '1:48'
  #
  def hh_mm
    return 'NA' if self.duration.blank?
    minutes_to_hh_mm(self.duration)
  end

  # Setter method for the duration
  #
  # Example:
  # hh_mm = '1:48' =&gt; self.duration = 108
  #
  def hh_mm=(input = nil)
    if input.blank? or input.upcase == 'NA'
      self.duration = nil
    else 
      duration_array = input.split(/:/)
      self.duration = duration_array[0].to_i * 60 + duration_array[1].to_i
      self.duration = nil if minutes_to_hh_mm(duration) != input
    end
  end

private
  def minutes_to_hh_mm(minutes = nil)
    return nil if minutes.blank? or minutes.to_s.to_i != minutes
    hh = minutes / 60    
    mm = minutes - (hh * 60)
    hh.to_s + ':%.2d' % mm
  end
end
</programlisting>Kurze Erklärung: Wir verschieben die eigentliche
        Konvertierung in die private Methode
        <methodname>minutes_to_hh_mm</methodname>. Somit können wir diese
        sowohl bei der Getter-Methode zum konvertieren, wie auch als
        zusätzliche Überprüfung, ob die Setter-Methode funktioniert,
        benutzen.</para>

        <para>Probieren wir das mal in der Console aus. Als ersten suchen wir
        einen Film und dann speichern wir die Länge nicht in Minuten, sondern
        als String '1:48' für eine Stunde und 48 Minuten.<screen>sw@debian:~/dvd-sammlung$ <command>./script/console</command> 
Loading development environment (Rails 2.3.5)
&gt;&gt; <command>terminator = Dvd.find_by_title('The Terminator')</command>
=&gt; #&lt;Dvd id: 1, title: "The Terminator", production_year: 1984, duration: nil, plot: nil, rating: nil, created_at: "2010-01-03 06:17:32", updated_at: "2010-01-03 06:17:32"&gt;
&gt;&gt; <command>terminator.hh_mm = '1:48'</command>
=&gt; "1:48"
&gt;&gt; <command>terminator</command>
=&gt; #&lt;Dvd id: 1, title: "The Terminator", production_year: 1984, duration: 108, plot: nil, rating: nil, created_at: "2010-01-03 06:17:32", updated_at: "2010-01-03 06:17:32"&gt;
&gt;&gt; <command>terminator.hh_mm</command>
=&gt; "1:48"
&gt;&gt; <command>terminator.save</command>
=&gt; true
&gt;&gt; <command>exit</command>
sw@debian:~/dvd-sammlung$</screen></para>
      </section>
    </section>

    <section>
      <title>New View anpassen</title>

      <para>Schauen wir uns als erstes mal den vom Scaffold-Skript erstellten
      View an:<screen>sw@debian:~$ <command>w3m -dump http://localhost:3000/dvds/new</command>
Received cookie: _dvd-sammlung_session=BAh7BzoPc2Vzc2lvbl9pZCIlMGM1ODVjMzgzN2UzOTM1YmJlMTYyOTAwMDBjNjNhOWU6EF9jc3JmX3Rva2VuSSIxM1ZadDhETmJ1VllkeWtTZExNZ3FlSUtVd0N0c1c4U3pzNERWaDZ1cU5OTT0GOg1lbmNvZGluZyINVVMtQVNDSUk%3D--85fa64d67ef738f70e08a44ddd6cb2c88cc319fa
New dvd

Title
[                              ]

Production year
[                              ]

Duration
[                              ]

Plot
[                                        ]
[                                        ]
[                                        ]
[                                        ]
[                                        ]
[                                        ]
[                                        ]
[                                        ]
[                                        ]
[                                        ]
[                                        ]
[                                        ]
[                                        ]
[                                        ]
[                                        ]
[                                        ]
[                                        ]
[                                        ]
[                                        ]
[                                        ]

Rating
[                              ]

[Create]

Back
</screen></para>

      <para>Und jetzt den Code aus der Datei
      <filename>app/views/dvds/new.html.erb</filename>:<programlisting>&lt;h1&gt;New dvd&lt;/h1&gt;

&lt;% form_for(@dvd) do |f| %&gt;
  &lt;%= f.error_messages %&gt;

  &lt;p&gt;
    &lt;%= f.label :title %&gt;&lt;br /&gt;
    &lt;%= f.text_field :title %&gt;
  &lt;/p&gt;
  &lt;p&gt;
    &lt;%= f.label :production_year %&gt;&lt;br /&gt;
    &lt;%= f.text_field :production_year %&gt;
  &lt;/p&gt;
  &lt;p&gt;
    &lt;%= f.label :duration %&gt;&lt;br /&gt;
    &lt;%= f.text_field :duration %&gt;
  &lt;/p&gt;
  &lt;p&gt;
    &lt;%= f.label :plot %&gt;&lt;br /&gt;
    &lt;%= f.text_area :plot %&gt;
  &lt;/p&gt;
  &lt;p&gt;
    &lt;%= f.label :rating %&gt;&lt;br /&gt;
    &lt;%= f.text_field :rating %&gt;
  &lt;/p&gt;
  &lt;p&gt;
    &lt;%= f.submit 'Create' %&gt;
  &lt;/p&gt;
&lt;% end %&gt;

&lt;%= link_to 'Back', dvds_path %&gt;</programlisting></para>

      <section>
        <title>Form-Helper</title>

        <para>Rails hat eine Reihe von Helpern, die das erstellen von
        Formularen (Forms) erleichtern. Eine Hilfe zu diesen Helpern können
        Sie mit <command>ri ActionView::Helpers::FormHelper</command> abrufen.
        </para>
      </section>

      <section>
        <title>select Form-Options-Helper</title>

        <para>Die Eingabe des Produktionsjahres und der Bewertung (rating) des
        Filmes lässt sich mit einem Select-Feld ein wenig komfortabler
        machen.<footnote>
            <para>Es lässt sich sicherlich darüber streiten, ob es schneller
            ist mit der Maus eine Zahl aus einem Select-Feld auszuwählen oder
            gerade über die Tastatur einzugeben. ;-)</para>
          </footnote></para>

        <para>Die Online-Hilfe zum select-Form-Helper können Sie jederzeit mit
        <command>ri ActionView::Helpers::FormOptionsHelper</command> abrufen.
        Lassen Sie sich bitte nicht durch die vermeintliche Komplexität
        abschrecken. Ich zeige Ihnen schon im nächsten Absatz wie einfach mal
        damit arbeiten kann.</para>

        <para>Wenn wir davon ausgehen, das ein Film frühestens aus dem Jahr
        1880 und spätestens aus dem aktuellen Jahr ist, können wir dies schön
        über einen Range <code>(1880..Date.today.year)</code> definieren.
        Dummerweise benötigen wir für einen select Form-Helper ein Array und
        kein Range. Aber kein echtes Problem: Mit der Methode
        <methodname>collect</methodname> können wir ratz-fatz ein Array
        generieren. Das Stück erb-Code sieht dann so aus:<programlisting>  &lt;p&gt;
    &lt;%= f.label :production_year %&gt;&lt;br /&gt;
    &lt;%= f.select :production_year, ((1880..Date.today.year).collect {|i| i }).reverse %&gt;
  &lt;/p&gt;
</programlisting></para>

        <para>Den gleichen Weg gehen wir bei der Bewertung des Filmes. Da
        geben wir allerdings zusätzlich noch die Möglichkeit keine Eingabe
        (also nil) zu machen:<programlisting>  &lt;p&gt;
    &lt;%= f.label :rating %&gt;&lt;br /&gt;
    &lt;%= f.select :rating, (0..5).collect {|i| i }, {:include_blank =&gt; true} %&gt;
   &lt;/p&gt;
</programlisting></para>
      </section>

      <section>
        <title>Label verändern</title>

        <para>Bei der Länge des Feldes sollten wir noch ein Beispiel angeben.
        Damit der User auch weiß, das er sowohl die Anzahl der Minuten, als
        auch das Format hh:mm eingeben kann. Zusätzlich verkürzen wir das Feld
        auf 10 Zeichen.<programlisting>  &lt;p&gt;
    &lt;%= f.label :duration, 'Duration (e.g. 108 or 1:48)' %&gt;&lt;br /&gt;
    &lt;%= f.text_field :duration, :size =&gt; 10 %&gt;
  &lt;/p&gt;
</programlisting></para>
      </section>

      <section>
        <title>text_area anpassen</title>

        <para>Die Höhe und Breite des text_area Feldes passen wir auch ein
        wenig an:<programlisting>  &lt;p&gt;
    &lt;%= f.label :plot %&gt;&lt;br /&gt;
    &lt;%= f.text_area :plot, :cols =&gt; 30, :rows =&gt; 5 %&gt;
  &lt;/p&gt;
</programlisting></para>
      </section>

      <section>
        <title>Ergebnis</title>

        <para>Der Source-Code von
        <filename>app/views/dvds/new.html.erb</filename> sieht jetzt so
        aus:<programlisting>&lt;h1&gt;New dvd&lt;/h1&gt;

&lt;% form_for(@dvd) do |f| %&gt;
  &lt;%= f.error_messages %&gt;

  &lt;p&gt;
    &lt;%= f.label :title %&gt;&lt;br /&gt;
    &lt;%= f.text_field :title %&gt;
  &lt;/p&gt;
  &lt;p&gt;
    &lt;%= f.label :production_year %&gt;&lt;br /&gt;
    &lt;%= f.select :production_year, ((1880..Date.today.year).collect {|i| i }).reverse %&gt;
  &lt;/p&gt;
  &lt;p&gt;
    &lt;%= f.label :duration, 'Duration (e.g. 108 or 1:48)' %&gt;&lt;br /&gt;
    &lt;%= f.text_field :duration, :size =&gt; 10 %&gt;
  &lt;/p&gt;
  &lt;p&gt;
    &lt;%= f.label :plot %&gt;&lt;br /&gt;
    &lt;%= f.text_area :plot, :cols =&gt; 30, :rows =&gt; 5 %&gt;
  &lt;/p&gt;
  &lt;p&gt;
    &lt;%= f.label :rating %&gt;&lt;br /&gt;
    &lt;%= f.select :rating, (0..5).collect {|i| i }, {:include_blank =&gt; true} %&gt;
   &lt;/p&gt;
  &lt;p&gt;
    &lt;%= f.submit 'Create' %&gt;
  &lt;/p&gt;
&lt;% end %&gt;

&lt;%= link_to 'Back', dvds_path %&gt;
</programlisting></para>

        <para>Und die Webseite ist ein gutes Stück ergonomischer:<screen>Title
[                              ]

Production year
[2010]

Duration (e.g. 108 or 1:48)
[          ]

Plot
[                              ]
[                              ]
[                              ]
[                              ]
[                              ]

Rating
[ ]

[Create]

Back
</screen></para>
      </section>

      <section>
        <title>Controlleranpassung für das Eingabeformat der Filmlänge</title>

        <para>Da wir den User im View die Möglichkeit geben zwei
        unterschiedliche Formate für die Länge eines Filmes einzugeben, müssen
        wir das jetzt im Controller auswerten. Aktuell sieht die
        <methodname>create</methodname> Methode in der Datei
        <filename>app/controllers/dvds_controller.rb</filename> so
        aus:<programlisting>  # POST /dvds
  # POST /dvds.xml
  def create
    @dvd = Dvd.new(params[:dvd])

    respond_to do |format|
      if @dvd.save
        flash[:notice] = 'Dvd was successfully created.'
        format.html { redirect_to(@dvd) }
        format.xml  { render :xml =&gt; @dvd, :status =&gt; :created, :location =&gt; @dvd }
      else
        format.html { render :action =&gt; "new" }
        format.xml  { render :xml =&gt; @dvd.errors, :status =&gt; :unprocessable_entity }
      end
    end
  end
</programlisting></para>

        <para>Wie so oft gibt es jetzt mehrere Möglichkeiten das Problem zu
        lösen. Schauen wir uns erst mal den Weg an, den die Daten in Rails
        vollziehen. Dabei gehen wir von dieser Beispieleingabe aus:<screen>Title
[Star Wars                     ]

Production year
[1977]

Duration (e.g. 108 or 1:48)
[2:01      ]

Plot
[                              ]
[                              ]
[                              ]
[                              ]
[                              ]

Rating
[5]

[Create]

Back
</screen></para>

        <para>Beim klicken auf Create sehen wir folgende Ausgabe im
        Log-File:<programlisting>Processing DvdsController#create (for 127.0.0.1 at 2010-01-04 00:35:45) [POST]
  Parameters: {"authenticity_token"=&gt;"07jynrwx85TSJL5GWKaN/cdFovFj6pUoOHh0js+MF7Y=", "dvd"=&gt;{"title"=&gt;"Star Wars", "production_year"=&gt;"1977", "duration"=&gt;"2:01", "plot"=&gt;"", "rating"=&gt;"5"}, "commit"=&gt;"Create"}
  Dvd Create (0.6ms)   INSERT INTO "dvds" ("title", "production_year", "duration", "plot", "rating", "created_at", "updated_at") VALUES('Star Wars', 1977, 2, '', 5, '2010-01-03 23:35:45', '2010-01-03 23:35:45')
Redirected to http://localhost:3000/dvds/14
Completed in 45ms (DB: 1) | 302 Found [http://localhost/dvds]
</programlisting></para>

        <para>Die Formulardaten werden also über den Hash
        <varname>params[:dvd]</varname> in den Controller übertragen. Dort
        wird in der Methode <methodname>create</methodname> mit der
        ActiveRecord Methode <methodname>new</methodname> ein neuer Datensatz
        anhand dieser Daten angelegt. Die Eingabe im Formular für duration war
        "2:01". Der neue Datensatz wurde mit dem Wert "2" angelegt. Rails hat
        also versucht aus dem String ein Integer zu machen und einfach den
        Rest weggeworfen. Das können wir uns jetzt zu Nutze machen, um zu
        überprüfen, ob die Eingabe im Formular als Integer in Minuten oder im
        hh:mm Format als String war. Im ersten Fall müsste nämlich der Wert im
        Hash <varname>params[:dvd]</varname> identisch sein, mit dem im Objekt
        <varname>@dvd</varname> gespeicherten Wert. Falls nicht, muss es sich
        um eine ganz fehlerhafte oder eine Eingabe im Format hh:mm handeln.
        Beides können wir durch unsere Methode <methodname>hh_mm=</methodname>
        verarbeiten. Hier ist die entsprechend veränderte neue create
        Methode:<programlisting>  # POST /dvds
  # POST /dvds.xml
  def create
    @dvd = Dvd.new(params[:dvd])

    # check if duration was entered as hh:mm or just minutes
    #
    @dvd.hh_mm = params[:dvd][:duration] if @dvd.duration != params[:dvd][:durat
ion]

    respond_to do |format|
      if @dvd.save
        flash[:notice] = 'Dvd was successfully created.'        format.html { redirect_to(@dvd) }
        format.xml  { render :xml =&gt; @dvd, :status =&gt; :created, :location =&gt; @dv
d }
      else
        format.html { render :action =&gt; "new" }
        format.xml  { render :xml =&gt; @dvd.errors, :status =&gt; :unprocessable_entity }
      end
    end
  end
</programlisting></para>

        <para>Und wenn wir im Formular noch einmal die gleichen Daten
        eingeben, bekommen wir im Log die folgenden Daten
        angezeigt:<programlisting>Processing DvdsController#create (for 127.0.0.1 at 2010-01-04 00:38:25) [POST]
  Parameters: {"authenticity_token"=&gt;"07jynrwx85TSJL5GWKaN/cdFovFj6pUoOHh0js+MF7Y=", "dvd"=&gt;{"title"=&gt;"Star Wars", "production_year"=&gt;"1977", "duration"=&gt;"2:01", "plot"=&gt;"", "rating"=&gt;"5"}, "commit"=&gt;"Create"}
  Dvd Create (0.3ms)   INSERT INTO "dvds" ("title", "production_year", "duration", "plot", "rating", "created_at", "updated_at") VALUES('Star Wars', 1977, 121, '', 5, '2010-01-03 23:38:25', '2010-01-03 23:38:25')
Redirected to http://localhost:3000/dvds/15
Completed in 58ms (DB: 0) | 302 Found [http://localhost/dvds]
</programlisting></para>

        <para>Im anschliessend angezeigten <methodname>show</methodname> View
        sehen wir dann auch den korrekten Datensatz:<screen>Dvd was successfully created.

Title: Star Wars

Production year: 1977

Duration: 121

Plot:

Rating: 5

Edit | Back</screen></para>
      </section>
    </section>

    <section>
      <title>Edit View anpassen</title>

      <para>Die Dateien für die vom Scaffolding angelegten edit- und new-Views
      sehen fast identisch aus. Ein Diff der beiden ursprünglichen Dateien
      bestätigt das:<screen>sw@debian:~/dvd-sammlung$ <command>cd app/views/dvds/</command>
sw@debian:~/dvd-sammlung/app/views/dvds$ <command>diff edit.html.erb new.html.erb</command> 
1c1
&lt; &lt;h1&gt;Editing dvd&lt;/h1&gt;
---
&gt; &lt;h1&gt;New dvd&lt;/h1&gt;
27c27
&lt;     &lt;%= f.submit 'Update' %&gt;
---
&gt;     &lt;%= f.submit 'Create' %&gt;
31d30
&lt; &lt;%= link_to 'Show', @dvd %&gt; |
sw@debian:~/test/app/views/dvds$</screen></para>

      <para>Wir copy-and-paste-n jetzt erst mal die in erstellten Teile und
      passen sie an edit an. Später machen wir uns dann Gedanken darüber wie
      wir doppelte Programmteile vermeiden.</para>
    </section>
  </section>
</chapter>
