<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xml:id="activerecord_migration"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title xml:id="activerecord_migration.title">Migrations
  (Migrationen)</title>

  <indexterm>
    <primary>ActiveRecord</primary>

    <secondary>Migrations</secondary>
  </indexterm>

  <indexterm>
    <primary>Migrations</primary>

    <see>ActiveRecord, Migrations</see>
  </indexterm>

  <para>SQL-Datenbank-Tabellen werden in Rails mit <foreignphrase
  xml:lang="en">Migrations</foreignphrase> generiert, und sie können ebenso
  mit <foreignphrase xml:lang="en">Migrations</foreignphrase> verändert
  werden. Wenn Sie mit <command>rails generate model</command> ein
  <foreignphrase xml:lang="en">Model</foreignphrase> anlegen, dann wird
  automatisch im Verzeichnis <filename>db/migrate/</filename> eine
  entsprechende <foreignphrase xml:lang="en">Migration</foreignphrase>-Datei
  angelegt. Ich zeige Ihnen das Prinzip an einer Shop-Applikation. Legen wir
  die mal an:<screen>MacBook:~ xyz$ <command>rails new shop</command>
[...]
MacBook:~ xyz$ <command>cd shop</command>
MacBook:shop xyz$</screen></para>

  <para>Legen wir ein <classname>Product</classname> Model an:<screen>MacBook:shop xyz$ <command>rails generate model product name 'price:decimal{7,2}' weight:integer in_stock:boolean expiration_date:date</command>
      invoke  active_record
      create    db/migrate/20120508160146_create_products.rb
      create    app/models/product.rb
      invoke    test_unit
      create      test/unit/product_test.rb
      create      test/fixtures/products.yml
MacBook:shop xyz$</screen></para>

  <para>Es wurde die Migrations-Datei
  <filename>db/migrate/20120508160146_create_products.rb</filename> angelegt.
  Schauen wir uns die mal genauer an:<programlisting>class CreateProducts &lt; ActiveRecord::Migration
  def change
    create_table :products do |t|
      t.string :name
      t.decimal :price, :precision =&gt; 7, :scale =&gt; 2
      t.integer :weight
      t.boolean :in_stock
      t.date :expiration_date

      t.timestamps
    end
  end
end</programlisting></para>

  <para>Die Klassenmethode <methodname>change</methodname> erstellt und löscht
  bei einem Rollback die Datenbank-Tabelle. Die Migrationsdateien haben im
  Dateinamen die aktuelle Uhrzeit eingebettet und werden bei einer Migration
  (also dem Aufruf von <command>rake db:migrate</command>) in der
  chronologischen Reihenfolge abgearbeitet.<screen>MacBook:shop xyz$ <command>rake db:migrate</command>
==  CreateProducts: migrating =================================================
-- create_table(:products)
   -&gt; 0.0017s
==  CreateProducts: migrated (0.0018s) ========================================

MacBook:shop xyz$</screen></para>

  <para>Dabei werden immer nur die Migrations abgearbeitet, die noch nicht
  ausgeführt wurden. Wenn wir jetzt noch einmal <command>rake
  db:migrate</command> aufrufen, passiert nichts, da die entsprechende
  Migration ja schon ausgeführt wurde:<screen>MacBook:shop xyz$ <command>rake db:migrate</command>
MacBook:shop xyz$</screen></para>

  <para>Wenn wir aber die Datenbank mit <command>rm</command> manuell löschen
  und danach wieder <command>rake db:migrate</command> aufrufen, wird die
  Migration wiederholt:<screen>MacBook:shop xyz$ <command>rm db/development.sqlite3</command> 
MacBook:shop xyz$ <command>rake db:migrate</command>
==  CreateProducts: migrating =================================================
-- create_table(:products)
   -&gt; 0.0017s
==  CreateProducts: migrated (0.0018s) ========================================

MacBook:shop xyz$ </screen></para>

  <para>Nach einiger Zeit merken wir, dass wir bei vielen Produkten nicht nur
  das Gewicht (height), sondern auch die Höhe (height) abspeichern möchten.
  Wir benötigen also ein weiteres Datenbankfeld . Dafür gibt es eine leicht zu
  merkende Syntax <command>rails generate migration add_*</command>:<screen>MacBook:shop xyz$ <command>rails generate migration add_height_to_product height:integer</command>
      invoke  active_record
      create    db/migrate/20120508160821_add_height_to_product.rb
MacBook:shop xyz$ </screen></para>

  <para>In der Migrationsdatei
  <filename>db/migrate/20120508160821_add_height_to_product.rb</filename>
  findet sich wieder eine change Methode:<programlisting>class AddHeightToProduct &lt; ActiveRecord::Migration
  def change
    add_column :products, :height, :integer
  end
end</programlisting></para>

  <para>Mit <command>rake db:migrate</command> können wir die neue Migration
  einspielen:<screen>MacBook:shop xyz$ <command>rake db:migrate</command>
==  AddHeightToProduct: migrating =============================================
-- add_column(:products, :height, :integer)
   -&gt; 0.0049s
==  AddHeightToProduct: migrated (0.0050s) ====================================

MacBook:shop xyz$</screen></para>

  <para>In der <foreignphrase xml:lang="en">Console</foreignphrase> können wir
  uns das neue Feld anschauen. Es wurde nach dem Feld
  <literal>updated_at</literal> angefügt:<screen>MacBook:shop xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.3)
1.9.3p194 :001 &gt; <command>Product</command>
 =&gt; Product(id: integer, name: string, price: decimal, weight: integer, in_stock: boolean, expiration_date: date, created_at: datetime, updated_at: datetime, height: integer) 
1.9.3p194 :002 &gt; <command>exit</command>
MacBook:shop xyz$ </screen></para>

  <warning>
    <para>Bitte beachten Sie, das Sie wahrscheinlich in
    <filename>app/models/product.rb</filename> das neue Feld in
    <methodname>attr_accessible</methodname> eintragen müssen. Sonst haben Sie
    keinen Zugriff auf das <varname>height</varname> Attribute.</para>
  </warning>

  <para>Was wäre im Fall, dass man noch einmal den vorherigen Stand der Dinge
  betrachten möchten? Kein Problem. Auf die vorherige Version können wir mit
  <command>rake db:rollback</command> leicht zurückgehen:<screen>MacBook:shop xyz$ <command>rake db:rollback</command>
==  AddHeightToProduct: reverting =============================================
-- remove_column("products", :height)
   -&gt; 0.0357s
==  AddHeightToProduct: reverted (0.0358s) ====================================

MacBook:shop xyz$</screen></para>

  <para>Jede Migration hat eine eigene Versionsnummer. Die Versionsnummer des
  aktuellen Status können Sie mit <command>rake db:version</command>
  rausfinden:<screen>MacBook:shop xyz$ <command>rake db:version</command>
Current version: 20120508160146
MacBook:shop xyz$ </screen></para>

  <important>
    <para>Bitte beachten Sie, dass alle Versionsnummern und Zeitstempel nur
    für das hier abgedruckte Beispiel gelten. Wenn sie das Beispiel
    nacharbeiten, bekommen Sie natürlich einen für Sie aktuellen
    Zeitstempel.</para>
  </important>

  <para>Sie finden die entsprechende Version im Verzeichnis
  <filename>db/migrate</filename> wieder:<screen>MacBook:shop xyz$ <command>ls db/migrate</command> 
20120508160146_create_products.rb
20120508160821_add_height_to_product.rb
MacBook:shop xyz$</screen></para>

  <para>Auf eine bestimmte Migration können Sie mit <command>rake db:migrate
  VERSION=Versionsnummer</command> gehen. Die Null steht dabei für die nullte
  Version (also den Start). Probieren wir das mal aus:<screen>MacBook:shop xyz$ <command>rake db:migrate VERSION=0</command>
==  CreateProducts: reverting =================================================
-- drop_table("products")
   -&gt; 0.0007s
==  CreateProducts: reverted (0.0007s) ========================================

MacBook:shop xyz$ </screen></para>

  <para>Die Tabelle wurde mit allen Daten gelöscht. Wir sind wieder zurück auf
  Los.</para>

  <section xml:id="activerecord_welche_datenbank">
    <title>Welche Datenbank wird benutzt?</title>

    <para>Die Datenbank-Tabelle wird durch die Migration angelegt. Dabei sehen
    wir, dass Tabellen-Namen automatisch den Plural der <foreignphrase
    xml:lang="en">Model</foreignphrase>s bekommen
    (<classname>Person</classname> vs. <literal>people</literal>). Aber in
    welcher Datenbank werden die Tabellen überhaupt angelegt? Das wird in der
    Konfigurationsdatei <filename>config/database.yml</filename>
    definiert:<programlisting># SQLite version 3.x
#   gem install sqlite3
#
#   Ensure the SQLite 3 gem is defined in your Gemfile
#   gem 'sqlite3'
development:
  adapter: sqlite3
  database: db/development.sqlite3
  pool: 5
  timeout: 5000

# Warning: The database defined as "test" will be erased and
# re-generated from your development database when you run "rake".
# Do not set this db to the same as development or production.
test:
  adapter: sqlite3
  database: db/test.sqlite3
  pool: 5
  timeout: 5000

production:
  adapter: sqlite3
  database: db/production.sqlite3
  pool: 5
  timeout: 5000
</programlisting></para>

    <para>Dort werden im YAML-Format (siehe <uri
    xlink:href="http://www.yaml.org/">http://www.yaml.org/</uri> bzw. <uri
    xlink:href="http://de.wikipedia.org/wiki/YAML">http://de.wikipedia.org/wiki/YAML</uri>)
    drei verschiedene Datenbanken definiert. Für uns wichtig ist erst mal nur
    die <literal>development</literal>-Datenbank (erster Eintrag). Per default
    benutzt Rails dort <application>SQLite3</application>. SQLite3 mag nicht
    die richtige Wahl für die Analyse der weltweit gesammelten Wetterdaten
    sein, aber für die schnelle und unkomplizierte Entwicklung von
    Rails-Anwendungen lernt man sie schnell zu schätzen. In der
    Produktions-Umgebung kann man später immer noch auf <quote>große</quote>
    Datenbanken wie MySQL oder PostgreSQL umsteigen.<footnote>
        <para>Einige Entwickler sind der Ansicht, dass man auf jeden Fall
        immer mit der gleichen Datenbank entwicklen soll, die man später auch
        in der Produktion und im <foreignphrase
        xml:lang="en">Testing</foreignphrase> benutzt. Andere sagen, dass
        diese bei der Verwendung von ORM-Abstraktions-Layern nicht notwendig
        sei. Bitte entscheiden Sie hier selber. Ich programmiere eine
        Rails-Applikation oft mit SQLite und verwende in der Produktion oft
        MySQL.</para>
      </footnote></para>

    <para>Um Ihre sicherlich vorhandene Neugierde zu befriedigen, schauen wir
    uns kurz noch die Datenbank mit dem Command-Line-Tool
    <literal>sqlite3</literal> an:<screen>MacBook:shop xyz$ sqlite3 <command>db/development.sqlite3</command> 
SQLite version 3.7.7 2011-06-25 16:35:41
Enter ".help" for instructions
Enter SQL statements terminated with a ";"
sqlite&gt; <command>.tables</command>
schema_migrations
sqlite&gt; <command>.quit</command>
MacBook:shop xyz$  </screen></para>

    <para>Nichts drin. Klar, wir haben ja auch nicht die Migration laufen
    lassen:<screen>MacBook:shop xyz$ <command>rake db:migrate</command>  
==  CreateProducts: migrating =================================================
-- create_table(:products)
   -&gt; 0.0273s
==  CreateProducts: migrated (0.0274s) ========================================

==  AddHeightToProduct: migrating =============================================
-- add_column(:products, :height, :integer)
   -&gt; 0.0009s
==  AddHeightToProduct: migrated (0.0010s) ====================================

MacBook:shop xyz$ <command>sqlite3 db/development.sqlite3</command> 
SQLite version 3.7.7 2011-06-25 16:35:41
Enter ".help" for instructions
Enter SQL statements terminated with a ";"
sqlite&gt; <command>.tables</command>
products           schema_migrations
sqlite&gt; <command>.schema products</command>
CREATE TABLE "products" ("id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar(255), "price" decimal(7,2), "weight" integer, "in_stock" boolean, "expiration_date" date, "created_at" datetime NOT NULL, "updated_at" datetime NOT NULL, "height" integer);
sqlite&gt; <command>.quit</command>
MacBook:shop xyz$ </screen></para>

    <para>Die Tabelle <literal>schema_migrations</literal> wird zur
    Versionierung der Migrationen benutzt wird. Bei der ersten von Rails
    durchgeführten Migration wird diese Tabelle angelegt, falls sie noch nicht
    vorhanden ist.</para>
  </section>

  <section xml:id="ar_migration_index">
    <title xml:id="ar_migration_index.title">Index anlegen</title>

    <para>Ich gehe davon aus, dass Sie wissen was ein Index in einer Datenbank
    ist. Falls nicht finden Sie auf <uri
    xlink:href="http://de.wikipedia.org/wiki/Datenbankindex">http://de.wikipedia.org/wiki/Datenbankindex</uri>
    eine kurze Einführung. Kurzversion: Damit werden Suchen für eine bestimmte
    Tabellen-Spalte schneller.</para>

    <para>In unserer Produktdatenbank sollten wir das Feld
    <literal>name</literal> in der Tabelle <literal>products</literal>
    indizieren. Dafür erstellen wir eine neue Migration:<screen>MacBook:shop xyz$ <command>rails generate migration create_index</command>
      invoke  active_record
      create    db/migrate/20120508162243_create_index.rb
MacBook:shop xyz$</screen></para>

    <para>In der Datei
    <filename>db/migrate/20101201224922_create_index.rb</filename> legen wir
    mit <methodname>add_index</methodname> in der Methode
    <methodname>self.up</methodname> den Index an, und in der Methode
    <methodname>self.down</methodname> löschen wir ihn mit
    <methodname>remove_index</methodname> wieder:<programlisting>class CreateIndex &lt; ActiveRecord::Migration
  def up
    add_index :products, :name
  end

  def down
    remove_index :products, :name
  end
end</programlisting></para>

    <para>Mit <command>rake db:migrate</command> wird der Index
    angelegt:<screen>MacBook:shop xyz$ <command>rake db:migrate</command>
==  CreateIndex: migrating ====================================================
-- add_index(:products, :name)
   -&gt; 0.0009s
==  CreateIndex: migrated (0.0009s) ===========================================

MacBook:shop xyz$  </screen></para>

    <tip>
      <para>Einen Index können Sie auch direkt beim Generieren des Models mit
      anlegen. In unserem Fall (einem Index beim Attribute <code>name</code>)
      sähe der Befehl so aus:<screen>MacBook:shop xyz$ <command>rails generate model product name:string:index 'price:decimal{7,2}' weight:integer in_stock:boolean expiration_date:date</command>
      invoke  active_record
      create    db/migrate/20120508160146_create_products.rb
      create    app/models/product.rb
      invoke    test_unit
      create      test/unit/product_test.rb
      create      test/fixtures/products.yml
MacBook:shop xyz$</screen></para>
    </tip>
  </section>

  <section>
    <title>Sonstiges</title>

    <para>In diesem Anfängerbuch kann ich das Thema Migrations nicht sehr tief
    behandeln. Es geht um das prinzipielle Verständnis der Mechanik. Es gibt
    aber ein paar Details die so wichtig sind, dass ich sie hier besprechen
    möchte.</para>

    <section xml:id="active-record-auto-felder">
      <title>Automatisch zugefügte Felder (id, created_at und
      updated_at)</title>

      <para>Rails ist so freundlich uns bei der Default-Migration automatisch
      folgende Felder hinzuzufügen:<itemizedlist>
          <listitem>
            <para><literal>id:integer</literal></para>

            <para>Das ist die Unique-ID des Datensatzes. Das Feld wird von der
            Datenbank automatisch hochgezählt. Für alle SQL-Fans: <literal>NOT
            NULL AUTO_INCREMENT</literal></para>
          </listitem>

          <listitem>
            <para><literal>created_at:datetime</literal></para>

            <para>Das Feld wird von ActiveRecord automatisch beim Erstellen
            eines Datensatzes gefüllt.</para>
          </listitem>

          <listitem>
            <para><literal>updated_at:datetime</literal></para>

            <para>Das Feld wird bei jeder Veränderung des Datensatzes
            automatisch an die aktuelle Zeit angepasst.</para>
          </listitem>
        </itemizedlist></para>

      <para>Man muss diese Felder also nicht beim Generieren des Models selber
      eintragen.</para>

      <para>Am Anfang fragt man sich: <quote>Muss das sein? Macht das wirklich
      Sinn?</quote>. Aber mit der Zeit lernt man diese automatischen Felder zu
      schätzen. Sie wegzulassen ist meist am falschen Ende gespart.</para>
    </section>
  </section>

  <section>
    <title>Weitere Dokumentation</title>

    <para>Folgende Webseiten geben Ihnen sehr gute weitere Informationen zum
    Thema Migration:<itemizedlist>
        <listitem>
          <para><uri
          xlink:href="http://api.rubyonrails.org/classes/ActiveRecord/Migration.html">http://api.rubyonrails.org/classes/ActiveRecord/Migration.html</uri></para>
        </listitem>

        <listitem>
          <para><uri
          xlink:href="http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/TableDefinition.html">http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/TableDefinition.html</uri></para>
        </listitem>

        <listitem>
          <para><uri
          xlink:href="http://railscasts.com/episodes/107-migrations-in-rails-2-1">http://railscasts.com/episodes/107-migrations-in-rails-2-1</uri></para>

          <para>Dieser Screencast ist etwas veraltet (Rails-Version 2.1), aber
          immer noch gut, um die Basics zu verstehen.</para>
        </listitem>

        <listitem>
          <para><uri
          xlink:href="http://www.dizzy.co.uk/ruby_on_rails/cheatsheets/rails-migrations">http://www.dizzy.co.uk/ruby_on_rails/cheatsheets/rails-migrations</uri></para>
        </listitem>
      </itemizedlist></para>
  </section>
</section>
