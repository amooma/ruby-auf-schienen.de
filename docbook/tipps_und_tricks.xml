<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="tipps_und_tricks"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title xml:id="tipps_und_tricks.title">Tipps und Tricks</title>

  <section xml:id="abkuerzungen">
    <title xml:id="abkuerzungen.title">Abkürzungen</title>

    <indexterm>
      <primary>Abkürzungen</primary>
    </indexterm>

    <para>Es gibt eine handvoll Abkürzungen, die einem das Leben bei der
    Entwicklung stark vereinfachen. Im Rest des Buches habe ich diese Befehle
    immer ausgeschrieben, um dem Anfänger den Einstieg zu erleichtern, aber in
    der Praxis übernimmt man schnell die Abkürzungen.</para>

    <itemizedlist>
      <listitem>
        <para><command>rails console</command></para>

        <para>Kurzschreibweise: <command>rails c</command></para>
      </listitem>

      <listitem>
        <para><command>rails server</command></para>

        <para>Kurzschreibweise: <command>rails s</command></para>
      </listitem>

      <listitem>
        <para><command>rails generate scaffold</command></para>

        <para>Kurzschreibweise: <command>rails g scaffold</command></para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="templates">
    <title xml:id="templates.title">Templates</title>

    <indexterm>
      <primary>Templates</primary>
    </indexterm>

    <para>Wenn Sie eine Zeit lang mit Rails gearbeitet haben, werden Sie nach
    jedem Aufruf von <command>rails generate scaffold</command> oder
    <command>rails generate model</command> immer gleiche Änderungen machen.
    Sie werden das Scaffold an Ihre Bedürfnisse anpassen. Glücklicherweise
    können Sie die von Rails benutzten Templates für die Erstellung der
    Controller oder Model Dateien durch eigene Templates ersetzen. Damit lässt
    sich sehr viel Zeit einsparen.</para>

    <para>Ich zeige Ihnen anhand des Controller und des Model Template wie die
    prinzipielle Vorgehensweise ist.</para>

    <tip>
      <para>15 Minuten Optimierung eines Templates an Ihre Bedürfnisse spart
      Ihnen bei jedem Rails-Projekt später Stunden an Arbeitszeit!</para>
    </tip>

    <section xml:id="scaffold_controller_template">
      <title xml:id="scaffold_controller_template.title">Scaffold Controller
      Template</title>

      <para>Nehmen wir einmal an, Sie möchten ein Scaffold User
      anlegen:<screen>Stefan-Wintermeyers-MacBook-Air:webshop xyz$ <command>rails generate scaffold User first_name last_name login</command>
      [...]
      invoke  scaffold_controller
      create    app/controllers/users_controller.rb
      [...]
Stefan-Wintermeyers-MacBook-Air:webshop xyz$</screen></para>

      <para>Der per Default generierte Controller
      <filename>app/controllers/users_controller.rb</filename> sieht dann in
      Rails 3.2 so aus:<programlisting>class UsersController &lt; ApplicationController
  # GET /users
  # GET /users.json
  def index
    @users = User.all

    respond_to do |format|
      format.html # index.html.erb
      format.json { render json: @users }
    end
  end

  # GET /users/1
  # GET /users/1.json
  def show
    @user = User.find(params[:id])

    respond_to do |format|
      format.html # show.html.erb
      format.json { render json: @user }
    end
  end

  # GET /users/new
  # GET /users/new.json
  def new
    @user = User.new

    respond_to do |format|
      format.html # new.html.erb
      format.json { render json: @user }
    end
  end

  # GET /users/1/edit
  def edit
    @user = User.find(params[:id])
  end

  # POST /users
  # POST /users.json
  def create
    @user = User.new(params[:user])

    respond_to do |format|
      if @user.save
        format.html { redirect_to @user, notice: 'User was successfully created.' }
        format.json { render json: @user, status: :created, location: @user }
      else
        format.html { render action: "new" }
        format.json { render json: @user.errors, status: :unprocessable_entity }
      end
    end
  end

  # PUT /users/1
  # PUT /users/1.json
  def update
    @user = User.find(params[:id])

    respond_to do |format|
      if @user.update_attributes(params[:user])
        format.html { redirect_to @user, notice: 'User was successfully updated.' }
        format.json { head :no_content }
      else
        format.html { render action: "edit" }
        format.json { render json: @user.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /users/1
  # DELETE /users/1.json
  def destroy
    @user = User.find(params[:id])
    @user.destroy

    respond_to do |format|
      format.html { redirect_to users_url }
      format.json { head :no_content }
    end
  end
end
</programlisting></para>

      <para>Wenn wir aber nur HTML und gar kein JSON benötigen, dann könnte
      diese Datei auch so aussehen:<programlisting>class UsersController &lt; ApplicationController
  def index
    @users = User.all
  end

  def show
    @user = User.find(params[:id])
  end

  def new
    @user = User.new
  end

  def edit
    @user = User.find(params[:id])
  end

  def create
    @user = User.new(params[:user])

    if @user.save
      redirect_to @user, notice: 'User was successfully created.'
    else
      render action: "new"
    end
  end

  def update
    @user = User.find(params[:id])

    if @user.update_attributes(params[:user])
      redirect_to @user, notice: 'User was successfully updated.'
    else
      render action: "edit"
    end
  end

  def destroy
    @user = User.find(params[:id])
    @user.destroy

    redirect_to users_url
  end
end
</programlisting></para>

      <para>Das original Template, welches von <command>rails generate
      scaffold</command> zum Generieren des Controllers benutzt wird, finden
      Sie im Rails Github Repository unter <uri
      xlink:href="https://github.com/rails/rails/blob/3-2-stable/railties/lib/rails/generators/rails/scaffold_controller/templates/controller.rb">https://github.com/rails/rails/blob/3-2-stable/railties/lib/rails/generators/rails/scaffold_controller/templates/controller.rb</uri></para>

      <para>Es ist eine normale ERB Datei, die Sie downloaden und dann als
      neue Datei
      <filename>lib/templates/rails/scaffold_controller/controller.rb</filename>
      (die entsprechenden Verzeichnisse müssen Sie evt. von Hand anlegen)
      abspeichern können. Um das obige Wunschergebnis zu bekommen, müssen Sie
      das Template wie folgt abändern:<programlisting>&lt;% if namespaced? -%&gt;
require_dependency "&lt;%= namespaced_file_path %&gt;/application_controller"

&lt;% end -%&gt;
&lt;% module_namespacing do -%&gt;
class &lt;%= controller_class_name %&gt;Controller &lt; ApplicationController
  def index
    @&lt;%= plural_table_name %&gt; = &lt;%= orm_class.all(class_name) %&gt;
  end

  def show
    @&lt;%= singular_table_name %&gt; = &lt;%= orm_class.find(class_name, "params[:id]") %&gt;
  end

  def new
    @&lt;%= singular_table_name %&gt; = &lt;%= orm_class.build(class_name) %&gt;
  end

  def edit
    @&lt;%= singular_table_name %&gt; = &lt;%= orm_class.find(class_name, "params[:id]") %&gt;
  end

  def create
    @&lt;%= singular_table_name %&gt; = &lt;%= orm_class.build(class_name, "params[:#{singular_table_name}]") %&gt;

    if @&lt;%= orm_instance.save %&gt;
      redirect_to @&lt;%= singular_table_name %&gt;, &lt;%= key_value :notice, "'#{human_name} was successfully created.'" %&gt;
    else
      render &lt;%= key_value :action, '"new"' %&gt;
    end
  end

  def update
    @&lt;%= singular_table_name %&gt; = &lt;%= orm_class.find(class_name, "params[:id]") %&gt;

    if @&lt;%= orm_instance.update_attributes("params[:#{singular_table_name}]") %&gt;
      redirect_to @&lt;%= singular_table_name %&gt;, &lt;%= key_value :notice, "'#{human_name} was successfully updated.'" %&gt;
    else
      render &lt;%= key_value :action, '"edit"' %&gt;
    end
  end

  def destroy
    @&lt;%= singular_table_name %&gt; = &lt;%= orm_class.find(class_name, "params[:id]") %&gt;
    @&lt;%= orm_instance.destroy %&gt;

    redirect_to &lt;%= index_helper %&gt;_url
  end
end
&lt;% end -%&gt;
</programlisting></para>

      <para>Jetzt bekommen Sie bei jeder Benutzung von <command>rails generate
      scaffold</command> den Controller in der von Ihnen gewünschten
      Variante.</para>
    </section>

    <section>
      <title>Model Template</title>

      <para>Der Grundgedanke ist der gleiche wie beim Controller in <xref
      linkend="scaffold_controller_template"/>: Es gilt das vom Rails
      Generator angelegte Model an die eigenen Bedürfnisse anzupassen. Das von
      <command>rails generate model</command> und damit auch von
      <command>rails generate scaffold</command> benutzte Model Template
      finden Sie im Rails Github Repository unter <uri
      xlink:href="https://github.com/rails/rails/blob/3-2-stable/activerecord/lib/rails/generators/active_record/model/templates/model.rb">https://github.com/rails/rails/blob/3-2-stable/activerecord/lib/rails/generators/active_record/model/templates/model.rb</uri></para>

      <para>Speichern Sie diese Datei in Ihrem Rails-Projekt unter
      <filename>lib/templates/active_record/model/model.rb</filename> ab. Wenn
      Sie die Methode <methodname>to_s</methodname> per Default verändern
      möchten, so könnte Ihre <filename>model.rb</filename> z.B. so
      aussehen:<programlisting>&lt;% module_namespacing do -%&gt;
class &lt;%= class_name %&gt; &lt; &lt;%= parent_class_name.classify %&gt;
&lt;% attributes.select {|attr| attr.reference? }.each do |attribute| -%&gt;
  belongs_to :&lt;%= attribute.name %&gt;&lt;%= ', polymorphic: true' if attribute.polymorphic? %&gt;
&lt;% end -%&gt;
&lt;% if !accessible_attributes.empty? -%&gt;
  attr_accessible &lt;%= accessible_attributes.map {|a| ":#{a.name}" }.sort.join(', ') %&gt;
&lt;% else -%&gt;
  # attr_accessible :title, :body
&lt;% end -%&gt;

  def to_s
    &lt;%- if attributes.map{ |a| a.name }.include?('name') -%&gt;
    name
    &lt;%- else -%&gt;
    "&lt;%= class_name %&gt; #{id}"
    &lt;%- end -%&gt;
  end

end
&lt;% end -%&gt;</programlisting></para>

      <para>Wenn Sie jetzt ein neues Model mit <command>rails generate model
      Book name number_of_pages:integer</command> anlegen, so wird die Datei
      <filename>app/models/book.rb</filename> so aussehen:<programlisting>class Book &lt; ActiveRecord::Base
  attr_accessible :name, :number_of_pages

  def to_s
    name
  end

end</programlisting></para>
    </section>
  </section>
</chapter>
