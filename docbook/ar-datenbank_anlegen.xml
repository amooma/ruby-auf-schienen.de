<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xml:id="activerecord_datenbank_anlegen"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title
  xml:id="activerecord_datenbank_anlegen.title">Datenbank/<quote>Model</quote>
  anlegen</title>

  <indexterm>
    <primary>Datenbank</primary>
  </indexterm>

  <indexterm>
    <primary>Model</primary>
  </indexterm>

  <note>
    <indexterm>
      <primary>Model–View–Controller</primary>

      <see>MVC</see>
    </indexterm>

    <indexterm>
      <primary>MVC</primary>
    </indexterm>

    <para><foreignphrase xml:lang="en">Model</foreignphrase> bezieht sich hier
    auf das Daten-Modell aus <foreignphrase
    xml:lang="en">Model-View-Controller</foreignphrase>
    (<acronym>MVC</acronym>).</para>
  </note>

  <para>Als erstes Beispiel nehmen wir eine Liste mit europäischen Ländern in
  Europa. Zuerst legen wir ein neues Rails-Projekt an:<screen>MacBook:~ xyz$ <command>rails new europe</command>
      create  
      create  README.rdoc
<replaceable>[...]</replaceable>
Using uglifier (1.2.4) 
Your bundle is complete! Use `bundle show [gemname]` to see where a bundled gem is installed.
MacBook:~ xyz$ <command>cd europe</command> 
MacBook:europe xyz$</screen></para>

  <para>Nachfolgend schauen wir uns die Hilfeseite von <command>rails generate
  model</command> an:<screen>MacBook:europe xyz$ <command>rails generate model</command>
Usage:
  rails generate model NAME [field[:type][:index] field[:type][:index]] [options]

Options:
      [--skip-namespace]  # Skip namespace (affects only isolated applications)
      [--old-style-hash]  # Force using old style hash (:foo =&gt; 'bar') on Ruby &gt;= 1.9
  -o, --orm=NAME          # Orm to be invoked
                          # Default: active_record

ActiveRecord options:
      [--migration]            # Indicates when to generate migration
                               # Default: true
      [--timestamps]           # Indicates when to generate timestamps
                               # Default: true
      [--parent=PARENT]        # The parent class for the generated model
      [--indexes]              # Add indexes for references and belongs_to columns
                               # Default: true
  -t, [--test-framework=NAME]  # Test framework to be invoked
                               # Default: test_unit

TestUnit options:
      [--fixture]                   # Indicates when to generate fixture
                                    # Default: true
  -r, [--fixture-replacement=NAME]  # Fixture replacement to be invoked

Runtime options:
  -f, [--force]    # Overwrite files that already exist
  -p, [--pretend]  # Run but do not make any changes
  -q, [--quiet]    # Supress status output
  -s, [--skip]     # Skip files that already exist

Description:
    Create rails files for model generator.
MacBook:europe xyz$</screen></para>

  <para>Die Usage-Beschreibung <code>rails generate model NAME
  [field[:type][:index] field[:type][:index]] [options]</code> sagt aus, das
  nach <code>rails generate model</code> der Name des Models und danach die
  Tabellenfelder kommen. Wird nach einem Tabellenfeldnamen kein
  <code>:type</code> gesetzt, so wird per Default von einem String
  ausgegangen. Legen wir einmal das <foreignphrase
  xml:lang="en">Model</foreignphrase> <literal>country</literal> an:<screen>MacBook:europe xyz$ <command>rails generate model country name population:integer</command>
      invoke  active_record
      create    db/migrate/20120426092916_create_countries.rb
      create    app/models/country.rb
      invoke    test_unit
      create      test/unit/country_test.rb
      create      test/fixtures/countries.yml
MacBook:europe xyz$ </screen></para>

  <indexterm>
    <primary>Migrations</primary>
  </indexterm>

  <indexterm>
    <primary>Datenbank</primary>

    <secondary>Migrations</secondary>

    <see>Migrations</see>
  </indexterm>

  <indexterm>
    <primary>ActiveRecord</primary>

    <secondary>Migrations</secondary>

    <see>Migrations</see>
  </indexterm>

  <para>Der Generator hat eine Datenbank-Migrations-Datei namens
  <filename>db/migrate/20120426092916_create_countries.rb</filename> angelegt.
  Eine Migration enthält Datenbankveränderungen. In dieser Migration wird eine
  Klasse <classname>CreateCountries</classname> als Tochter von
  <classname>ActiveRecord::Migration</classname> definiert. Die
  Klassen-Methoden <methodname>change</methodname> wird benutzt, um eine
  Migration und den dazu gehörigen Roll-Back zu definieren.<programlisting>class CreateCountries &lt; ActiveRecord::Migration
  def change
    create_table :countries do |t|
      t.string :name
      t.integer :population

      t.timestamps
    end
  end
end</programlisting></para>

  <para>Mit <command>rake db:migrate</command> können wir die Migrationen
  ausführen, also die entsprechende Datenbank-Tabelle anlegen:<screen>MacBook:europe xyz$ <command>rake db:migrate</command>
==  CreateCountries: migrating ================================================
-- create_table(:countries)
   -&gt; 0.0015s
==  CreateCountries: migrated (0.0016s) =======================================

MacBook:europe xyz$ </screen></para>

  <para>Weitere Details zu Migrationen werden Sie später in <xref
  linkend="activerecord_migration"/> kennenlernen.</para>

  <para>Schauen wir mal in die Datei
  <filename>app/models/country.rb</filename>:<programlisting>class Country &lt; ActiveRecord::Base
  attr_accessible :name, :population
end
</programlisting></para>

  <para>Hmmm … die Klasse <classname>Country</classname> ist also eine Tochter
  von <classname>ActiveRecord::Base</classname>. Logisch, da wir ja in diesem
  Kapitel ActiveRecord besprechen. ;-)</para>

  <para><methodname>attr_accessible</methodname> definiert eine White-List mit
  Model-Attributen, die per sogenanntem Mass-Assignment<footnote>
      <para>Ryan Bates hat zu zum Thema Mass-Assignment und dazu wichtigen
      Sicherheitsaspekten einen sehr guten Screencast unter <uri
      xlink:href="http://railscasts.com/episodes/26-hackers-love-mass-assignment-revised">http://railscasts.com/episodes/26-hackers-love-mass-assignment-revised</uri>
      veröffentlicht.</para>
    </footnote> mit Werten gefüllt werden können. Stark vereinfacht
  beschrieben sind das die Attribute, die wir später per Web-Interface
  befüllen oder verändern können.</para>

  <note>
    <para>Die eingebaute Hilfeseite zu
    <classname>ActiveRecord::Base</classname> ist immer greifbereit, falls Sie
    mal etwas nachschlagen wollen:<screen>stefan@swmbp 0 1.9.2-p0 jukebox$ <command>ri -T ActiveRecord::Base</command></screen></para>
  </note>

  <section>
    <title>Die Attribute id, created_at und updated_at</title>

    <indexterm>
      <primary>id</primary>

      <secondary>ActiveRecord</secondary>
    </indexterm>

    <indexterm>
      <primary>created_at</primary>

      <secondary>ActiveRecord</secondary>
    </indexterm>

    <indexterm>
      <primary>updated_at</primary>

      <secondary>ActiveRecord</secondary>
    </indexterm>

    <para>Auch wenn in der Migration nichts davon steht, bekommen wir per
    Default immer auch die Attribute <methodname>id</methodname>,
    <methodname>created_at</methodname> und
    <methodname>updated_at</methodname> zu jedem ActiveRecord Model. In der
    Console können wir uns die Attribute der Klasse Country durch die Eingabe
    des Klassennames ausgeben lassen:<screen>MacBook:europe xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.3)
1.9.3p194 :001 &gt; <command>Country</command>
 =&gt; Country(id: integer, name: string, population: integer, created_at: datetime, updated_at: datetime) 
1.9.3p194 :002 &gt; <command>exit</command>
MacBook:europe xyz$ </screen></para>

    <para>In <methodname>created_at</methodname> wird immer der Zeitpunkt an
    dem der Datensatz initial angelegt wurde gespeichert.
    <methodname>updated_at</methodname> gibt immer den Zeitpunkt des letzten
    Updates auf diesen Datensatz wieder.</para>

    <para><methodname>id</methodname> wird als zentrale Identifikation des
    Datensatzes benutzt (Primärschlüssel). Die <methodname>id</methodname>
    wird automatisch bei jedem Datensatz um 1 hochgezählt.</para>
  </section>

  <section xml:base="activerecord-types">
    <title xml:id="activerecord-types.title">Mögliche Datentypen in
    ActiveRecord</title>

    <indexterm>
      <primary>Datentypen</primary>

      <secondary>ActiveRecord</secondary>
    </indexterm>

    <para>ActiveRecord ist ein <foreignphrase
    xml:lang="en">Layer</foreignphrase> (Schicht, Ebene) zwischen Ruby und
    verschiedenen relationalen Datenbanken. Leider haben SQL-Datenbanken
    unterschiedliche Sichtweisen auf die Definition von Spalten und deren
    Inhalt. Darüber müssen Sie sich aber keine Sorgen machen, da ActiveRecord
    dieses Problem für Sie transparent löst.<itemizedlist>
        <listitem>
          <para>Vorteil:</para>

          <para>Wir können die Datenbank hinter einer Rails-Applikation
          austauschen, ohne dass dafür der Programmcode angefasst werden
          muss.</para>
        </listitem>

        <listitem>
          <para>Nachteil:</para>

          <para>Wir können nicht alle Besonderheiten der jeweiligen Datenbank
          benutzen. Wir müssen quasi einen kleinsten gemeinsamen Nenner
          verwenden.</para>
        </listitem>
      </itemizedlist></para>

    <para>Um ein <foreignphrase xml:lang="en">Model</foreignphrase> zu
    generieren, können Sie folgende Feldtypen nutzen:<itemizedlist>
        <listitem>
          <indexterm>
            <primary>binary</primary>

            <secondary>ActiveRecord</secondary>
          </indexterm>

          <para><literal>binary</literal></para>

          <para>Das ist im klassischen Sinn ein BLOB (<foreignphrase
          xml:lang="en">Binary Large Object</foreignphrase>). Noch nie gehört?
          Dann werden Sie es wahrscheinlich nicht brauchen.</para>

          <para>Siehe auch <uri
          xlink:href="http://de.wikipedia.org/wiki/Binary_Large_Object">http://de.wikipedia.org/wiki/Binary_Large_Object</uri></para>
        </listitem>

        <listitem>
          <indexterm>
            <primary>boolean</primary>

            <secondary>ActiveRecord</secondary>
          </indexterm>

          <para><literal>boolean</literal></para>

          <para>Ein Bool'scher Wert. Kann <literal>true</literal> (wahr) oder
          <literal>false</literal> (falsch) sein.</para>

          <para>Siehe auch <uri
          xlink:href="http://de.wikipedia.org/wiki/Boolesche_Variable">http://de.wikipedia.org/wiki/Boolesche_Variable</uri></para>
        </listitem>

        <listitem>
          <indexterm>
            <primary>date</primary>

            <secondary>ActiveRecord</secondary>
          </indexterm>

          <para><literal>date</literal></para>

          <para>Hier kann ein Datum abgespeichert werden.</para>
        </listitem>

        <listitem>
          <indexterm>
            <primary>datetime</primary>

            <secondary>ActiveRecord</secondary>
          </indexterm>

          <para><literal>datetime</literal></para>

          <para>Hier kann ein Datum inklusive Uhrzeit abgespeichert
          werden.</para>
        </listitem>

        <listitem>
          <indexterm>
            <primary>float</primary>

            <secondary>ActiveRecord</secondary>
          </indexterm>

          <para><literal>float</literal></para>

          <para>Zum Speichern einer Gleitkommazahl.</para>

          <para>Siehe auch <uri
          xlink:href="http://de.wikipedia.org/wiki/Gleitkommazahl">http://de.wikipedia.org/wiki/Gleitkommazahl</uri></para>
        </listitem>

        <listitem>
          <indexterm>
            <primary>integer</primary>

            <secondary>ActiveRecord</secondary>
          </indexterm>

          <para><literal>integer</literal></para>

          <para>Zum Speichern einer Ganzzahl.</para>

          <para>Siehe auch <uri
          xlink:href="http://de.wikipedia.org/wiki/Integer_(Datentyp)">http://de.wikipedia.org/wiki/Integer_(Datentyp)</uri></para>
        </listitem>

        <listitem>
          <indexterm>
            <primary>decimal</primary>

            <secondary>ActiveRecord</secondary>
          </indexterm>

          <para><literal>decimal</literal></para>

          <para>Zum Speichern einer Dezimalzahl.</para>

          <tip>
            <para>Sie können auch mit dem model Generator direkt ein decimal
            eintragen. Dafür müssen Sie aber die besondere Syntax beachten.
            Beispiel:<screen>MacBook:jukebox xyz$ <command>rails generate model product name 'price:decimal{7,2}'</command>
      invoke  active_record
      create    db/migrate/20120430150913_create_products.rb
      create    app/models/product.rb
      invoke    test_unit
      create      test/unit/product_test.rb
      create      test/fixtures/products.yml
MacBook:jukebox xyz$ <command>cat db/migrate/20120430150913_create_products.rb</command>
class CreateProducts &lt; ActiveRecord::Migration
  def change
    create_table :products do |t|
      t.string :name
      t.decimal :price, :precision =&gt; 7, :scale =&gt; 2

      t.timestamps
    end
  end
end
MacBook:jukebox xyz$</screen></para>
          </tip>
        </listitem>

        <listitem>
          <indexterm>
            <primary>primary_key</primary>

            <secondary>ActiveRecord</secondary>
          </indexterm>

          <para><literal>primary_key</literal></para>

          <para>Das ist ein Integer (Ganzzahl), der von der Datenbank
          automatisch bei jedem neuen Eintrag um 1 hochgezählt wird. Dieser
          Feldtyp wird häufig als Schlüssel für die Verknüpfung von
          verschiedenen Datenbank-Tabellen bzw. <foreignphrase
          xml:lang="en">Models</foreignphrase> genommen.</para>

          <para>Siehe auch <uri
          xlink:href="http://de.wikipedia.org/wiki/Schl%C3%BCssel_%28Datenbank%29">http://de.wikipedia.org/wiki/Schlüssel_(Datenbank)</uri></para>
        </listitem>

        <listitem>
          <indexterm>
            <primary>string</primary>

            <secondary>ActiveRecord</secondary>
          </indexterm>

          <para><literal>string</literal></para>

          <para>Ein String - also eine beliebige Zeichenkette, bis max.
          2<superscript>8</superscript>-1 (= 255) Zeichen.</para>

          <para>Siehe auch <uri
          xlink:href="http://de.wikipedia.org/wiki/Zeichenkette">http://de.wikipedia.org/wiki/Zeichenkette</uri></para>
        </listitem>

        <listitem>
          <indexterm>
            <primary>text</primary>

            <secondary>ActiveRecord</secondary>
          </indexterm>

          <para><literal>text</literal></para>

          <para>Auch ein String - allerdings ein gutes Stück größer. Hier
          können per Default bis zu 2<superscript>16</superscript> (= 65536)
          Zeichen gespeichert werden.</para>
        </listitem>

        <listitem>
          <indexterm>
            <primary>time</primary>

            <secondary>ActiveRecord</secondary>
          </indexterm>

          <para><literal>time</literal></para>

          <para>Eine Uhrzeit.</para>
        </listitem>

        <listitem>
          <indexterm>
            <primary>timestamp</primary>

            <secondary>ActiveRecord</secondary>
          </indexterm>

          <para><literal>timestamp</literal></para>

          <para>Eine Uhrzeit mit Datum, die von der Datenbank automatisch
          befüllt wird.</para>
        </listitem>
      </itemizedlist></para>

    <para>Wir gehen in <xref linkend="activerecord_migration"/> auf die
    einzelnen Datentypen noch näher ein und sprechen über verfügbare Optionen.
    Dies soll im Rahmen eines Einsteigerbuches eine Kurzübersicht sein. Wer
    sich intensiver mit den verschiedenen Datentypen beschäftigen will, sei
    auf <xref linkend="weiterfuehrende_doku"/> verwiesen.</para>
  </section>

  <section xml:id="activerecord_namenskonvention">
    <title xml:id="activerecord_namenskonvention.title">Namenskonventionen
    (Country vs. country vs. countries)</title>

    <indexterm>
      <primary>Inflections</primary>

      <secondary>ActiveRecord</secondary>

      <see>Inflections</see>
    </indexterm>

    <indexterm>
      <primary>Inflections</primary>

      <secondary>ActiveSupport</secondary>
    </indexterm>

    <para>Für den Rails-Anfänger ist es oft schwer zu <quote>erfühlen</quote>,
    wann man z. B. <literal>Country</literal> oder <literal>country</literal>
    benutzt (das eine ist eine Klasse und das andere ein Model). Dabei geht es
    nicht um die Klasse an sich, sondern ausschließlich um die Schreibweise
    oder das Wording. So viel vorweg: Es ist alles logisch und man bekommt den
    Dreh auch recht schnell heraus. Wichtig ist nur, immer bei englischen
    Wörtern zu bleiben (siehe <xref linkend="warum_english"/>).</para>

    <para>An dieser Stelle wollte ich ursprünglich in aller Länge und Breite
    über die Namenskonventionen philosophieren. Dann habe ich mir gedacht:
    <quote>Mein Gott, die Leser wollen schnell weiterkommen und nicht hier
    Ewigkeiten mit Theorie verbringen.</quote> Deshalb stelle ich Ihnen jetzt
    die Methoden vor, mit denen Sie selbst die Schreibweisen in der
    Rails-<foreignphrase xml:lang="en">Console</foreignphrase> herausfinden
    können:<screen>MacBook:europe xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.3)
1.9.3p194 :001 &gt; <command>'country'.classify</command>
 =&gt; "Country" 
1.9.3p194 :002 &gt; <command>'country'.tableize</command>
 =&gt; "countries" 
1.9.3p194 :003 &gt; <command>'country'.foreign_key</command>
 =&gt; "country_id" 
1.9.3p194 :004 &gt; <command>exit</command>
MacBook:europe xyz$ </screen></para>

    <para>ActiveRecord nimmt automatisch den englischen Plural. Bei der Klasse
    <classname>Country</classname> ist dies deshalb
    <methodname>countries</methodname>. Wenn Sie sich bei einem Begriff nicht
    sicher sind, können Sie auch mit der Klasse und der Methode
    <methodname>name</methodname> arbeiten. <screen>MacBook:europe xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.3)
1.9.3p194 :001 &gt; <command>Country.name.tableize</command>
 =&gt; "countries" 
1.9.3p194 :002 &gt; <command>Country.name.foreign_key</command>
 =&gt; "country_id" 
1.9.3p194 :003 &gt; <command>exit</command>
MacBook:europe xyz$ </screen></para>

    <para>Auf <uri
    xlink:href="http://rails.rubyonrails.org/classes/ActiveSupport/CoreExtensions/String/Inflections.html"
    xml:lang="en">http://rails.rubyonrails.org/classes/ActiveSupport/CoreExtensions/String/Inflections.html</uri>
    finden Sie eine komplette Liste der entsprechenden Methoden. Ich empfehle
    Ihnen aber jetzt erst mal, sich in der Strömung treiben zu lassen. Falls
    Sie einmal nicht sicher sind, können Sie mit den eben gezeigten Methoden
    die richtige Schreibweise herausfinden.</para>
  </section>

  <section>
    <title>Datenbank-Konfiguration</title>

    <indexterm>
      <primary>database.yml</primary>
    </indexterm>

    <para>Welche Datenbank wird per Default benutzt? Schauen wir kurz in die
    Konfigurationsdatei für die Datenbank
    (<filename>config/database.yml</filename>):<programlisting># SQLite version 3.x
#   gem install sqlite3
#
#   Ensure the SQLite 3 gem is defined in your Gemfile
#   gem 'sqlite3'
development:
  adapter: sqlite3
  database: db/development.sqlite3
  pool: 5
  timeout: 5000

# Warning: The database defined as "test" will be erased and
# re-generated from your development database when you run "rake".
# Do not set this db to the same as development or production.
test:
  adapter: sqlite3
  database: db/test.sqlite3
  pool: 5
  timeout: 5000

production:
  adapter: sqlite3
  database: db/production.sqlite3
  pool: 5
  timeout: 5000</programlisting></para>

    <para>Da wir im <literal>development</literal>-Modus arbeiten, hat Rails
    beim <command>rake db:migrate</command> eine neue SQLite3-Datenbank
    <filename>db/development.sqlite3</filename> angelegt und dort alle Daten
    gespeichert.</para>

    <note>
      <para>Fans von dem Kommandozeilen-Clients können
      <literal>sqlite3</literal> zur Einsicht in diese Datenbank
      benutzen:</para>

      <para><screen>MacBook:europe xyz$ <command>sqlite3 db/development.sqlite3</command> 
SQLite version 3.7.7 2011-06-25 16:35:41
Enter ".help" for instructions
Enter SQL statements terminated with a ";"
sqlite&gt; <command>.tables</command>
countries          schema_migrations
sqlite&gt; <command>.schema countries</command>
CREATE TABLE "countries" ("id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar(255), "population" integer, "created_at" datetime NOT NULL, "updated_at" datetime NOT NULL);
sqlite&gt; <command>.exit</command>
MacBook:europe xyz$</screen></para>
    </note>
  </section>
</section>
