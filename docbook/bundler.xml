<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="bundler_und_gems"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title xml:id="bundler_und_gems.title">Bundler und Gems</title>

  <section xml:id="gems">
    <title xml:id="gems.title">Gems</title>

    <indexterm>
      <primary>Gems</primary>
    </indexterm>

    <para>In <xref linkend="installation-und-versionsauswahl"/> haben Sie
    bereits gesehen, das man mit dem Befehl <command>gem install rails
    --version '~&gt; 3.2.0'</command> ein aktuelles Rails 3.2 installieren
    kann. Gems bilden in der Ruby-Welt das Paketmanagement. Wenn ein
    Ruby-Entwickler ein bestimmtes Feature oder ein bestimmtes Programm bzw.
    eine Programmsammlung anderen Ruby-Entwicklern zur Verfügung stellen will,
    so kann er daraus ein "Gem" erstellen. Dieses Gem kann dann per
    <command>gem install</command> installiert werden. Wie ein Gem erstellt
    wird und wo es gehostet werden kann, sprengt die Idee dieses
    Einstieg-Kapitels. Wichtig für uns ist, das z.B. Rails an sich auch als
    Gem zur Verfügung steht.</para>
  </section>

  <section xml:id="bundler">
    <title xml:id="bundler.title">Bundler</title>

    <indexterm>
      <primary>Bundler</primary>
    </indexterm>

    <indexterm>
      <primary>bundle</primary>

      <see>Bundler</see>
    </indexterm>

    <para>In einem Rails-Projekt werden immer verschiedene Gems (siehe <xref
    linkend="gems"/>) benutzt und es können vom Entwickler weitere Gems
    hinzugefügt werden. Bundler hilft dem Entwickler dabei diese ganzen Gems
    in der richtigen Version zu installieren und auch notwendige
    Abhängigkeiten zu berücksichtigen. In früheren Rails-Versionen musste man
    als Entwickler nach einem <command>rails new</command> immer ein
    <command>bundle install</command> aufrufen. Das wird mittlerweise aber
    innerhalb von <command>rails new</command> automatisch gemacht. Sie können
    in der Ausgabe sehen, welche Gems von <command>bundle install</command>
    installiert werden:<screen>MacBook:~ xyz$ <command>rails new webshop</command>
[...]
         run  <emphasis>bundle install</emphasis>
Fetching gem metadata from https://rubygems.org/.........
Using rake (0.9.2.2) 
Using i18n (0.6.0) 
Using multi_json (1.3.6) 
Using activesupport (3.2.6) 
Using builder (3.0.0) 
Using activemodel (3.2.6) 
Using erubis (2.7.0) 
Using journey (1.0.4) 
Using rack (1.4.1) 
Using rack-cache (1.2) 
Using rack-test (0.6.1) 
Using hike (1.2.1) 
Using tilt (1.3.3) 
Using sprockets (2.1.3) 
Using actionpack (3.2.6) 
Using mime-types (1.19) 
Using polyglot (0.3.3) 
Using treetop (1.4.10) 
Using mail (2.4.4) 
Using actionmailer (3.2.6) 
Using arel (3.0.2) 
Using tzinfo (0.3.33) 
Using activerecord (3.2.6) 
Using activeresource (3.2.6) 
Using bundler (1.1.3) 
Installing coffee-script-source (1.3.3) 
Installing execjs (1.4.0) 
Installing coffee-script (2.2.0) 
Using rack-ssl (1.3.2) 
Using json (1.7.3) 
Using rdoc (3.12) 
Using thor (0.15.4) 
Using railties (3.2.6) 
Installing coffee-rails (3.2.2) 
Installing jquery-rails (2.0.2) 
Using rails (3.2.6) 
Installing sass (3.1.20) 
Installing sass-rails (3.2.5) 
Installing sqlite3 (1.3.6) with native extensions 
Installing uglifier (1.2.6) 
Your bundle is complete! Use `bundle show [gemname]` to see where a bundled gem is installed.
MacBook:~ xyz$ </screen></para>

    <para>Welche Gems von Bundler installiert werden sollen, steht in der von
    <command>rails new</command> generierten Datei
    <filename>Gemfile</filename>:<programlisting>source 'https://rubygems.org'

gem 'rails', '3.2.6'

# Bundle edge Rails instead:
# gem 'rails', :git =&gt; 'git://github.com/rails/rails.git'

gem 'sqlite3'


# Gems used only for assets and not required
# in production environments by default.
group :assets do
  gem 'sass-rails',   '~&gt; 3.2.3'
  gem 'coffee-rails', '~&gt; 3.2.1'

  # See https://github.com/sstephenson/execjs#readme for more supported runtimes
  # gem 'therubyracer', :platforms =&gt; :ruby

  gem 'uglifier', '&gt;= 1.0.3'
end

gem 'jquery-rails'

# To use ActiveModel has_secure_password
# gem 'bcrypt-ruby', '~&gt; 3.0.0'

# To use Jbuilder templates for JSON
# gem 'jbuilder'

# Use unicorn as the app server
# gem 'unicorn'

# Deploy with Capistrano
# gem 'capistrano'

# To use debugger
# gem 'debugger'</programlisting></para>

    <para>Das verwendete Format ist leicht erklärt: Auf das Wort
    <code>gem</code> folgt der Name des Gems und danach bei bedarf eine Angabe
    zur Version des Gems.</para>

    <para>So steht die Zeile <code>gem 'rails', '3.2.6'</code> für
    "installiere das Gem mit dem Namen <code>rails</code> in der Version
    3.2.6".</para>

    <para>Mit <code>~&gt;</code> vor der Versionsnummer können Sie bestimmen,
    das die neuestes Version ab dieser Versionsnummer installiert werden soll.
    Dabei wird innerhalb der letzten Ziffer nach oben gezählt. <code>gem
    'rails', '~&gt; 3.2.3'</code> würde entsprechend auch ein Rails 3.2.6,
    aber nicht ein Rails 3.3 installieren (dazu müsste man <code>gem 'rails',
    '~&gt; 3.2'</code> eintragen).</para>

    <important>
      <para>Es gibt die Möglichkeit bestimmte Gems nur in bestimmten
      Umgebungen zu installieren. Dazu müssen die entsprechenden Zeilen in
      eine <code>group :name do</code> Schleife eingschlossen werden.</para>
    </important>

    <para>Ausser der Datei <filename>Gemfile</filename> gibt es noch die Datei
    <filename>Gemfile.lock</filename> und dort werden die genauen Versionen
    der installierten Gems aufgelistet. Im obigen Bespiel sieht das so
    aus:<programlisting>GEM
  remote: https://rubygems.org/
  specs:
    actionmailer (3.2.6)
      actionpack (= 3.2.6)
      mail (~&gt; 2.4.4)
    actionpack (3.2.6)
      activemodel (= 3.2.6)
      activesupport (= 3.2.6)
      builder (~&gt; 3.0.0)
      erubis (~&gt; 2.7.0)
      journey (~&gt; 1.0.1)
      rack (~&gt; 1.4.0)
      rack-cache (~&gt; 1.2)
      rack-test (~&gt; 0.6.1)
      sprockets (~&gt; 2.1.3)
    activemodel (3.2.6)
      activesupport (= 3.2.6)
      builder (~&gt; 3.0.0)
    activerecord (3.2.6)
      activemodel (= 3.2.6)
      activesupport (= 3.2.6)
      arel (~&gt; 3.0.2)
      tzinfo (~&gt; 0.3.29)
    activeresource (3.2.6)
      activemodel (= 3.2.6)
      activesupport (= 3.2.6)
    activesupport (3.2.6)
      i18n (~&gt; 0.6)
      multi_json (~&gt; 1.0)
    arel (3.0.2)
    builder (3.0.0)
    coffee-rails (3.2.2)
      coffee-script (&gt;= 2.2.0)
      railties (~&gt; 3.2.0)
    coffee-script (2.2.0)
      coffee-script-source
      execjs
    coffee-script-source (1.3.3)
    erubis (2.7.0)
    execjs (1.4.0)
      multi_json (~&gt; 1.0)
    hike (1.2.1)
    i18n (0.6.0)
    journey (1.0.4)
    jquery-rails (2.0.2)
      railties (&gt;= 3.2.0, &lt; 5.0)
      thor (~&gt; 0.14)
    json (1.7.3)
    mail (2.4.4)
      i18n (&gt;= 0.4.0)
      mime-types (~&gt; 1.16)
      treetop (~&gt; 1.4.8)
    mime-types (1.19)
    multi_json (1.3.6)
    polyglot (0.3.3)
    rack (1.4.1)
    rack-cache (1.2)
      rack (&gt;= 0.4)
    rack-ssl (1.3.2)
      rack
    rack-test (0.6.1)
      rack (&gt;= 1.0)
    rails (3.2.6)
      actionmailer (= 3.2.6)
      actionpack (= 3.2.6)
      activerecord (= 3.2.6)
      activeresource (= 3.2.6)
      activesupport (= 3.2.6)
      bundler (~&gt; 1.0)
      railties (= 3.2.6)
    railties (3.2.6)
      actionpack (= 3.2.6)
      activesupport (= 3.2.6)
      rack-ssl (~&gt; 1.3.2)
      rake (&gt;= 0.8.7)
      rdoc (~&gt; 3.4)
      thor (&gt;= 0.14.6, &lt; 2.0)
    rake (0.9.2.2)
    rdoc (3.12)
      json (~&gt; 1.4)
    sass (3.1.20)
    sass-rails (3.2.5)
      railties (~&gt; 3.2.0)
      sass (&gt;= 3.1.10)
      tilt (~&gt; 1.3)
    sprockets (2.1.3)
      hike (~&gt; 1.2)
      rack (~&gt; 1.0)
      tilt (~&gt; 1.1, != 1.3.0)
    sqlite3 (1.3.6)
    thor (0.15.4)
    tilt (1.3.3)
    treetop (1.4.10)
      polyglot
      polyglot (&gt;= 0.3.1)
    tzinfo (0.3.33)
    uglifier (1.2.6)
      execjs (&gt;= 0.3.0)
      multi_json (~&gt; 1.3)

PLATFORMS
  ruby

DEPENDENCIES
  coffee-rails (~&gt; 3.2.1)
  jquery-rails
  rails (= 3.2.6)
  sass-rails (~&gt; 3.2.3)
  sqlite3
  uglifier (&gt;= 1.0.3)</programlisting></para>

    <para>Der Vorteil von <filename>Gemfile.lock</filename> liegt in der damit
    verbundenen Möglichkeit, das mehrere Entwickler unabhängig von einander am
    gleichen Rails-Projekt arbeiten können und dabei immer sicher sein können,
    das alle mit den gleichen Gem-Versionen arbeiten. Ist eine Datei
    <filename>Gemfile.lock</filename>, wird diese von Bundler benutzt. Dies
    ist auch beim späteren Deployment des Rails-Projektes auf einen Webserver
    praktisch.</para>

    <para>Dank dieses Mechanismus, können Sie mehrere Rails-Projekte mit
    unterschiedlichen Gem-Versionsnummern parallel benutzten und
    entwickeln.</para>

    <section xml:id="bundle_update">
      <title xml:id="bundle_update.title">bundle update</title>

      <para>Mit <command>bundle update</command> können Sie Gems auf neue
      Versionsstände updaten. Als Beispiel habe ich ein Rails-Projekt mit der
      Rails-Version 3.2.5:<screen>MacBook:webshop xyz$ <command>rails -v</command>
Rails 3.2.5
MacBook:webshop xyz$</screen></para>

      <para>In der Datei <filename>Gemfile</filename> steht diese
      Version:<screen>MacBook:webshop xyz$ <command>head -n 4 Gemfile</command>
source 'https://rubygems.org'

<emphasis>gem 'rails', '3.2.5'</emphasis>

MacBook:webshop xyz$ </screen></para>

      <para>Ebenso in der <filename>Gemfile.lock</filename>:<screen>MacBook:webshop xyz$ <command>grep 'rails' Gemfile.lock</command> 
    coffee-rails (3.2.2)
    jquery-rails (2.0.2)
    rails (3.2.5)
    sass-rails (3.2.5)
  coffee-rails (~&gt; 3.2.1)
  jquery-rails
  <emphasis>rails (= 3.2.5)</emphasis>
  sass-rails (~&gt; 3.2.3)
MacBook:webshop xyz$</screen></para>

      <para>Wenn wir dieses Rails-Projekt auf die Rails-Version 3.2.6 updaten
      möchten, so müssen wir den Eintrag in der <filename>Gemfile</filename>
      Datei wie folgt ändern:<programlisting>source 'https://rubygems.org'

<emphasis>gem 'rails', '3.2.6'</emphasis>

# Bundle edge Rails instead:
# gem 'rails', :git =&gt; 'git://github.com/rails/rails.git'

gem 'sqlite3'


# Gems used only for assets and not required
# in production environments by default.
group :assets do
  gem 'sass-rails',   '~&gt; 3.2.3'
  gem 'coffee-rails', '~&gt; 3.2.1'

  # See https://github.com/sstephenson/execjs#readme for more supported runtimes
  # gem 'therubyracer', :platforms =&gt; :ruby

  gem 'uglifier', '&gt;= 1.0.3'
end

gem 'jquery-rails'
</programlisting></para>

      <para>Nach dieser Änderung können Sie mit <command>bundle update
      rails</command> die neue Rails-Version installieren (notwendige
      Abhängikeiten werden dabei automatisch von Bundler
      berücksichtigt):<screen>MacBook:webshop xyz$ <command>bundle update rails</command>
Fetching gem metadata from https://rubygems.org/.........
Using rake (0.9.2.2) 
Using i18n (0.6.0) 
Using multi_json (1.3.6) 
Installing activesupport (3.2.6) 
Using builder (3.0.0) 
Installing activemodel (3.2.6) 
Using erubis (2.7.0) 
Using journey (1.0.4) 
Using rack (1.4.1) 
Using rack-cache (1.2) 
Using rack-test (0.6.1) 
Using hike (1.2.1) 
Using tilt (1.3.3) 
Using sprockets (2.1.3) 
Installing actionpack (3.2.6) 
Using mime-types (1.19) 
Using polyglot (0.3.3) 
Using treetop (1.4.10) 
Using mail (2.4.4) 
Installing actionmailer (3.2.6) 
Using arel (3.0.2) 
Using tzinfo (0.3.33) 
Installing activerecord (3.2.6) 
Installing activeresource (3.2.6) 
Using bundler (1.1.4) 
Using coffee-script-source (1.3.3) 
Using execjs (1.4.0) 
Using coffee-script (2.2.0) 
Using rack-ssl (1.3.2) 
Using json (1.7.3) 
Using rdoc (3.12) 
Using thor (0.15.4) 
Installing railties (3.2.6) 
Using coffee-rails (3.2.2) 
Using jquery-rails (2.0.2) 
Installing rails (3.2.6) 
Using sass (3.1.20) 
Using sass-rails (3.2.5) 
Using sqlite3 (1.3.6) 
Using uglifier (1.2.6) 
Your bundle is updated! Use `bundle show [gemname]` to see where a bundled gem is installed.
MacBook:webshop xyz$ <command>rails -v</command>
Rails 3.2.6
MacBook:webshop xyz$</screen></para>

      <important>
        <para>Nach jedem Gem-Update sollten Sie als erstes Ihre Tests durch
        laufen lassen, um ganz sicher zu gehen, das eine neue Gem-Version
        nicht ungewollte Seiteneffekte hinzufügt.</para>
      </important>
    </section>

    <section xml:id="bundle_outdated">
      <title xml:id="bundle_updated.title">bundle outdated</title>

      <para>Wenn Sie wissen wollen, welche von Ihrem Rails-Projekt benutzen
      Gems mittlerweile in einer neuen Version vorhanden sind, können Sie dies
      mit dem Befehl <command>bundle outdated</command> rausfinden.
      Beispiel:<screen>MacBook:webshop xyz$ <command>bundle outdated</command>
Fetching gem metadata from https://rubygems.org/.........

Outdated gems included in the bundle:
  * sprockets (2.4.4 &gt; 2.1.3)

MacBook:webshop xyz$</screen></para>
    </section>

    <section xml:id="bundle_exec">
      <title xml:id="bundle_exec.title">bundle exec</title>

      <para><command>bundle exec</command> gehört wahrscheinlich zu den meist
      gehassten Befehlen von Rails-Entwicklern. Er wird immer dann benötigt,
      wenn in einem Rails-Projekt ein Programme wie <command>rake</command>
      benutzt werden wollten, die einen anderen Versions-Stand haben, als der
      Rest des Systems. Die daraus resultierende Fehlermeldung ist allerdings
      immer leicht umzusetzen:<screen>You have already activated rake 0.10, but your Gemfile requires rake 0.9.2.2. Using bundle exec may solve this.</screen></para>

      <para>In diesem Fall hilft es den Befehl mit einem vorrangestellten
      <command>bundle exec</command> aufzurufen:<screen>MacBook:webshop xyz$ <command>bundle exec rake db:migrate</command></screen></para>

      <section>
        <title>binstubs</title>

        <para>In manchen Umgebungen ist die Verwendung von <command>bundle
        exec</command> zu umständlich. Für diesen Fall können Sie mit
        <command>bundle install --binstubs</command> im Verzeichnis bin
        Programme mit der richtigen Version installieren:<screen>MacBook:webshop xyz$ <command>bundle install --binstubs</command>
Using rake (0.9.2.2) 
Using i18n (0.6.0) 
Using multi_json (1.3.6) 
Using activesupport (3.2.6) 
Using builder (3.0.0) 
Using activemodel (3.2.6) 
Using erubis (2.7.0) 
Using journey (1.0.4) 
Using rack (1.4.1) 
Using rack-cache (1.2) 
Using rack-test (0.6.1) 
Using hike (1.2.1) 
Using tilt (1.3.3) 
Using sprockets (2.1.3) 
Using actionpack (3.2.6) 
Using mime-types (1.19) 
Using polyglot (0.3.3) 
Using treetop (1.4.10) 
Using mail (2.4.4) 
Using actionmailer (3.2.6) 
Using arel (3.0.2) 
Using tzinfo (0.3.33) 
Using activerecord (3.2.6) 
Using activeresource (3.2.6) 
Using coffee-script-source (1.3.3) 
Using execjs (1.4.0) 
Using coffee-script (2.2.0) 
Using rack-ssl (1.3.2) 
Using json (1.7.3) 
Using rdoc (3.12) 
Using thor (0.15.4) 
Using railties (3.2.6) 
Using coffee-rails (3.2.2) 
Using jquery-rails (2.0.2) 
Using bundler (1.1.4) 
Using rails (3.2.6) 
Using sass (3.1.20) 
Using sass-rails (3.2.5) 
Using sqlite3 (1.3.6) 
Using uglifier (1.2.6) 
Your bundle is complete! Use `bundle show [gemname]` to see where a bundled gem is installed.
MacBook:webshop xyz$ <command>ls bin</command>
erubis  rake  ri  scss  tt
rackup  rake2thor sass  thor
rails   rdoc      sass-convert   tilt
MacBook:webshop xyz$</screen></para>

        <para>Danach können Sie immer diese Programme benutzen.
        Beispiel:<screen>MacBook:webshop xyz$ <command>bin/rake db:migrate</command>
==  CreateUsers: migrating ====================================================
-- create_table(:users)
   -&gt; 0.0018s
==  CreateUsers: migrated (0.0019s) ===========================================

MacBook:webshop xyz$</screen></para>
      </section>
    </section>

    <section xml:id="weitere_informationen_zu_bundler">
      <title xml:id="weitere_informationen_zu_bundler.title">Weitere
      Informationen zum Thema Bundler</title>

      <para>Das Thema Bundler ist weit komplexer als hier vorgestellt.
      Folgende Webseiten geben Ihnen einen tieferen Einblick in das Thema
      Bundler:<itemizedlist>
          <listitem>
            <para><link
            xlink:href="http://railscasts.com/episodes/201-bundler-revised">http://railscasts.com/episodes/201-bundler-revised</link></para>
          </listitem>

          <listitem>
            <para><link
            xlink:href="http://gembundler.com/">http://gembundler.com/</link></para>
          </listitem>
        </itemizedlist></para>
    </section>
  </section>
</chapter>
