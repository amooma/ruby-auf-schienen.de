<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xml:id="ar-has_one"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title xml:id="ar-has_one.title">has_one – 1:1-Verknüpfung</title>

  <indexterm>
    <primary>ActiveRecord</primary>

    <secondary>Relationen</secondary>

    <tertiary>has_one()</tertiary>
  </indexterm>

  <indexterm>
    <primary>ActiveRecord</primary>

    <secondary>Relationen</secondary>

    <tertiary>belongs_to()</tertiary>
  </indexterm>

  <indexterm>
    <primary>ActiveRecord</primary>

    <secondary>Assoziationen</secondary>

    <see>ActiveRecord, Relationen</see>
  </indexterm>

  <para>Ähnlich wie bei <methodname>has_many</methodname> (siehe <xref
  linkend="activerecord_has_many"/>), wird auch bei
  <methodname>has_one</methodname> ein Model mit einem anderen Model logisch
  verknüpft. Im Gegensatz zu <methodname>has_many,</methodname> gibt es aber
  bei <methodname>has_one</methodname> genau jeweils nur einen Datensatz, der
  mit genau einem anderen Datensatz verknüpft ist. <emphasis>In den meisten
  praktischen Anwendungsfällen bietet es sich logischerweise an, beides in das
  gleiche Model und damit in die gleiche Datenbank-Tabelle zu packen, aber der
  Vollständigkeit halber möchte ich hier auch <methodname>has_one</methodname>
  besprechen.</emphasis><tip>
      <para>Wahrscheinlich können Sie mit ruhigem Gewissen
      <methodname>has_one</methodname> überspringen.</para>
    </tip></para>

  <para>Bei den Beispielen gehe ich davon aus, dass Sie <xref
  linkend="activerecord_has_many"/> bereits gelesen und verstanden haben. Ich
  werde Methoden wie <methodname>build</methodname> (<xref
  linkend="activerecord_hinzufuegen_build"/>) nicht neu erklären, sondern als
  Grundlage voraussetzen.</para>

  <section>
    <title>Vorbereitung</title>

    <para>Wir greifen das Beispiel aus der Rails-Doku auf (siehe <uri
    xlink:href="http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html">http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html</uri>)
    und erstellen eine Applikation, in der es Angestellte und Büros gibt.
    Jeder Angestellte hat ein Büro. Erst die Applikation:<screen>MacBook:~ xyz$ <command>rails new office-space</command>
[...]
MacBook:~ xyz$ <command>cd office-space</command> 
MacBook:office-space xyz$</screen></para>

    <para>Und jetzt die beiden Modele:<screen>MacBook:office-space xyz$ <command>rails generate model employee last_name</command>
[...]
MacBook:office-space xyz$ <command>rails generate model office location employee_id:integer</command>
[...]
MacBook:office-space xyz$ <command>rake db:migrate</command>
[...]
MacBook:office-space xyz$</screen></para>
  </section>

  <section>
    <title>Verknüpfung</title>

    <para>Die Verknüpfung in der Datei
    <filename>app/model/employee.rb:</filename><programlisting>class Employee &lt; ActiveRecord::Base
  attr_accessible :last_name

  <emphasis>has_one :office</emphasis>
end</programlisting></para>

    <para>Und das Gegenstück in der
    <filename>app/model/office.rb:</filename><programlisting>class Office &lt; ActiveRecord::Base
  attr_accessible :employee_id, :location

  <emphasis>belongs_to :employee</emphasis>
end</programlisting></para>

    <section>
      <title>Optionen</title>

      <para>Die Optionen von <methodname>has_one</methodname> ähneln denen von
      <methodname>has_many</methodname>. Aus diesem Grund verweise ich an
      dieser Stelle auf <xref linkend="activerecord_1n_optionen"/> oder auf
      <uri
      xlink:href="http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html#method-i-has_one">http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html#method-i-has_one</uri>.
      Auf die Schnelle hier ein paar allgemeine Beispiele (zum Teil aus der
      Rails-Doku):<programlisting>has_one :office, :dependent =&gt; :destroy  # loescht den Office Eintrag automatisch mit
has_one :office, :dependent =&gt; :nullify  # wie :destroy, nur das der Office Datensatz nicht 
                                         # geloescht wird, sondern employee_id auf NULL gesetzt
                                         # wird
has_one :last_comment, :class_name =&gt; "Comment", :order =&gt; "posted_on"
has_one :project_manager, :class_name =&gt; "Person", :conditions =&gt; "role = 'project_manager'"
has_one :boss, :readonly =&gt; :true
has_one :club, :through =&gt; :membership
has_one :primary_address, :through =&gt; :addressables, :conditions =&gt; ["addressable.primary = ?", true], :source =&gt; :addressable</programlisting></para>
    </section>
  </section>

  <section>
    <title>Consolen-Beispiele</title>

    <para>Starten wir einmal die Console und legen zwei Angestellte
    an:<screen>MacBook:office-space xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.3)
1.9.3p194 :001 &gt; <command>Employee</command>
 =&gt; Employee(id: integer, last_name: string, created_at: datetime, updated_at: datetime) 
1.9.3p194 :002 &gt; <command>Employee.create(:last_name =&gt; 'Udelhoven')</command>
   (0.1ms)  begin transaction
  SQL (9.3ms)  INSERT INTO "employees" ("created_at", "last_name", "updated_at") VALUES (?, ?, ?)  [["created_at", Tue, 08 May 2012 06:42:43 UTC +00:00], ["last_name", "Udelhoven"], ["updated_at", Tue, 08 May 2012 06:42:43 UTC +00:00]]
   (0.9ms)  commit transaction
 =&gt; #&lt;Employee id: 1, last_name: "Udelhoven", created_at: "2012-05-08 06:42:43", updated_at: "2012-05-08 06:42:43"&gt; 
1.9.3p194 :003 &gt; <command>Employee.create(:last_name =&gt; 'Meier')</command>
   (0.1ms)  begin transaction
  SQL (0.5ms)  INSERT INTO "employees" ("created_at", "last_name", "updated_at") VALUES (?, ?, ?)  [["created_at", Tue, 08 May 2012 06:42:49 UTC +00:00], ["last_name", "Meier"], ["updated_at", Tue, 08 May 2012 06:42:49 UTC +00:00]]
   (5.2ms)  commit transaction
 =&gt; #&lt;Employee id: 2, last_name: "Meier", created_at: "2012-05-08 06:42:49", updated_at: "2012-05-08 06:42:49"&gt; 
1.9.3p194 :004 &gt;</screen></para>

    <para>Jetzt bekommt ein Angestellter sein eigenes Büro:<screen>1.9.3p194 :004 &gt; <command>Office.create(:location =&gt; '1. Stock', :employee_id =&gt; 1)</command>
   (0.1ms)  begin transaction
  SQL (0.6ms)  INSERT INTO "offices" ("created_at", "employee_id", "location", "updated_at") VALUES (?, ?, ?, ?)  [["created_at", Tue, 08 May 2012 06:44:04 UTC +00:00], ["employee_id", 1], ["location", "1. Stock"], ["updated_at", Tue, 08 May 2012 06:44:04 UTC +00:00]]
   (3.3ms)  commit transaction
 =&gt; #&lt;Office id: 1, location: "1. Stock", employee_id: 1, created_at: "2012-05-08 06:44:04", updated_at: "2012-05-08 06:44:04"&gt; 
1.9.3p194 :005 &gt; <command>Employee.first.office</command>
  Employee Load (0.3ms)  SELECT "employees".* FROM "employees" LIMIT 1
  Office Load (0.2ms)  SELECT "offices".* FROM "offices" WHERE "offices"."employee_id" = 1 LIMIT 1
 =&gt; #&lt;Office id: 1, location: "1. Stock", employee_id: 1, created_at: "2012-05-08 06:44:04", updated_at: "2012-05-08 06:44:04"&gt; 
1.9.3p194 :006 &gt; <command>Office.first.employee</command>
  Office Load (0.3ms)  SELECT "offices".* FROM "offices" LIMIT 1
  Employee Load (0.2ms)  SELECT "employees".* FROM "employees" WHERE "employees"."id" = 1 LIMIT 1
 =&gt; #&lt;Employee id: 1, last_name: "Udelhoven", created_at: "2012-05-08 06:42:43", updated_at: "2012-05-08 06:42:43"&gt; 
1.9.3p194 :007 &gt;</screen></para>

    <para>Beim zweiten Angestellten benutzen wir die automatisch erzeugte
    <methodname>create_office</methodname>-Methode (bei
    <methodname>has_many</methodname> würden wir hier
    <methodname>offices.create</methodname> benutzen):<screen>1.9.3p194 :007 &gt; <command>Employee.last.create_office(:location =&gt; 'Erdgeschoss')</command>
  Employee Load (0.3ms)  SELECT "employees".* FROM "employees" ORDER BY "employees"."id" DESC LIMIT 1
   (0.1ms)  begin transaction
  SQL (0.7ms)  INSERT INTO "offices" ("created_at", "employee_id", "location", "updated_at") VALUES (?, ?, ?, ?)  [["created_at", Tue, 08 May 2012 06:45:12 UTC +00:00], ["employee_id", 2], ["location", "Erdgeschoss"], ["updated_at", Tue, 08 May 2012 06:45:12 UTC +00:00]]
   (2.4ms)  commit transaction
  Office Load (0.2ms)  SELECT "offices".* FROM "offices" WHERE "offices"."employee_id" = 2 LIMIT 1
   (0.0ms)  begin transaction
   (0.0ms)  commit transaction
 =&gt; #&lt;Office id: 2, location: "Erdgeschoss", employee_id: 2, created_at: "2012-05-08 06:45:12", updated_at: "2012-05-08 06:45:12"&gt; 
1.9.3p194 :008 &gt;</screen></para>

    <para>Löschen geht intuitiv mit <methodname>destroy</methodname>:<screen>1.9.3p194 :008 &gt; <command>Employee.first.office</command>
  Employee Load (0.2ms)  SELECT "employees".* FROM "employees" LIMIT 1
  Office Load (0.2ms)  SELECT "offices".* FROM "offices" WHERE "offices"."employee_id" = 1 LIMIT 1
 =&gt; #&lt;Office id: 1, location: "1. Stock", employee_id: 1, created_at: "2012-05-08 06:44:04", updated_at: "2012-05-08 06:44:04"&gt; 
1.9.3p194 :009 &gt; <command>Employee.first.office.destroy</command>
  Employee Load (0.3ms)  SELECT "employees".* FROM "employees" LIMIT 1
  Office Load (0.2ms)  SELECT "offices".* FROM "offices" WHERE "offices"."employee_id" = 1 LIMIT 1
   (0.1ms)  begin transaction
  SQL (0.4ms)  DELETE FROM "offices" WHERE "offices"."id" = ?  [["id", 1]]
   (3.6ms)  commit transaction
 =&gt; #&lt;Office id: 1, location: "1. Stock", employee_id: 1, created_at: "2012-05-08 06:44:04", updated_at: "2012-05-08 06:44:04"&gt; 
1.9.3p194 :010 &gt; <command>Office.exists?(1)</command>
  Office Exists (0.2ms)  SELECT 1 FROM "offices" WHERE "offices"."id" = 1 LIMIT 1
 =&gt; false 
1.9.3p194 :011 &gt; <command>exit</command>
MacBook:office-space xyz$</screen></para>

    <warning>
      <para>Sollten Sie für einen <classname>Employee</classname> mit einem
      existierenden <classname>Office</classname> ein neues
      <classname>Office</classname> anlegen, so bekommen Sie keine
      Fehlermeldung:<screen>MacBook:office-space xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.3)
1.9.3p194 :001 &gt; <command>Employee.last.office</command>
  Employee Load (0.1ms)  SELECT "employees".* FROM "employees" ORDER BY "employees"."id" DESC LIMIT 1
  Office Load (0.2ms)  SELECT "offices".* FROM "offices" WHERE "offices"."employee_id" = 2 LIMIT 1
 =&gt; #&lt;Office id: 2, location: "Erdgeschoss", employee_id: 2, created_at: "2012-05-08 06:45:12", updated_at: "2012-05-08 06:45:12"&gt; 
1.9.3p194 :002 &gt; <command>Employee.last.create_office(:location =&gt; 'Keller')</command>
  Employee Load (0.3ms)  SELECT "employees".* FROM "employees" ORDER BY "employees"."id" DESC LIMIT 1
   (0.1ms)  begin transaction
  SQL (29.3ms)  INSERT INTO "offices" ("created_at", "employee_id", "location", "updated_at") VALUES (?, ?, ?, ?)  [["created_at", Tue, 08 May 2012 06:51:58 UTC +00:00], ["employee_id", 2], ["location", "Keller"], ["updated_at", Tue, 08 May 2012 06:51:58 UTC +00:00]]
   (3.7ms)  commit transaction
  Office Load (0.2ms)  SELECT "offices".* FROM "offices" WHERE "offices"."employee_id" = 2 LIMIT 1
   (0.0ms)  begin transaction
   (0.3ms)  UPDATE "offices" SET "employee_id" = NULL, "updated_at" = '2012-05-08 06:51:58.969829' WHERE "offices"."id" = 2
   (0.9ms)  commit transaction
 =&gt; #&lt;Office id: 3, location: "Keller", employee_id: 2, created_at: "2012-05-08 06:51:58", updated_at: "2012-05-08 06:51:58"&gt; 
1.9.3p194 :003 &gt; <command>Employee.last.office</command>
  Employee Load (0.3ms)  SELECT "employees".* FROM "employees" ORDER BY "employees"."id" DESC LIMIT 1
  Office Load (0.2ms)  SELECT "offices".* FROM "offices" WHERE "offices"."employee_id" = 2 LIMIT 1
 =&gt; #&lt;Office id: 3, location: "Keller", employee_id: 2, created_at: "2012-05-08 06:51:58", updated_at: "2012-05-08 06:51:58"&gt; 
1.9.3p194 :004 &gt;</screen></para>

      <para>Das alte <classname>Office</classname> ist sogar noch in der
      Datenbank (die <varname>employee_id</varname> wurde automatisch auf
      <code>nil</code> gesetzt):<screen>1.9.3p194 :004 &gt; <command>Office.all</command>
  Office Load (0.2ms)  SELECT "offices".* FROM "offices" 
 =&gt; [#&lt;Office id: 2, location: "Erdgeschoss", employee_id: nil, created_at: "2012-05-08 06:45:12", updated_at: "2012-05-08 06:51:58"&gt;, #&lt;Office id: 3, location: "Keller", employee_id: 2, created_at: "2012-05-08 06:51:58", updated_at: "2012-05-08 06:51:58"&gt;] 
1.9.3p194 :005 &gt; <command>exit</command>
MacBook:office-space xyz$</screen></para>
    </warning>
  </section>

  <section>
    <title>has_one vs. belongs_to</title>

    <para>Sowohl <methodname>has_one</methodname> wie auch
    <methodname>belongs_to</methodname> bietet die Möglichkeit, eine
    1:1-Verbindung abzubilden. Der Unterschied liegt in der Praxis in der
    persönlichen Präferenz des Programmierers und dem Ort des Foreign-Keys. Im
    allgemeinen wird <methodname>has_one</methodname> eher selten benutzt und
    hängt vom Normalisierungsgrad des Datenschemas ab.</para>
  </section>
</section>
