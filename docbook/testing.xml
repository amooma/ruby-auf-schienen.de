<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="testing" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title xml:id="testing.title">Tests</title>

  <indexterm>
    <primary>Tests</primary>
  </indexterm>

  <indexterm>
    <primary>Test-Driven-Development (TDD)</primary>
  </indexterm>

  <indexterm>
    <primary>TDD</primary>

    <see>Test-Driven-Development</see>
  </indexterm>

  <indexterm>
    <primary>rake test</primary>

    <see>Tests</see>
  </indexterm>

  <section xml:id="testing_einleitung">
    <title xml:id="testing_einleitung.title">Einleitung</title>

    <para>Ich programmiere seit 30 Jahren und bin davon die meiste Zeit sehr
    gut ohne Testing zurechtgekommen. Ich bin den EDV-Dinosaurien nicht böse,
    wenn Sie dieses Kapitel überspringen. Sie können Rails-Applikationen auch
    ohne Tests erstellen und werden deshalb kein schlechtes Karma bekommen
    (hoffentlich, sicher kann man bei der Karma-Sache ja nie sein).</para>

    <para>Aber sollten Sie sich auf Test-Driven-Development (TDD) einlassen,
    so kann ich Ihnen versprechen, dass es eine Erleuchtung ist. Die Grundidee
    von TDD ist, dass man für jede Programmfunktion einen Test schreibt, der
    diese Funktion überprüft. In der reinen TDD-Lehre schreibt man diesen Test
    vor dem eigentlichem Programmieren. Ja, man hat initial mehr Aufwand. Aber
    danach kann man alle Tests durchlaufen lassen und sieht, dass die
    Applikation genau so funktioniert, wie man es sich vorgestellt hat. Der
    wirkliche Vorteil stellt sich aber erst nach ein paar Wochen oder Monaten
    ein, wenn man sich das Projekt wieder mal vornimmt und eine Erweiterung
    oder Veränderung schreibt. Dann kann man recht gefahrlos den Code
    verändern und danach die Funktionsweise anhand der Tests überprüfen. Es
    gibt dann kein „hmm … das ist jetzt dumm gelaufen, aber an diese
    Besonderheit habe ich nicht gedacht“ mehr.</para>

    <para>Der Vorteil von TDD zeigt sich aber oft schon beim ersten Schreiben
    eines Programmes. Oft entlarfen Test Flüchtigkeitsfehler, die sonst erst
    sehr viel später auffallen würden.</para>

    <para>Dieses Kapitel ist ein Kurzüberblick zum Thema
    Test-Driven-Development mit Rails. Wenn Sie Blut geleckt haben, werden Sie
    sicher noch tiefer einsteigen wollen. In der offiziellen Rails-Doku können
    Sie unter <uri
    xlink:href="http://guides.rubyonrails.org/testing.html">http://guides.rubyonrails.org/testing.html</uri>
    tiefer eintauchen.</para>

    <note>
      <para>Testen ist wie Autofahren. Autofahren kann man auch nur beim
      Autofahren lernen.</para>
    </note>
  </section>

  <section xml:id="testing_beispiel_webshop">
    <title xml:id="testing_beispiel_webshop.title">Beispiel für einen User in
    einem Web-Shop</title>

    <para>Fangen wir mit einem User-Scaffold in einem imaginären Webshop
    an:<screen>MacBook:~ xyz$ <command>rails new webshop</command>
[...]
MacBook:~ xyz$ <command>cd webshop</command>
MacBook:webshop xyz$ <command>rails generate scaffold user login_name first_name last_name birthday:date</command>
[...]
      invoke    test_unit
      create      test/unit/user_test.rb
      create      test/fixtures/users.yml
[...]
      invoke    test_unit
      create      test/functional/users_controller_test.rb
      invoke    helper
      create      app/helpers/users_helper.rb
      invoke      test_unit
      create        test/unit/helpers/users_helper_test.rb
[...]
MacBook:webshop xyz$ <command>rake db:migrate</command>
[...]
MacBook:webshop xyz$</screen></para>

    <para>Sie kennen sich ja mit Scaffold aus (falls nicht, bitte erst <xref
    linkend="scaffolding"/> lesen) und wissen, was die gerade erstellte
    Applikation macht. Sie haben auch gesehen, dass Scaffold einige Tests
    angelegt hat (die sind immer leicht am Wort <code>test</code> im
    Dateinamen zu erkennen).</para>

    <para>Die komplette Test-Suite eines Rails-Projektes wird mit dem Befehl
    <command>rake test</command> abgearbeitet. Probieren wir mal aus, was ein
    Test an dieser Stelle der Entwicklung ausgibt:<screen>MacBook:webshop xyz$ <command>rake test</command>
Run options: 

# Running tests:



Finished tests in 0.003920s, 0.0000 tests/s, 0.0000 assertions/s.

0 tests, 0 assertions, 0 failures, 0 errors, 0 skips
Run options: 

# Running tests:

.......

Finished tests in 0.223761s, 31.2834 tests/s, 44.6905 assertions/s.

7 tests, 10 assertions, 0 failures, 0 errors, 0 skips
MacBook:webshop xyz$</screen></para>

    <para>Die Ausgabe „<literal>7 tests, 10 assertions, 0 failures, 0 errors,
    0 skips</literal>“ sieht gut aus. Per Default läuft ein Test in einem
    Standard-Scaffold korrekt durch.</para>

    <para>Verändern wir jetzt die <filename>app/models/user.rb</filename> und
    fügen ein paar Validierungen (falls diese nicht ganz klar sind, bitte
    <xref linkend="activerecord_validation"/> lesen) ein:<programlisting>class User &lt; ActiveRecord::Base
  attr_accessible :birthday, :first_name, :last_name, :login_name

  validates :login_name,
            :presence =&gt; true,
            :format =&gt; { 
                         :with =&gt; /^.*(?=.*[\-_.]).*$/,
                         :message =&gt; "must include at least one of the special characters -_."
                       }

  validates :last_name, 
            :presence =&gt; true

end
</programlisting></para>

    <para>Nachfolgend führen wir noch mal <command>rake test</command>
    aus:<screen>MacBook:webshop xyz$ <command>rake test</command>
Run options: 

# Running tests:



Finished tests in 0.004409s, 0.0000 tests/s, 0.0000 assertions/s.

0 tests, 0 assertions, 0 failures, 0 errors, 0 skips
Run options: 

# Running tests:

F.....F

Finished tests in 0.277867s, 25.1919 tests/s, 32.3896 assertions/s.

  1) Failure:
test_should_create_user(UsersControllerTest) [/Users/xyz/webshop/test/functional/users_controller_test.rb:20]:
"User.count" didn't change by 1.
&lt;3&gt; expected but was
&lt;2&gt;.

  2) Failure:
test_should_update_user(UsersControllerTest) [/Users/xyz/webshop/test/functional/users_controller_test.rb:39]:
Expected response to be a &lt;:redirect&gt;, but was &lt;200&gt;

7 tests, 9 assertions, 2 failures, 0 errors, 0 skips
Errors running test:functionals! #&lt;RuntimeError: Command failed with status (2): [/Users/xyz/.rvm/rubies/ruby-1.9.3-p194/bin...]&gt;
MacBook:webshop xyz$ </screen></para>

    <para>Dieses Mal haben wir „<literal>2 failures</literal>“. Der Fehler
    passiert beim „<literal>should create user</literal>“ und beim
    „<literal>should update user</literal>“. Die Erklärung hierfür liegt in
    unserer Validierung. Die vom Scaffold Generator angelegten Beispieldaten
    sind beim ersten <command>rake test</command> (ohne Validierung)
    durchgelaufen. Erst beim zweiten Durchlauf (mit Validierung) gab es die
    Fehler.</para>

    <para>Diese Beispieldaten werden als sogenannte <foreignphrase
    xml:lang="en">Fixtures</foreignphrase><indexterm>
        <primary>Tests</primary>

        <secondary>fixtures</secondary>
      </indexterm><indexterm>
        <primary>Fixtures</primary>

        <see>Tests</see>
      </indexterm> im YAML-Format im Verzeichnis
    <filename>test/fixtures/</filename> angelegt. Schauen wir uns die
    Beispieldaten für <classname>User</classname> in der Datei
    <filename>test/fixtures/users.yml</filename> an:<programlisting># Read about fixtures at http://api.rubyonrails.org/classes/ActiveRecord/Fixtures.html

one:
  login_name: MyString
  first_name: MyString
  last_name: MyString
  birthday: 2012-05-29

two:
  login_name: MyString
  first_name: MyString
  last_name: MyString
  birthday: 2012-05-29
</programlisting></para>

    <para>Dort sind zwei Beispieldatensätze angelegt, die unserer Validierung
    nicht standhalten. Der <methodname>login_name</methodname> braucht
    mindestens ein "-_."-Sonderzeichen. Ändern wir <code>login_name</code> in
    <filename>test/fixtures/users.yml</filename> entsprechend
    ab:<programlisting># Read about fixtures at http://api.rubyonrails.org/classes/Fixtures.html

one:
  login_name: My-String
  firstname: MyString
  lastname: MyString
  birthday: 1970-01-01

two:
  login_name: My-String
  firstname: MyString
  lastname: MyString
  birthday: 1970-01-01
</programlisting></para>

    <para>Ein <command>rake test</command> läuft jetzt wieder ohne Fehler
    durch:<screen>MacBook:webshop xyz$ <command>rake test</command>
Run options: 

# Running tests:



Finished tests in 0.003977s, 0.0000 tests/s, 0.0000 assertions/s.

0 tests, 0 assertions, 0 failures, 0 errors, 0 skips
Run options: 

# Running tests:

.......

Finished tests in 0.204496s, 34.2305 tests/s, 48.9007 assertions/s.

7 tests, 10 assertions, 0 failures, 0 errors, 0 skips
MacBook:webshop xyz$ </screen></para>

    <para>Wir wissen nun, dass in der
    <filename>test/fixtures/users.yml</filename> valide Daten stehen müssen,
    damit der mit Scaffold erstellte Standard-Test durchläuft. Aber auch nicht
    mehr. Nachfolgend andern wir die
    <filename>test/fixtures/users.yml</filename> auf ein Minimum (wir brauchen
    z.B. keinen <code>first_name</code>) und mit für Menschen leichter
    lesbaren Daten ab:<programlisting>one:
  login_name: horst.meier
  last_name: Meier

two:
  login_name: emil.stein
  last_name: Stein
</programlisting></para>

    <para>Sicherheitshalber nach der Veränderung noch mal ein <command>rake
    test</command> (das kann man gar nicht oft genug machen):<screen>MacBook:webshop xyz$ <command>rake test</command>
Run options: 

# Running tests:



Finished tests in 0.004234s, 0.0000 tests/s, 0.0000 assertions/s.

0 tests, 0 assertions, 0 failures, 0 errors, 0 skips
Run options: 

# Running tests:

.......

Finished tests in 0.202971s, 34.4877 tests/s, 49.2681 assertions/s.

7 tests, 10 assertions, 0 failures, 0 errors, 0 skips
MacBook:webshop xyz$ </screen></para>

    <important>
      <para>Alle Fixtures werden beim Starten eines Tests in die Datenbank
      geladen. Besonders wenn man <methodname>uniqueness</methodname> in der
      Validierung benutzt, muss man dies beim Test im Hinterkopf
      behalten.</para>
    </important>

    <section xml:id="testing_beispiel_webshop_functional_tests">
      <title
      xml:id="testing_beispiel_webshop_functional_tests.title">Functional
      Tests</title>

      <indexterm>
        <primary>Tests</primary>

        <secondary>Functional</secondary>
      </indexterm>

      <indexterm>
        <primary>Functional Tests</primary>

        <see>Tests</see>
      </indexterm>

      <para>Schauen wir uns mal genau an, an welcher Stelle die ursprünglichen
      Fehler aufgetreten sind:<screen>  1) Failure:
test_should_create_user(UsersControllerTest) [/Users/xyz/webshop/test/functional/users_controller_test.rb:20]:
"User.count" didn't change by 1.
&lt;3&gt; expected but was
&lt;2&gt;.

7 tests, 9 assertions, 1 failures, 0 errors, 0 skips
Errors running test:functionals! #&lt;RuntimeError: Command failed with status (1): [/Users/xyz/.rvm/rubies/ruby-1.9.3-p194/bin...]&gt;
</screen></para>

      <para>Im <code>UsersControllerTest</code> konnte der User nicht angelegt
      und nicht verändert werden. Die Controller-Tests befinden sich im
      Verzeichnis <filename>test/functional/</filename>. Schauen wir uns jetzt
      die Datei <filename>test/functional/users_controller_test.rb</filename>
      genau an:<programlisting>require 'test_helper'

class UsersControllerTest &lt; ActionController::TestCase
  setup do
    @user = users(:one)
  end

  test "should get index" do
    get :index
    assert_response :success
    assert_not_nil assigns(:users)
  end

  test "should get new" do
    get :new
    assert_response :success
  end

  test "should create user" do
    assert_difference('User.count') do
      post :create, user: { birthday: @user.birthday, first_name: @user.first_name, last_name: @user.last_name, login_name: @user.login_name }
    end

    assert_redirected_to user_path(assigns(:user))
  end

  test "should show user" do
    get :show, id: @user
    assert_response :success
  end

  test "should get edit" do
    get :edit, id: @user
    assert_response :success
  end

  test "should update user" do
    put :update, id: @user, user: { birthday: @user.birthday, first_name: @user.first_name, last_name: @user.last_name, login_name: @user.login_name }
    assert_redirected_to user_path(assigns(:user))
  end

  test "should destroy user" do
    assert_difference('User.count', -1) do
      delete :destroy, id: @user
    end

    assert_redirected_to users_path
  end
end
</programlisting></para>

      <para>Am Anfang finden wir eine <code>setup</code>-Anweisung:
      <programlisting>  setup do
    @user = users(:one)
  end
</programlisting></para>

      <para>Diese drei Zeilen Code bedeuten, dass zum Start eines jeden
      einzelnen Tests eine Instanz <varname>@user</varname> mit den Daten des
      Eintrages <code>one</code> aus der Datei
      <filename>test/fixtures/users.yml</filename> angelegt wird.
      <methodname>setup</methodname> ist ein vordefinierter Callback, der -
      falls vorhanden - von Rails vor jedem Test gestartet wird. Das
      Gegenstück zu <methodname>setup</methodname> ist
      <methodname>teardown</methodname>. Ein <methodname>teardown</methodname>
      wird - falls vorhanden - nach jedem Test automatisch
      aufgerufen.<indexterm>
          <primary>Tests</primary>

          <secondary>Functional</secondary>

          <tertiary>setup</tertiary>
        </indexterm><indexterm>
          <primary>Tests</primary>

          <secondary>Functional</secondary>

          <tertiary>teardown</tertiary>
        </indexterm></para>

      <important>
        <para>Bei jedem Test (also bei jedem Durchlauf von <command>rake
        test</command>) wird automatisch eine frische und damit leere
        Test-Datenbank angelegt. Das ist eine andere Datenbank als die, auf
        die Sie per Default mit <command>rails console</command> zugreifen
        (das ist die Development-Datenbank). Die Datenbanken werden in der
        Konfigurationsdatei <filename>config/database.yml</filename>
        definiert. Auf die Test-Datenbank können Sie zu Debug-Zwecken mit
        <command>rails console test</command> zugreifen.</para>
      </important>

      <para>Danach werden in diesem Functional Test verschiedene
      Webseiten-Funktionen getestet. Als Erstes der Zugriff auf die
      Index-Seite:<programlisting>  test "should get index" do
    get :index
    assert_response :success
    assert_not_nil assigns(:users)
  end</programlisting></para>

      <para>Der Befehl <code>get :index</code> ruft die Seite
      <uri>/users</uri> auf. <code>assert_response :success</code> bedeutet,
      dass die Seite ausgeliefert wurde. Die Zeile <code>assert_not_nil
      assigns(:users)</code> stellt sicher, dass die Instanz-Variable
      <varname>@users</varname> vom Controller nicht mit dem Wert
      <code>nil</code> zum View gegeben wird (durch
      <methodname>setup</methodname> wurde ja sichergestellt, das bereits ein
      Eintrag in der Datenbank ist).<footnote>
          <para>Dabei wird hier das Symbol <varname>:users</varname> genommen,
          um sicherzustellen, dass <varname>@users</varname> in der zu
          testenden Controller-Klasse und nicht <varname>@users</varname> in
          der Test-Klasse selbst genommen wird.</para>
        </footnote></para>

      <para>Schauen wir uns mal die beiden Probleme von vorhin genauer an. Als
      Erstes <code>should create user</code>:<programlisting>  test "should create user" do
    assert_difference('User.count') do
      post :create, user: { birthday: @user.birthday, first_name: @user.first_name, last_name: @user.last_name, login_name: @user.login_name }
    end

    assert_redirected_to user_path(assigns(:user))
  end</programlisting></para>

      <para>Der Block <code>assert_difference('User.count') do ... end</code>
      erwartet eine Veränderung durch den darin enthaltenen Code.
      <code>User.count</code> müsste am Anfang 1 ergeben und am Ende 2. Da wir
      aber in der ersten <filename>test/fixtures/users.yml</filename>-Variante
      einen ungültigen Datensatz hatten, ergab <code>User.count</code> vorher
      und hinterher 0. 0 und nicht 1 am Anfang, weil auch das <code>setup do
      ... end</code> nicht funktioniert haben kann.</para>

      <para>Die letzte Zeile <code>assert_redirected_to
      user_path(assigns(:user))</code> überprüft, ob nach einem neu angelegten
      Datensatz auch auf den entsprechenden View <code>show</code> geleitet
      wird.</para>

      <para>Den zweiten Fehler gab es bei <code>should update
      user</code>:<programlisting>  test "should update user" do
    put :update, id: @user, user: { birthday: @user.birthday, first_name: @user.first_name, last_name: @user.last_name, login_name: @user.login_name }
    assert_redirected_to user_path(assigns(:user))
  end</programlisting></para>

      <para>Hier sollte der Datensatz mit der <code>id</code> des
      <varname>@user</varname>-Datensatzes mit den Attributen des
      <varname>@user</varname>-Datensatzes geupdatet werden. Danach soll auch
      wieder der <code>show</code>-View zu diesem Datensatz angezeigt werden.
      Logischerweise ging dieser Test auch nicht, da a) der
      <varname>@user</varname>-Datensatz gar nicht in der Datenbank existierte
      und b) er auch nicht geupdatet werden konnte, da er nicht valide
      war.</para>

      <para>Ohne jetzt auf jeden einzelnen Functional Test Zeile für Zeile
      einzugehen, wird klar, was diese Tests machen: Sie führen echte Anfragen
      an das Web-Interface aus (bzw. eigentlich an die Controller) und können
      somit dazu benutzt werden, die Controller zu testen.</para>

      <tip>
        <para>Mit <command>rake test:functionals</command> können Sie auch nur
        die Functional Tests im Verzeichnis
        <filename>test/functional/</filename> durchlaufen lassen.<screen>MacBook:webshop xyz$ <command>rake test:functionals</command>
Run options: 

# Running tests:

.......

Finished tests in 0.205717s, 34.0273 tests/s, 48.6105 assertions/s.

7 tests, 10 assertions, 0 failures, 0 errors, 0 skips
MacBook:webshop xyz$ </screen></para>
      </tip>
    </section>

    <section xml:id="testing_beispiel_webshop_unit_tests">
      <title>Unit Tests</title>

      <indexterm>
        <primary>Tests</primary>

        <secondary>Unit</secondary>
      </indexterm>

      <indexterm>
        <primary>Unit Tests</primary>

        <see>Tests</see>
      </indexterm>

      <indexterm>
        <primary>assert</primary>

        <see>Tests</see>
      </indexterm>

      <para>Zum Testen der Validierungen, die wir in
      <filename>app/models/user.rb</filename> eingetragen haben, sind Unit
      Tests besser geeignet. Diese testen nicht wie die Functional Tests die
      Arbeit des Controllers, sondern nur das Model.</para>

      <tip>
        <para>Mit <command>rake test</command> werden alle im Rails-Projekt
        vorhandenen Tests ausgeführt. Mit <command>rake test:units</command>
        werden nur die Unit Tests im Verzeichnis
        <filename>test/unit/</filename> ausgeführt.</para>
      </tip>

      <para>Die Unit Tests befinden sich im Verzeichnis
      <filename>test/unit/</filename>. Ein Blick in die Datei
      <filename>test/unit/user_test.rb</filename> ist aber
      ernüchternd:<programlisting>require 'test_helper'

class UserTest &lt; ActiveSupport::TestCase
  # test "the truth" do
  #   assert true
  # end
end
</programlisting></para>

      <para>Per Default schreibt Scaffold nur einen auskommentierten
      Dummy-Test rein. Deshalb läuft <command>rake test:units</command> auch
      so inhaltslos durch:<screen>MacBook:webshop xyz$ <command>rake test:units</command>
Run options: 

# Running tests:



Finished tests in 0.004657s, 0.0000 tests/s, 0.0000 assertions/s.

0 tests, 0 assertions, 0 failures, 0 errors, 0 skips
MacBook:webshop xyz$</screen></para>

      <para>Ein Unit-Test besteht immer aus folgender
      Struktur:<programlisting>  test "<replaceable>eine Behauptung</replaceable>" do
    assert <replaceable>etwas_ist_true_oder_false</replaceable>
  end</programlisting></para>

      <para>Das Wort <code>assert</code><indexterm>
          <primary>assert</primary>
        </indexterm> bedeutet in diesem Kontext behaupten oder feststellen. Es
      wird also eine Behauptung aufgestellt. Wenn diese Behauptung
      <code>true</code> (wahr) ist, dann läuft der Test durch und alles ist
      okay. Wenn diese Behauptung <code>false</code> (falsch) ist, schlägt der
      Test fehl und wir haben einen Fehler im Programm (die Ausgabe des
      Fehlers können Sie am Ende der assert-Zeile als String angeben).</para>

      <note>
        <para>Wenn Sie sich einmal auf <link
        xlink:href="http://guides.rubyonrails.org/testing.html">http://guides.rubyonrails.org/testing.html</link>
        umschauen, dann werden Sie sehen, dass es noch ein paar andere
        <code>assert</code>-Varianten gibt. Hier einige
        Beispiele:<itemizedlist>
            <listitem>
              <para><code>assert( <replaceable>boolean</replaceable>,
              <replaceable>[msg]</replaceable> )</code></para>
            </listitem>

            <listitem>
              <para><code>assert_equal( <replaceable>obj1</replaceable>,
              <replaceable>obj2</replaceable>,
              <replaceable>[msg]</replaceable> )</code></para>
            </listitem>

            <listitem>
              <para><code>assert_not_equal( <replaceable>obj1</replaceable>,
              <replaceable>obj2</replaceable>,
              <replaceable>[msg]</replaceable> )</code></para>
            </listitem>

            <listitem>
              <para><code>assert_same( <replaceable>obj1</replaceable>,
              <replaceable>obj2</replaceable>,
              <replaceable>[msg]</replaceable> )</code></para>
            </listitem>

            <listitem>
              <para><code>assert_not_same( <replaceable>obj1</replaceable>,
              <replaceable>obj2</replaceable>,
              <replaceable>[msg]</replaceable> )</code></para>
            </listitem>

            <listitem>
              <para><code>assert_nil( <replaceable>obj</replaceable>,
              <replaceable>[msg]</replaceable> )</code></para>
            </listitem>

            <listitem>
              <para><code>assert_not_nil( <replaceable>obj</replaceable>,
              <replaceable>[msg]</replaceable> )</code></para>
            </listitem>

            <listitem>
              <para><code>assert_match( <replaceable>regexp</replaceable>,
              <replaceable>string</replaceable>,
              <replaceable>[msg]</replaceable> )</code></para>
            </listitem>

            <listitem>
              <para><code>assert_no_match( <replaceable>regexp</replaceable>,
              <replaceable>string</replaceable>,
              <replaceable>[msg]</replaceable> )</code></para>
            </listitem>
          </itemizedlist></para>
      </note>

      <para>Füllen wir den ersten Test in der
      <filename>test/unit/user_test.rb</filename> mit Leben:<programlisting>require 'test_helper'

class UserTest &lt; ActiveSupport::TestCase

<emphasis>  test 'an empty user is not valid' do
    assert !User.new.valid?, 'Saved an empty user.'
  end
</emphasis>  
end
</programlisting></para>

      <para>Dieser Test überprüft, ob ein neu angelegter
      <classname>User</classname>, der keine Daten enthält, valide ist. Da
      <code>assert</code> nur auf <code>true</code> reagiert, habe ich vor
      <code>User.new.valid?</code> ein „<code>!</code>“ gesetzt, um aus dem
      <code>false</code> ein <code>true</code> zu machen, denn ein leerer User
      kann ja nicht valide sein.</para>

      <para>Ein <command>rake test:units</command> läuft dann auch direkt
      durch:<screen>MacBook:webshop xyz$ <command>rake test:units</command>
Run options: 

# Running tests:

.

Finished tests in 0.081926s, 12.2061 tests/s, 12.2061 assertions/s.

1 tests, 1 assertions, 0 failures, 0 errors, 0 skips
MacBook:webshop xyz$</screen></para>

      <para>Jetzt bauen wir zwei Asserts in einem Test ein, die überprüfen, ob
      die beiden Fixture-Einträge in der
      <filename>test/fixtures/users.yml</filename> auch valide
      sind:<programlisting>require 'test_helper'

class UserTest &lt; ActiveSupport::TestCase

  test 'an empty user is not valid' do
    assert !User.new.valid?, 'Saved an empty user.'
  end

<emphasis>  test "the two fixture users are valid" do
    assert User.new(last_name: users(:one).last_name, login_name: users(:one).login_name ).valid?, 'First fixture is not valid.'
    assert User.new(last_name: users(:two).last_name, login_name: users(:two).login_name ).valid?, 'Second fixture is not valid.'
  end
</emphasis>  
end
</programlisting></para>

      <para>Danach wieder ein <command>rake test:units</command>:<screen>MacBook:webshop xyz$ <command>rake test:units</command>
Run options: 

# Running tests:

..

Finished tests in 0.090001s, 22.2220 tests/s, 33.3330 assertions/s.

2 tests, 3 assertions, 0 failures, 0 errors, 0 skips
MacBook:webshop xyz$</screen></para>

      <para>Fügen wir jetzt noch Tests für einige andere
      <varname>login_name</varname> Varianten ein:<programlisting>require 'test_helper'

class UserTest &lt; ActiveSupport::TestCase

  test 'an empty user is not valid' do
    assert !User.new.valid?, 'Saved an empty user.'
  end

  test "the two fixture users are valid" do
    assert User.new(last_name: users(:one).last_name, login_name: users(:one).login_name ).valid?, 'First fixture is not valid.'
    assert User.new(last_name: users(:two).last_name, login_name: users(:two).login_name ).valid?, 'Second fixture is not valid.'
  end
  
<emphasis>  [
    'hans.meier',
    'hans-meier',
    'h-meier',
    'h_meier',
    'h.meier2',
  ].each do |valid_login_name|
    test "the login_name '#{valid_login_name}' is valid" do
      assert User.new(last_name: users(:one).last_name, login_name: valid_login_name ).valid?, "login_name '#{valid_login_name}' is not valid."
    end
  end</emphasis>
  
end
</programlisting></para>

      <para>Der Durchlauf der Test-Suite zeigt die Ergebnisse:<screen>MacBook:webshop xyz$ <command>rake test:units</command>
Run options: 

# Running tests:

.......

Finished tests in 0.090630s, 77.2371 tests/s, 88.2710 assertions/s.

7 tests, 8 assertions, 0 failures, 0 errors, 0 skips
MacBook:webshop xyz$  </screen></para>

      <para>Mit <command>rake test</command> könnten Sie jetzt wieder alle
      Tests durchlaufen lassen.</para>
    </section>
  </section>

  <section xml:id="testing_fixtures">
    <title xml:id="testing_fixtures.title">Fixtures</title>

    <indexterm>
      <primary>Tests</primary>

      <secondary>fixtures</secondary>
    </indexterm>

    <indexterm>
      <primary>Fixtures</primary>

      <see>Tests</see>
    </indexterm>

    <para>Mit <foreignphrase xml:lang="en">Fixtures</foreignphrase> werden
    Beispieldaten für Tests generiert. Das Default-Format dafür ist YAML. Die
    Dateien dafür finden sich im Verzeichnis
    <filename>test/fixtures/</filename> und werden mit <command>rails
    generate</command> automatisch mit erstellt. Sie können aber natürlich
    auch eigene Dateien definieren. Alle Fixtures werden per Default bei jedem
    Test neu in die Test-Datenbank geladen.<footnote>
        <para>Beispiele für Alternativformate (z. B. CSV) dazu finden Sie
        unter <link
        xlink:href="http://api.rubyonrails.org/classes/ActiveRecord/Fixtures.html">http://api.rubyonrails.org/classes/ActiveRecord/Fixtures.html</link>.</para>
      </footnote></para>

    <section xml:id="statische_fixtures">
      <title xml:id="statische_fixtures.title">Statische Fixtures</title>

      <indexterm>
        <primary>Fixtures</primary>

        <secondary>statisch</secondary>
      </indexterm>

      <para>Die einfachste Variante für Fixtures sind statische Daten. Das in
      <xref linkend="testing_beispiel_webshop"/> benutzte Fixture für
      <varname>User</varname> sieht statisch wie folgt aus:<programlisting>one:
  login_name: horst.meier
  last_name: Meier

two:
  login_name: emil.stein
  last_name: Stein
</programlisting></para>

      <para>Man schreibt die Daten einfach im YAML-Format in die entsprechende
      Datei.</para>
    </section>

    <section xml:id="fixtures_mit_erb">
      <title xml:id="fixtures_mit_erb.title">Fixtures mit ERB</title>

      <indexterm>
        <primary>Fixtures</primary>

        <secondary>mit ERB</secondary>
      </indexterm>

      <para>Statische YAML-Fixtures sind manchmal zu unintelligent. In diesen
      Fällen kann man mit ERB arbeiten (siehe <xref
      linkend="erb-programmieren"/>).</para>

      <para>Wenn wir für die Geburtstage dynamisch den heutigen Tag vor 20
      Jahren eintragen möchten, so können wir das einfach mit ERB
      realisieren:<programlisting>one:
  login_name: horst.meier
  last_name: Meier
  <emphasis>birthday: &lt;%= 20.years.ago.to_s(:db) %&gt;</emphasis>

two:
  login_name: emil.stein
  last_name: Stein
  <emphasis>birthday: &lt;%= 20.years.ago.to_s(:db) %&gt;</emphasis>
</programlisting></para>
    </section>
  </section>

  <section xml:id="integration_testing">
    <title xml:id="integration_testing.title">Integration Tests</title>

    <indexterm>
      <primary>Tests</primary>

      <secondary>Integration</secondary>
    </indexterm>

    <indexterm>
      <primary>Integration Tests</primary>

      <see>Tests</see>
    </indexterm>

    <para>Integration Tests sind Tests, die wie Functional Tests arbeiten,
    aber über mehrere Controller gehen können und zusätzlich auch den Inhalt
    eines generierten Views analysieren können. Man kann mit ihnen deshalb
    komplexe Workflows innerhalb der Rails-Applikation nachbilden. Als
    Beispiel werden wir einen Integration Test schreiben, der versucht über
    die Web-GUI einen neuen User anzulegen, aber dabei den
    <varname>login_name</varname> vergisst und deshalb entsprechende
    Flash-Fehler-Nachrichten erhält.</para>

    <para>Mit <command>rake generate scaffold</command> werden zwar Unit und
    Functional Tests generiert, aber keine Integration Tests. Dies können Sie
    entweder von Hand im Verzeichnis <filename>test/integration/</filename>
    oder bequemer mit <command>rails generate integration_test</command>
    machen. Legen wir mal einen Integration Test an:<screen>MacBook:webshop xyz$ <command>rails generate integration_test invalid_new_user_workflow</command>
      invoke  test_unit
      create    test/integration/invalid_new_user_workflow_test.rb
MacBook:webshop xyz$ </screen></para>

    <para>Diese Datei
    <filename>test/integration/invalid_new_user_workflow_test.rb</filename>
    füllen wir jetzt mit folgendem Test:<programlisting>require 'test_helper'

class InvalidNewUserWorkflowTest &lt; ActionDispatch::IntegrationTest

  fixtures :all

  test 'try to create a new empty user and check for flash error messages' do
    get '/users/new'
    assert_response :success

    post_via_redirect "/users", :last_name =&gt; "Oberhuber" 
    assert_equal '/users', path
    assert_select 'li', "Login name can't be blank"
    assert_select 'li', "Login name must include at least one of the special characters -_."
  end
end
</programlisting></para>

    <para>Der Zauber des Integration Tests liegt unter anderem in der Methode
    <methodname>post_via_redirect,</methodname> mit der Sie nach einem Post im
    Test weitermachen können. Diese Methode steht Ihnen nur innerhalb eines
    Integration Tests zur Verfügung.</para>

    <para>Alle Integration Tests lassen sich mit <command>rake
    test:integration</command> ausführen. Machen wird das mal:<screen>MacBook:webshop xyz$ <command>rake test:integration</command>
Run options: 

# Running tests:

.

Finished tests in 0.238591s, 4.1913 tests/s, 16.7651 assertions/s.

1 tests, 4 assertions, 0 failures, 0 errors, 0 skips
MacBook:webshop xyz$</screen></para>

    <para>Das Beispiel zeigt deutlich, dass man vieles ohne den manuellen
    Einsatz eines Webbrowsers zum Ausprobieren programmieren kann. Hat man
    erst einmal einen Test für den entsprechenden Workflow geschrieben, kann
    man sich in Zukunft darauf verlassen, dass dies auch so durchläuft und
    muss es nicht immer noch von Hand am Browser ausprobieren.</para>
  </section>

  <section xml:id="rake_stats">
    <title xml:id="rake_stats.title">rake stats</title>

    <indexterm>
      <primary>rake stats</primary>
    </indexterm>

    <para>Mit <command>rake stats</command> bekommen Sie eine Übersicht über
    Ihr Rails-Projekt. Für unser Beispiel sieht es so aus:<screen>MacBook:webshop xyz$ rake stats
+----------------------+-------+-------+---------+---------+-----+-------+
| Name                 | Lines |   LOC | Classes | Methods | M/C | LOC/M |
+----------------------+-------+-------+---------+---------+-----+-------+
| Controllers          |    86 |    61 |       2 |       7 |   3 |     6 |
| Helpers              |     4 |     4 |       0 |       0 |   0 |     0 |
| Models               |    14 |    11 |       1 |       0 |   0 |     0 |
| Libraries            |     0 |     0 |       0 |       0 |   0 |     0 |
| Integration tests    |    16 |    12 |       1 |       0 |   0 |     0 |
| Functional tests     |    49 |    39 |       1 |       0 |   0 |     0 |
| Unit tests           |    30 |    24 |       2 |       0 |   0 |     0 |
+----------------------+-------+-------+---------+---------+-----+-------+
| Total                |   199 |   151 |       7 |       7 |   1 |    19 |
+----------------------+-------+-------+---------+---------+-----+-------+
  Code LOC: 76     Test LOC: 75     Code to Test Ratio: 1:1.0

MacBook:webshop xyz$</screen></para>

    <para>Wir haben in diesem Projekt in Summe 76 LOC (Lines Of Code =&gt;
    Programmzeilen) in den Controllern, Helpern und Modelen. Zusätzlich haben
    wir insgesammt 75 LOC für Tests. Damit kommen wir auf eine Code zu Test
    Relation von 1:1.0, was das prinzipielle Ziel sein sollte. Logischweise
    sagt dies nichts über die Qualität von Tests aus.</para>
  </section>

  <section xml:id="mehr_zum_thema_testing">
    <title xml:id="mehr_zum_thema_testing.title">Mehr zum Thema
    Testing</title>

    <para>Der wichtigste Link zum Thema Testing ist sicherlich die URL <link
    xlink:href="http://guides.rubyonrails.org/testing.html">http://guides.rubyonrails.org/testing.html</link>.
    Dort finden Sie auch einige gute Beispiele zum Thema. An sonsten finden
    Sie wie so oft bei Railscasts (<uri
    xlink:href="http://railscasts.com/episodes?utf8=%E2%9C%93&amp;search=test">http://railscasts.com/episodes?utf8=%E2%9C%93&amp;search=test</uri>)
    ein paar gute Screencasts zu diesem Thema. </para>

    <para>Bei keinem anderen Thema gibt es in der Rails-Community so viel
    Diskussion wie beim Thema Testing. Es gibt sehr viele alternative
    Test-Tools. Ein sehr populäres ist RSpec (siehe <link
    xlink:href="http://rspec.info/">http://rspec.info/</link>). Ich bespreche
    an dieser Stelle mit Absicht diese Alternativen nicht, da es mir in diesem
    Buch um das Verständnis von Rails geht und nicht um die Abertausend
    Extra-Tools, mit denen man sich seine persönliche
    Rails-Entwicklungsumgebung bauen kann.</para>
  </section>
</chapter>
