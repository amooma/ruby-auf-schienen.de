<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xml:id="activerecord_datensatz_veraendern"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title xml:id="activerecord_datensatz_veraendern.title">Einen Datensatz
  verändern</title>

  <para>Daten hinzufügen ist ja schon ganz nett, aber hin und wieder will man
  ja auch einen Datensatz editieren. Wir benutzen zur Beschreibung die
  Album-Datenbank aus <xref linkend="queries" />.</para>

  <section xml:id="activerecord_einfaches_editieren">
    <title xml:id="activerecord_einfaches_editieren.title">Einfaches
    Editieren</title>

    <para>Das einfache Editieren eines Datensatzes geschieht in folgenden
    Schritten:<orderedlist>
        <listitem>
          <para>Suche des Datensatzes und Erstellen einer entsprechenden
          Instanz</para>
        </listitem>

        <listitem>
          <para>Verändern der Werte</para>
        </listitem>

        <listitem>
          <para>Abspeichern des Datensatzes mit der Methode <indexterm>
              <primary>ActiveRecord</primary>

              <secondary>Methoden</secondary>

              <tertiary>save()</tertiary>
            </indexterm><methodname>save</methodname></para>
        </listitem>
      </orderedlist></para>

    <para>Wir suchen uns jetzt das Album namens <quote>The Beatles</quote> und
    verändern den Namen in <quote>Ein Test</quote>:<screen>MacBook:jukebox xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.3)
1.9.3p194 :001 &gt; <command>album = Album.where(:name =&gt; 'The Beatles').first</command>
  Album Load (0.6ms)  SELECT "albums".* FROM "albums" WHERE "albums"."name" = 'The Beatles' LIMIT 1
 =&gt; #&lt;Album id: 10, name: "The Beatles", release_year: 1968, created_at: "2012-04-30 14:51:03", updated_at: "2012-04-30 14:51:03"&gt; 
1.9.3p194 :002 &gt; <command>album.name</command>
 =&gt; "The Beatles" 
1.9.3p194 :003 &gt; <command>album.name = 'Ein Test'</command>
 =&gt; "Ein Test" 
1.9.3p194 :004 &gt; <command>album.save</command>
   (0.1ms)  begin transaction
   (0.5ms)  UPDATE "albums" SET "name" = 'Ein Test', "updated_at" = '2012-05-06 13:04:54.261940' WHERE "albums"."id" = 10
   (1.7ms)  commit transaction
 =&gt; true 
1.9.3p194 :005 &gt; <command>Album.last</command>
  Album Load (0.3ms)  SELECT "albums".* FROM "albums" ORDER BY "albums"."id" DESC LIMIT 1
 =&gt; #&lt;Album id: 10, name: "Ein Test", release_year: 1968, created_at: "2012-04-30 14:51:03", updated_at: "2012-05-06 13:04:54"&gt; 
1.9.3p194 :006 &gt; <command>exit</command>
MacBook:jukebox xyz$  </screen></para>
  </section>

  <section xml:id="activerecord_changed">
    <title xml:id="activerecord_changed.title">changed?</title>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>Methoden</secondary>

      <tertiary>changed?()</tertiary>
    </indexterm>

    <para>Wenn man sich nicht sicher ist, ob ein Datensatz verändert und noch
    nicht abgespeichert wurde, dann kann man dies mit der
    <methodname>changed?</methodname>-Methode herausfinden:<screen>MacBook:jukebox xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.3)
1.9.3p194 :001 &gt; <command>album = Album.last</command>
  Album Load (0.2ms)  SELECT "albums".* FROM "albums" ORDER BY "albums"."id" DESC LIMIT 1
 =&gt; #&lt;Album id: 10, name: "Ein Test", release_year: 1968, created_at: "2012-04-30 14:51:03", updated_at: "2012-05-06 13:04:54"&gt; 
1.9.3p194 :002 &gt; <command>album.changed?</command>
 =&gt; false 
1.9.3p194 :003 &gt; <command>album.name = 'The Beatles'</command>
 =&gt; "The Beatles" 
1.9.3p194 :004 &gt; <command>album.changed?</command>
 =&gt; true 
1.9.3p194 :005 &gt; <command>album.save</command>
   (0.1ms)  begin transaction
   (0.5ms)  UPDATE "albums" SET "name" = 'The Beatles', "updated_at" = '2012-05-06 13:06:24.359737' WHERE "albums"."id" = 10
   (3.5ms)  commit transaction
 =&gt; true 
1.9.3p194 :006 &gt; <command>album.changed?</command>
 =&gt; false 
1.9.3p194 :007 &gt; <command>exit</command>
MacBook:jukebox xyz$</screen></para>
  </section>

  <section xml:id="activerecord_update_attributes">
    <title
    xml:id="activerecord_update_attributes.title">update_attributes</title>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>Methoden</secondary>

      <tertiary>update_attributes()</tertiary>
    </indexterm>

    <para>Mit der Methode <methodname>update_attributes</methodname> kann man
    verschiedene Attribute eines Objektes auf einmal ändern und danach
    automatisch direkt speichern.</para>

    <para>Setzen wir damit das Beispiel von <xref
    linkend="activerecord_einfaches_editieren" /> um:<screen>MacBook:jukebox xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.3)
1.9.3p194 :001 &gt; <command>album = Album.last</command>
  Album Load (0.2ms)  SELECT "albums".* FROM "albums" ORDER BY "albums"."id" DESC LIMIT 1
 =&gt; #&lt;Album id: 10, name: "The Beatles", release_year: 1968, created_at: "2012-04-30 14:51:03", updated_at: "2012-05-06 13:06:24"&gt; 
1.9.3p194 :002 &gt; <command>album.changed?</command>
 =&gt; false 
1.9.3p194 :003 &gt; <command>album.update_attributes(:name =&gt; 'Noch ein Test')</command>
   (0.1ms)  begin transaction
   (0.5ms)  UPDATE "albums" SET "name" = 'Noch ein Test', "updated_at" = '2012-05-06 13:08:21.064466' WHERE "albums"."id" = 10
   (3.8ms)  commit transaction
 =&gt; true 
1.9.3p194 :004 &gt; <command>album.changed?</command>
 =&gt; false 
1.9.3p194 :005 &gt; <command>Album.last</command>
  Album Load (0.3ms)  SELECT "albums".* FROM "albums" ORDER BY "albums"."id" DESC LIMIT 1
 =&gt; #&lt;Album id: 10, name: "Noch ein Test", release_year: 1968, created_at: "2012-04-30 14:51:03", updated_at: "2012-05-06 13:08:21"&gt; 
1.9.3p194 :006 &gt; <command>exit</command>
MacBook:jukebox xyz$</screen></para>

    <para>Ein solches Update lässt sich auch direkt an eine
    <methodname>where</methodname>-Methode anknüpfen und ist dann fast
    atomar:<screen>MacBook:jukebox xyz$ <command>rails console</command>
Loading development environment (Rails 3.2.3)
1.9.3p194 :001 &gt; <command>Album.where(:name =&gt; 'Noch ein Test').first.update_attributes(:name =&gt; 'The Beatles')</command>
  Album Load (0.2ms)  SELECT "albums".* FROM "albums" WHERE "albums"."name" = 'Noch ein Test' LIMIT 1
   (0.1ms)  begin transaction
   (0.4ms)  UPDATE "albums" SET "name" = 'The Beatles', "updated_at" = '2012-05-06 13:13:11.870462' WHERE "albums"."id" = 10
   (3.8ms)  commit transaction
 =&gt; true 
1.9.3p194 :002 &gt; <command>Album.last</command>
  Album Load (0.3ms)  SELECT "albums".* FROM "albums" ORDER BY "albums"."id" DESC LIMIT 1
 =&gt; #&lt;Album id: 10, name: "The Beatles", release_year: 1968, created_at: "2012-04-30 14:51:03", updated_at: "2012-05-06 13:13:11"&gt; 
1.9.3p194 :003 &gt; <command>exit</command>
MacBook:jukebox xyz$</screen></para>
  </section>

  <section xml:id="activerecord_locking">
    <title xml:id="activerecord_locking.title">Locking</title>

    <indexterm>
      <primary>ActiveRecord</primary>

      <secondary>Locking</secondary>
    </indexterm>

    <para>Per Default benutzt Rails sogenanntes <quote>optimistisches
    Locking</quote> (<foreignphrase xml:lang="en">optimistic
    Locking</foreignphrase>) der Datensätze. Dies kann aber umgeschaltet
    werden. Da für die meisten Anwender optimistisches Locking optimal ist und
    viele vor diesem Absatz nicht mal über das Problem nachgedacht haben,
    werde ich nicht weiter darauf eingehen, sondern auf die
    <literal>ri</literal>-Hilfe verweisen. Wer pessimistisches Locking
    benötigt, der findet dort die notwendigen Parameter.</para>

    <para><screen>MacBook:jukebox xyz$ <command>ri -T ActiveRecord::Locking::Optimistic</command>
ActiveRecord::Locking::Optimistic

(from gem activerecord-3.2.3)
------------------------------------------------------------------------------
What is Optimistic Locking

Optimistic locking allows multiple users to access the same record for edits,
and assumes a minimum of conflicts with the data. It does this by checking
whether another process has made changes to a record since it was opened, an
ActiveRecord::StaleObjectError exception is thrown if that has occurred
and the update is ignored.

Check out ActiveRecord::Locking::Pessimistic for an alternative.

Usage

Active Records support optimistic locking if the field lock_version is
present. Each update to the record increments the lock_version column
and the locking facilities ensure that records instantiated twice will let the
last one saved raise a StaleObjectError if the first was also updated.
Example:

  p1 = Person.find(1)
  p2 = Person.find(1)

  p1.first_name = "Michael"
  p1.save

  p2.first_name = "should fail"
  p2.save # Raises a ActiveRecord::StaleObjectError

Optimistic locking will also check for stale data when objects are destroyed.
Example:

  p1 = Person.find(1)
  p2 = Person.find(1)

  p1.first_name = "Michael"
  p1.save

  p2.destroy # Raises a ActiveRecord::StaleObjectError

You're then responsible for dealing with the conflict by rescuing the
exception and either rolling back, merging, or otherwise apply the business
logic needed to resolve the conflict.

This locking mechanism will function inside a single Ruby process. To make it
work across all web requests, the recommended approach is to add
lock_version as a hidden field to your form.

You must ensure that your database schema defaults the lock_version
column to 0.

This behavior can be turned off by setting
ActiveRecord::Base.lock_optimistically = false. To override the name of
the lock_version column, invoke the set_locking_column method.
This method uses the same syntax as set_table_name
------------------------------------------------------------------------------
MacBook:jukebox xyz$</screen></para>
  </section>
</section>
