<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="javascript"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title xml:id="javascript.title">JavaScript</title>

  <indexterm>
    <primary>JavaScript</primary>
  </indexterm>

  <section xml:id="javascript_einleitung">
    <title xml:id="javascript_einleitung.title">Einleitung</title>

    <para>In diesem Kapitel geht es nicht darum JavaScript zu erklären. Es
    geht darum, einem Rails-Programmierer zu zeigen wie er JavaScript
    innerhalb einer Rails-Applikation einbauen kann. Entsprechend gehen die
    Beispiele nicht detailiert auf JavaScript ein. Ich gehe davon aus, das Sie
    JavaScript lesen und verstehen können. An sonsten lieber das Kapitel
    überspringen. Man kann auch ohne JavaScript glücklich werden.</para>

    <section xml:id="jquery">
      <title xml:id="jquery.title">jQuery</title>

      <para>Rails 3.2 setzt per Default auf die jQuery-Javascript Bibliothek
      (<uri xlink:href="http://jquery.com/">http://jquery.com/</uri>). Wenn
      Sie diese Bibliothek nicht benötigen, so sollten Sie innerhalb der Asset
      Pipeline (siehe <xref linkend="asset_pipeline"/>) die folgenden Einträge
      aus der <filename>app/assets/javascripts/application.js</filename>
      löschen:<programlisting>//= require jquery
//= require jquery_ujs</programlisting></para>

      <para>Mit jQuery können Sie relativ leicht Animationen und Ajax
      Interaktionen auf Ihren Webseiten realisieren.</para>

      <para>Einen guten Einstieg finden Sie in der jQuery Dokumenation unter
      <uri
      xlink:href="http://docs.jquery.com/Main_Page">http://docs.jquery.com/Main_Page</uri></para>
    </section>

    <section xml:id="coffeescript">
      <title xml:id="coffeescript.title">CoffeeScript</title>

      <para>Für viele Rails-Entwickler ist CoffeeScript die beste Erfindung
      seit der Einführung des geschnittenen Brotes. CoffeeScript ist eine
      einfache Programmiersprache die mit der Asset Pipeline in JavaScript
      konvertiert wird. Ich werde in diesem Kapitel JavaScript und
      CoffeeScript benutzen. Wenn Sie mehr Informationen zu CoffeeScript
      benötigen, so empfehle ich Ihnen die CoffeeScript Doku unter <uri
      xlink:href="http://jashkenas.github.com/coffee-script/">http://jashkenas.github.com/coffee-script/</uri>
      und wie so oft gibt es auch für CoffeeScript einen sehr guten Railscast
      unter <uri
      xlink:href="http://railscasts.com/episodes/267-coffeescript-basics">http://railscasts.com/episodes/267-coffeescript-basics</uri></para>
    </section>
  </section>

  <section xml:id="javascript_helper">
    <title xml:id="javascript_helper.title">JavaScript Helper</title>

    <para>Für die Benutzung von JavaScript im View gibt es ein paar praktische
    Helper.</para>

    <section xml:id="javascript_tag">
      <title xml:id="javascript_tag.title">javascript_tag</title>

      <indexterm>
        <primary>javascript_tag</primary>
      </indexterm>

      <para>Die einfachste Variante JavaScript in einem View zu benutzen ist
      <code>javascript_tag</code>.</para>

      <para>Mit der folgenden Zeile im View können Sie einen Alert beim Aufruf
      der Seite ausführen:</para>

      <para><programlisting><emphasis>&lt;%= javascript_tag "alert('Ein sinnfreies Beispiel.')" %&gt;</emphasis></programlisting></para>

      <para>Der generierte HTML-Code:<programlisting>&lt;script type="text/javascript"&gt;
//&lt;![CDATA[
alert('Ein sinnfreies Beispiel.')
//]]&gt;
&lt;/script&gt;</programlisting></para>
    </section>

    <section xml:id="link_to_function">
      <title xml:id="link_to_function.title">link_to_function</title>

      <indexterm>
        <primary>link_to_function</primary>
      </indexterm>

      <para>Der Helper <code>link_to_function</code> erstellt einen Link,
      dessen <code>onclick</code> Handler ein JavaScript ausführt.</para>

      <para>Auch hier wieder das Beispiel mit dem Alert. Der ERB Code im View
      sieht so aus:<programlisting>&lt;%= link_to_function "Alert auslösen", "alert('Ein sinnfreies Beispiel.')" %&gt;
</programlisting></para>

      <para>Der generierte HTML-Code:<programlisting>&lt;a href="#" onclick="alert('Ein sinnfreies Beispiel.'); return false;"&gt;Alert auslösen&lt;/a&gt;
</programlisting></para>
    </section>

    <section xml:id="button_to_function">
      <title xml:id="button_to_function.title">button_to_function</title>

      <indexterm>
        <primary>button_to_function</primary>
      </indexterm>

      <para>Der Helper <code>button_to_function</code> erstellt einen Button,
      dessen <code>onclick</code> Handler ein JavaScript ausführt.</para>

      <para>Auch hier wieder das Beispiel mit dem Alert. Der ERB Code im View
      sieht so aus:<programlisting>&lt;%= button_to_function "Alert auslösen", "alert('Ein sinnfreies Beispiel.')" %&gt;
</programlisting></para>

      <para>Der generierte HTML-Code:<programlisting>&lt;input onclick="alert('Ein sinnfreies Beispiel.');" type="button" value="Alert auslösen" /&gt;
</programlisting></para>
    </section>
  </section>

  <section xml:id="javascript_in_der_asset_pipeline">
    <title xml:id="javascript_in_der_asset_pipeline.title">JavaScript und
    CoffeeScript in der Asset Pipeline</title>

    <para>Die Vorgehensweise mit JavaScript und der Asset Pipeline in einem
    Rails-Projekt zu programmieren lässt sich am besten an einem kleinen
    Beispiel erklären. Wie immer geht es dabei nicht um die Sinnhaftigkeit der
    Applikation. ;-)</para>

    <section xml:id="javascript_formular_veraendern_beispiel">
      <title xml:id="javascript_formular_veraendern_beispiel.title">Formular
      abhängig von Eingaben verändern</title>

      <para>Bauen wir eine Zimmerreservierung, in der man ein Einzel- oder ein
      Doppelzimmer buchen kann und dann im gleichen Formular entweder einen
      oder zwei Gästenamen eingeben muss. Das Grundgerüst:<screen>Stefan-Wintermeyers-MacBook-Air:~ xyz$ <command>rails new hotel</command>
[...]
Stefan-Wintermeyers-MacBook-Air:~ xyz$ <command>cd hotel</command> 
Stefan-Wintermeyers-MacBook-Air:hotel xyz$ <command>rails generate scaffold reservation start:date end:date room_type:string guest_name1 guest_name2</command>
[...]
Stefan-Wintermeyers-MacBook-Air:hotel xyz$ <command>rake db:migrate</command>
[...]
Stefan-Wintermeyers-MacBook-Air:hotel xyz$</screen></para>

      <para>Ziel soll es sein, das beim Aufruf von <uri
      xlink:href="http://0.0.0.0:3000/reservations/new">http://0.0.0.0:3000/reservations/new</uri>
      die folgende Seite angezeigt wird:</para>

      <screenshot>
        <info>
          <title>Formular mit einem Einzelzimmer</title>
        </info>

        <mediaobject>
          <imageobject>
            <imagedata fileref="screenshots/hotel_einzelzimmer_form.jpg"/>
          </imageobject>
        </mediaobject>
      </screenshot>

      <para>Sobald der User anstatt Einzelzimmer ein Doppelzimmer auswählt,
      soll ein zweites Namesfeld erscheinen:</para>

      <screenshot>
        <info>
          <title>Formular mit einem Doppelzimmer</title>
        </info>

        <mediaobject>
          <imageobject>
            <imagedata fileref="screenshots/hotel_doppelzimmer_form.jpg"/>
          </imageobject>
        </mediaobject>
      </screenshot>

      <para>Dazu verändere ich in der
      <filename>app/views/reservations/_form.html.erb</filename> zwei
      Sachen:<itemizedlist>
          <listitem>
            <para>Den <varname>room_type</varname> frage ich per
            <code/></para>

            <para><code>f.select(:room_type,
            options_for_select(['Einzelzimmer',
            'Doppelzimmer']))</code></para>

            <para>ab.</para>
          </listitem>

          <listitem>
            <para>Im div Element um den zweiten Namen setze ich</para>

            <para>mit</para>

            <para><code>&lt;div class="field"
            id='second_name'&gt;</code></para>

            <para>eine ID.</para>
          </listitem>
        </itemizedlist></para>

      <para>Hier ist der gesamte Code zum Formular:<programlisting>&lt;%= form_for(@reservation) do |f| %&gt;
  &lt;% if @reservation.errors.any? %&gt;
    &lt;div id="error_explanation"&gt;
      &lt;h2&gt;&lt;%= pluralize(@reservation.errors.count, "error") %&gt; prohibited this reservation from being saved:&lt;/h2&gt;

      &lt;ul&gt;
      &lt;% @reservation.errors.full_messages.each do |msg| %&gt;
        &lt;li&gt;&lt;%= msg %&gt;&lt;/li&gt;
      &lt;% end %&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;% end %&gt;

  &lt;div class="field"&gt;
    &lt;%= f.label :start %&gt;&lt;br /&gt;
    &lt;%= f.date_select :start %&gt;
  &lt;/div&gt;
  &lt;div class="field"&gt;
    &lt;%= f.label :end %&gt;&lt;br /&gt;
    &lt;%= f.date_select :end %&gt;
  &lt;/div&gt;
  &lt;div class="field"&gt;
    &lt;%= f.label :room_type %&gt;&lt;br /&gt;
    <emphasis>&lt;%= f.select(:room_type, options_for_select(['Einzelzimmer', 'Doppelzimmer'])) %&gt;</emphasis>
  &lt;/div&gt;
  &lt;div class="field"&gt;
    &lt;%= f.label :guest_name1 %&gt;&lt;br /&gt;
    &lt;%= f.text_field :guest_name1 %&gt;
  &lt;/div&gt;
  <emphasis>&lt;div class="field" id='second_name'&gt;</emphasis>
    &lt;%= f.label :guest_name2 %&gt;&lt;br /&gt;
    &lt;%= f.text_field :guest_name2 %&gt;
  &lt;/div&gt;
  &lt;div class="actions"&gt;
    &lt;%= f.submit %&gt;
  &lt;/div&gt;
&lt;% end %&gt;
</programlisting></para>

      <para>In die
      <filename>app/assets/javascripts/reservations.js.coffee</filename>
      definiere ich den CoffeeScript Code, der das Element mit der ID
      <varname>second_name</varname> je nach Inhalt von
      <varname>reservation_room_type</varname> sichtbar (<code>show</code>)
      oder unsichtbar (<code>hide</code>) schaltet:<programlisting>jQuery -&gt;
  $('#second_name').hide()
  $('#reservation_room_type').change -&gt;
    room_type = $('#reservation_room_type :selected').text()
    if room_type == 'Einzelzimmer'
      $('#second_name').hide()
    else
      $('#second_name').show()</programlisting></para>

      <note>
        <para>In der Realität würde man sicherlich die Gästenamen in einer 1:n
        has_many Verknüpfung einbinden, aber in diesem Beispiel ging es ja nur
        darum zu sehen wie man den Inhalt eines Formulares per JavaScript
        verändern kann.</para>
      </note>
    </section>
  </section>
</chapter>
