<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="cookies_und_sessions"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title xml:id="cookies_und_sessions.title">Cookies und Sessions</title>

  <section xml:id="cookies">
    <title xml:id="cookies.title">Cookies</title>

    <para>Mit einem Cookie kann man auf dem System des Webbrowsers
    Informationen speichern, die der Webserver vorher an diesen Browser
    geschickt hat. Die Informationen werden später im
    Hypertext-Transfer-Protocol-Header wieder vom Browser an den Server
    geschickt. Ein Cookie wird dabei auf dem Browsersystem weder durch einen
    Neustart des Browsers noch durch einen Neustart des ganzen Systems
    gelöscht. Natürlich kann der User des Browsers den Cookie aber manuell
    löschen. </para>

    <para><important>
        <para>Ein Browser muss keine Cookies akzeptieren und er muss sie auch
        nicht speichern. Allerdings leben wir in einer Welt, in der fast jede
        Seite Cookies benutzt. Deshalb haben die meisten User die
        Cookiefunktinalität aktiviert. Mehr Informationen zum Thema Cookie
        finden sie auf Wikipedia unter <uri
        xlink:href="http://de.wikipedia.org/wiki/HTTP-Cookie">http://de.wikipedia.org/wiki/HTTP-Cookie</uri></para>
      </important><tip>
        <para>Ein Cookie kann nicht beliebig lang sein. Man muss sich dabei
        auch immer vor Augen halten, das die Informationen der gespeicherten
        Cookies immer vom Browser an den Server geschickt werden. Er sollte
        nur zur Speicherung von kleinen Datenmengen (z.B. einer Kundennummer)
        eingesetzt werden, um den Overhead im Protokoll nicht zu gross werden
        zu lassen.</para>
      </tip>Um die Arbeitsweise mit Cookies zu veranschaulichen, bauen wir uns
    jetzt eine Rails-Applikation, die auf einer Seite einen Cookie setzt, auf
    einer anderen Seite diesen Cookie ausliesst und den Inhalt anzeigt und
    einer dritten Seite die den Cookie wieder löscht.</para>

    <para><screen>Stefan-Wintermeyers-MacBook-Air:~ stefan$ <command>rails new cookie_jar</command>
[...]
Stefan-Wintermeyers-MacBook-Air:~ stefan$ <command>cd cookie_jar</command>
Stefan-Wintermeyers-MacBook-Air:cookie_jar stefan$ <command>bundle install</command>
[...]
Stefan-Wintermeyers-MacBook-Air:cookie_jar stefan$</screen></para>

    <para></para>

    <para></para>

    <para></para>

    <para></para>
  </section>
</chapter>
