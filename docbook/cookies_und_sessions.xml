<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="cookies_und_sessions"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title xml:id="cookies_und_sessions.title">Cookies und Sessions</title>

  <section xml:id="cookies">
    <title xml:id="cookies.title">Cookies</title>

    <para>Mit einem Cookie kann man auf dem System des Webbrowsers
    Informationen in Form von Strings als Key-Value-Paar speichern, die der
    Webserver vorher an diesen Browser geschickt hat. Die Informationen werden
    später im Hypertext-Transfer-Protocol-Header wieder vom Browser an den
    Server geschickt. Ein Cookie wird dabei auf dem Browsersystem weder durch
    einen Neustart des Browsers noch durch einen Neustart des ganzen Systems
    gelöscht. Natürlich kann der User des Browsers den Cookie aber manuell
    löschen.</para>

    <para><important>
        <para>Ein Browser muss keine Cookies akzeptieren und er muss sie auch
        nicht speichern. Allerdings leben wir in einer Welt, in der fast jede
        Seite Cookies benutzt. Deshalb haben die meisten User die
        Cookiefunktinalität aktiviert. Mehr Informationen zum Thema Cookie
        finden sie auf Wikipedia unter <uri
        xlink:href="http://de.wikipedia.org/wiki/HTTP-Cookie">http://de.wikipedia.org/wiki/HTTP-Cookie</uri></para>
      </important><tip>
        <para>Ein Cookie kann nicht beliebig lang sein (maximal 4kB). Man muss
        sich dabei auch immer vor Augen halten, das die Informationen der
        gespeicherten Cookies immer vom Browser an den Server geschickt
        werden. Er sollte nur zur Speicherung von kleinen Datenmengen (z.B.
        einer Kundennummer) eingesetzt werden, um den Overhead im Protokoll
        nicht zu gross werden zu lassen.</para>
      </tip></para>

    <para>Cookies werden gelesen und gesetzt wie wir es mit einem Hash der
    <varname>cookies[]</varname> heißt machen würden. Um den technischen
    Kleinkram kümmert sich dann Rails.</para>

    <para>Um die Arbeitsweise mit Cookies zu veranschaulichen, bauen wir uns
    eine Rails-Applikation, die auf einer Seite einen Cookie setzt, auf einer
    anderen Seite diesen Cookie ausliesst und den Inhalt anzeigt und einer
    dritten Seite die den Cookie wieder löscht.</para>

    <para><screen>Stefan-Wintermeyers-MacBook-Air:~ stefan$ <command>rails new cookie_jar</command>
[...]
Stefan-Wintermeyers-MacBook-Air:~ stefan$ <command>cd cookie_jar</command>
Stefan-Wintermeyers-MacBook-Air:cookie_jar stefan$ <command>bundle install</command>
[...]
Stefan-Wintermeyers-MacBook-Air:cookie_jar stefan$ <command>rails generate controller Home set_cookies show_cookies delete_cookies</command>
[...]
Stefan-Wintermeyers-MacBook-Air:cookie_jar stefan$</screen></para>

    <para>Die Controllerdatei
    <filename>app/controllers/home_controller.rb</filename> befüllen wir wie
    folgt:<programlisting>class HomeController &lt; ApplicationController
  def set_cookies
    cookies[:user_name] = "Horst Meier" 
    cookies[:kundenummer] = "1234567890" 
  end

  def show_cookies
    @user_name = cookies[:user_name]
    @kundennummer = cookies[:kundenummer]
  end

  def delete_cookies
    cookies.delete :user_name
    cookies.delete :kundenummer
  end
end</programlisting></para>

    <para>Und die View Datei
    <filename>app/views/home/show_cookies.html.erb</filename>
    so:<programlisting>&lt;h1&gt;Home#show_cookies&lt;/h1&gt;
&lt;p&gt;Find me in app/views/home/show_cookies.html.erb&lt;/p&gt;

&lt;table&gt;
 &lt;tr&gt;&lt;td&gt;User-Name&lt;/td&gt;&lt;td&gt;&lt;%= @user_name %&gt;&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;Kundennummer&lt;/td&gt;&lt;td&gt;&lt;%= @kundennummer %&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;</programlisting></para>

    <para>Starten Sie den Rails-Server mit <command>rails server</command> und
    öffnen Sie die URL <uri
    xlink:href="http://0.0.0.0:3000/home/show_cookies">http://0.0.0.0:3000/home/show_cookies</uri>
    in Ihrem Browser. Sie werden keine Werte angezeigt bekommen. Öffnen Sie
    jetzt die URL <uri
    xlink:href="http://0.0.0.0:3000/home/set_cookies">http://0.0.0.0:3000/home/set_cookies</uri>
    und danach wieder <uri
    xlink:href="http://0.0.0.0:3000/home/show_cookies">http://0.0.0.0:3000/home/show_cookies</uri>.
    Jetzt bekommen Sie die Werte, die wir in der
    <methodname>set_cookies</methodname> Methode gesetzt haben
    angezeigt.</para>

    <para>Mit dem Aufruf der Seite <uri
    xlink:href="http://0.0.0.0:3000/home/delete_cookies">http://0.0.0.0:3000/home/delete_cookies</uri>
    können Sie die Cookies wieder löschen.</para>

    <para>Die so gesetzten Cookies leben auf dem Browser so lange bis der
    Browser ganz geschlossen wird.</para>

    <warning>
      <para>Der Inhalt eines normal gesetzten Cookies im Browser ist für den
      User problemlos und einfach zu lesen. Er wird nicht verschlüsselt und
      sollte deshalb keine Passwörter oder ähnliche Daten enthalten. Es ist
      auch nicht ratsam einen Warenkorb in einem unsignierten (siehe <xref
      linkend="cookies_signed" />) Cookie zu speichern, da sonst der User
      selber Preise in diesem Warenkorb ändern könnte.</para>
    </warning>

    <section xml:id="cookies_permanent">
      <title xml:id="cookies_permanent.title">permanent Cookies</title>

      <para>Cookies werden normalerweise gesetzt, um der Applikation eine
      Möglichkeit zu geben User bei späteren Besuchen wieder zu erkennen oder
      Einkaufskörbe zu speichern. Zwischen diesen Besuchen der Website kann
      viel Zeit ins Land gehen und der Browser auch mal vom User geschlossen
      werden. Um Cookies länger als für die aktuelle Browser-Sitzung zu
      speichern, gibt es die <methodname>permanent</methodname> Methode. Unser
      obiges Beispiel können wir in der
      <filename>app/controllers/home_controller.rb</filename> um diese Methode
      erweitern:<programlisting>class HomeController &lt; ApplicationController
  def set_cookies
<emphasis>    cookies.permanent[:user_name] = "Horst Meier" 
    cookies.permanent[:kundenummer] = "1234567890" </emphasis>
  end

  def show_cookies
    @user_name = cookies[:user_name]
    @kundennummer = cookies[:kundenummer]
  end

  def delete_cookies
    cookies.delete :user_name
    cookies.delete :kundenummer
  end

  def debug_cookies
  end
end
</programlisting></para>

      <important>
        <para>"permanent" heißt hier nicht wirklich permanent. Man kann einen
        Cookie nicht permanent setzen. Ein Cookie braucht beim Setzen immer
        einen "gültig bis" Stempel, den der Browser dazu benutzen kann alte
        Cookies automatisch zu löschen. Mit der permanent Methode wird dieser
        Wert auf das heutige Datum in 20 Jahren gesetzt. Das ist praktisch mit
        permanent gleich zu setzen.</para>
      </important>
    </section>

    <section xml:id="cookies_signed">
      <title xml:id="cookies_signed.title">signed Cookies</title>

      <para>Bei normal gesetzten Cookies hat man auf Applikationsseite keine
      Möglichkeit rauszufinden, ob der User der Applikation den Cookie
      eigenhändig geändert hat. Das kann schnell zu einem Sicherheitsproblem
      führen, den Inhalt eines Cookie im Browser zu ändern ist kein
      Zauberwerk. Die Lösung ist eine Signierung der Cookies mit einem nur mir
      bekannten Key. Dieser Key wird bei einem <command>rails new</command>
      automatisch per Zufallsgenerator erzeugt und liegt in der Datei
      <filename>config/initializers/secret_token.rb</filename>:<programlisting># Be sure to restart your server when you modify this file.

# Your secret key for verifying the integrity of signed cookies.
# If you change this key, all old signed cookies will become invalid!
# Make sure the secret is at least 30 characters and all random,
# no regular words or you'll be exposed to dictionary attacks.
CookieJar::Application.config.secret_token = 'd06619d4de97e76be4943624afed'
</programlisting></para>

      <para><warning>
          <para>Sollten Sie Ihre Rails-Applikation irgendwann mal neu
          aufsetzen und wieder mit einem frischen Rails-Projekt anfangen, so
          ist es hilfreich diesen Key in die neue Rails-Applikation zu
          übertragen. Sonst können Sie die vorher gesetzten Cookies nicht mehr
          benutzen!</para>
        </warning>Um Cookies zu signieren, gibt es die
      <methodname>signed</methodname> Methode. Diese muss beim Schreiben und
      beim Lesen des Cookies benutzt werden. Unser obiges Beispiel können wir
      in der <filename>app/controllers/home_controller.rb</filename> um diese
      Methode erweitern:<programlisting>class HomeController &lt; ApplicationController
  def set_cookies
<emphasis>    cookies.permanent.signed[:user_name] = "Horst Meier" 
    cookies.permanent.signed[:kundenummer] = "1234567890" </emphasis>
  end

  def show_cookies
<emphasis>    @user_name = cookies.signed[:user_name]
    @kundennummer = cookies.signed[:kundenummer]</emphasis>
  end

  def delete_cookies
    cookies.delete :user_name
    cookies.delete :kundenummer
  end

  def debug_cookies
  end
end
</programlisting>Der Inhalt des Cookies wird jetzt bei jedem Setzen
      verschlüsselt abgespeichert. Der Name des Cookies ist weiterhin im
      Klartext für den User lesbar. Der Wert aber nicht mehr.</para>
    </section>
  </section>

  <section>
    <title>Sessions</title>

    <para>Da HTTP ein state-less Protokoll ist, treffen wir auf besondere
    Probleme bei der Entwicklung von Anwendungen. Eigentlich hat eine Webseite
    nicht mit einer anderen Webseite zu tun und sie wissen auch nichts von
    einander. Da man sich aber auf vielen Webseite z.B. nur einmal und nicht
    auf jeder Seite neu Anmelden will, ist das ein Problem. Die Lösung dafür
    heißt Session. Von Rails wird automatisch für jeden neuen Besucher der
    Webseite eine neue Session angelegt. Diese wird per Default als Cookie
    (siehe <xref linkend="cookies" />) gespeichert und unterliegt damit der 4
    KB Limitation. Man kann die Sessions aber auch in der Datenbank speichern
    (siehe <xref linkend="sessions_datenbank" />). Eine eigenständige und
    unique Session-ID wird automatisch erstellt und der Cookie wird per
    Default beim Schliessen des Webbrowsers gelöscht.<warning>
        <para>Bitte beachten Sie, das nur von Rails generierte Seiten im
        Session-Management arbeiten. Wenn Sie eine statische HTML-Seite aus
        <filename>/public</filename> aufrufen, so läuft das ausserhalb des
        Session-Managements.</para>
      </warning></para>

    <para>Das schöne an einer Rails-Session ist, das wir dort nicht nur wie
    bei Cookies Strings sondern auch Hashes und Arrays abspeichern können. So
    können wir beispielsweise bequem einen Warenkorb in einem Online-Shop
    realisieren.</para>

    <section xml:id="session_breadcrumbs">
      <title xml:id="session_breadcrumbs.title">Breadcrumbs per
      Session</title>

      <para>Als Beispiel erstellen wir eine Applikation mit einem Controller
      und drei Views. Beim Besuch eines Views werden die vorherig besuchten
      Views in einer kleinen Liste angezeigt.</para>

      <para>Die Basisapplikation:<screen>Stefan-Wintermeyers-MacBook-Air:~ stefan$ <command>rails new breadcrumbs</command>
[...]
Stefan-Wintermeyers-MacBook-Air:~ stefan$ <command>cd breadcrumbs</command>
Stefan-Wintermeyers-MacBook-Air:breadcrumbs stefan$ <command>bundle install</command>
[...]
Stefan-Wintermeyers-MacBook-Air:breadcrumbs stefan$ <command>rails generate controller Home ping pong index</command>
[...]
Stefan-Wintermeyers-MacBook-Air:breadcrumbs stefan$</screen></para>

      <para>Als erstes erstellen wir eine Methode, mit der wir die letzten 3
      URLs in der Session speichern und setzen eine Instanz Variable
      <varname>@breadcrumbs</varname> um die Werte im View sauber abrufen zu
      können. Dazu richten wir einen <methodname>before_filter</methodname> in
      der <filename>app/controllers/home_controller.rb</filename>
      ein:<programlisting>class HomeController &lt; ApplicationController
  <emphasis>before_filter :set_breadcrumbs</emphasis>
  
  def ping
  end

  def pong
  end

  def index
  end

<emphasis>  private  
  def set_breadcrumbs
    @breadcrumbs = session[:breadcrumbs]
    @breadcrumbs ||= Array.new
    @breadcrumbs.push(request.url)
    @breadcrumbs.shift if @breadcrumbs.count &gt; 3
    session[:breadcrumbs] = @breadcrumbs
  end</emphasis>
end
</programlisting></para>

      <para>Jetzt benutzen wir die
      <filename>app/views/layouts/application.html.erb</filename>, um diese
      letzten Einträge am Kopf jeder Seite anzuzeigen:<programlisting>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Breadcrumbs&lt;/title&gt;
  &lt;%= stylesheet_link_tag    "application" %&gt;
  &lt;%= javascript_include_tag "application" %&gt;
  &lt;%= csrf_meta_tags %&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;% if @breadcrumbs %&gt;
  &lt;p&gt;Letzte Seitenaufrufe:&lt;/p&gt;
  &lt;ul&gt;
    &lt;% @breadcrumbs.each do |breadcrumb| %&gt;
      &lt;li&gt;&lt;%= link_to breadcrumb, breadcrumb %&gt;&lt;/li&gt;
    &lt;% end %&gt;
  &lt;/ul&gt;
&lt;% end %&gt;

&lt;%= yield %&gt;

&lt;/body&gt;
&lt;/html&gt;
</programlisting></para>

      <para>Jetzt können sie mit <command>rails server</command> den Rails
      Server starten und auf <uri
      xlink:href="http://0.0.0.0:3000/home/ping">http://0.0.0.0:3000/home/ping</uri>,
      <uri
      xlink:href="http://0.0.0.0:3000/home/ping">http://0.0.0.0:3000/home/ping</uri>
      oder <uri
      xlink:href="http://0.0.0.0:3000/home/index">http://0.0.0.0:3000/home/index</uri>
      surfen und oben immer sehen, auf welchen Seiten Sie vorher waren.
      Natürlich geht das erst auf der zweiten Seite, weil Sie beim ersten
      Aufruf ja noch keine Historie habe.<screenshot>
          <info>
            <title>Aufruf der dritten Seite in einer Session</title>
          </info>

          <mediaobject>
            <imageobject>
              <imagedata fileref="screenshots/breadcrumbs_session_beispiel.jpg"></imagedata>
            </imageobject>
          </mediaobject>
        </screenshot></para>
    </section>

    <section>
      <title>reset_session</title>

      <para>Es gibt immer mal wieder Situationen, in denen man eine Session
      reseten möchte (also die aktuelle Session löschen und eine neue frische
      Session aufbauen). Bei einem Logout bei einer Webapplikation wird so
      beispielsweise oft die Session geresetet. Das geht einfach und wir bauen
      das kurz in unsere Breadcrumb-Applikation (siehe <xref
      linkend="session_breadcrumb" />) ein:<screen>Stefan-Wintermeyers-MacBook-Air:breadcrumbs stefan$ <command>rails generate controller Home reset -s</command>
        skip  app/controllers/home_controller.rb
       route  get "home/reset"
      invoke  erb
       exist    app/views/home
      create    app/views/home/reset.html.erb
      invoke  test_unit
        skip    test/functional/home_controller_test.rb
      invoke  helper
   identical    app/helpers/home_helper.rb
      invoke    test_unit
   identical      test/unit/helpers/home_helper_test.rb
      invoke  assets
   identical    app/assets/javascripts/home.js.coffee
   identical    app/assets/stylesheets/home.css.scss
Stefan-Wintermeyers-MacBook-Air:breadcrumbs stefan$</screen></para>

      <para>Der entsprechend erweiterte Controller
      <filename>app/controllers/home_controller.rb</filename> sieht dann so
      aus:<programlisting>class HomeController &lt; ApplicationController
  before_filter :set_breadcrumbs
  
  def ping
  end

  def pong
  end

  def index
  end

  def reset
    reset_session
    @breadcrumbs = nil
  end

  private  
  def set_breadcrumbs
    @breadcrumbs = session[:breadcrumbs]
    @breadcrumbs ||= Array.new
    @breadcrumbs.push(request.url)
    @breadcrumbs.shift if @breadcrumbs.count &gt; 3
    session[:breadcrumbs] = @breadcrumbs
  end
end
</programlisting></para>

      <para>Wichtig ist es nicht nur <methodname>reset_session</methodname>
      aufzurufen, sondern auch noch die Instanz Variable
      <varname>@breadcrumbs</varname> auf <code>nil</code> zu setzen. Sonst
      würden im View doch noch die alten Breadcrumbs erscheinen.</para>
    </section>

    <section xml:id="sessions_datenbank">
      <title xml:id="sessions_datenbank.title">Sessions in der Datenbank
      speichern</title>

      <para>Die ganzen Session-Daten in einem Cookie auf dem Browser des Users
      zu speichern, ist nicht immer optimal. Alleine das 4KB Limit kommt einem
      manchmal in die Quere. Es ist aber kein Problem, denn wir können das
      Speichern der Session vom Cookie in die Datenbank umstellen. Dann wird
      natürlich immer noch die Session-ID in einem Cookie gespeichert, aber
      die ganzen restlichen Session-Daten in der Datenbank auf dem
      Server.</para>

      <para>Als erstes verändern wir die Konfiguration des Session Stores in
      der Datei <filename>config/initializers/session_store.rb</filename>. Wie
      kommentieren den <code>:cookie_store</code> aus und nehmen das
      Kommentarzeichen vor dem <code>:active_record_store</code>
      raus.<programlisting># Be sure to restart your server when you modify this file.

# Breadcrumbs::Application.config.session_store :cookie_store, key: '_breadcrumbs_session'

# Use the database for sessions instead of the cookie-based default,
# which shouldn't be used to store highly confidential information
# (create the session table with "rails generate session_migration")
<emphasis>Breadcrumbs::Application.config.session_store :active_record_store</emphasis>
</programlisting></para>

      <para>Jetzt müssen wir noch die entsprechende Tabelle anlegen. Das geht
      mit <command>rails generate session_migration</command> und
      <command>rake db:migrate</command>:<screen>Stefan-Wintermeyers-MacBook-Air:breadcrumbs stefan$ <command>rails generate session_migration</command>
      invoke  active_record
      create    db/migrate/20110606095336_add_sessions_table.rb
Stefan-Wintermeyers-MacBook-Air:breadcrumbs stefan$ <command>rake db:migrate</command>
==  AddSessionsTable: migrating ===============================================
-- create_table(:sessions)
   -&gt; 0.0022s
-- add_index(:sessions, :session_id)
   -&gt; 0.0006s
-- add_index(:sessions, :updated_at)
   -&gt; 0.0006s
==  AddSessionsTable: migrated (0.0038s) ======================================

Stefan-Wintermeyers-MacBook-Air:breadcrumbs stefan$</screen></para>

      <para>Logischerweise muss der Webserver dafür runtergefahren
      werden.</para>
    </section>
  </section>
</chapter>
