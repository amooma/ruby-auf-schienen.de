<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xml:id="seed_rb" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title xml:id="seed_rb.title">Mit seeds.rb die Datenbank betanken</title>

  <indexterm>
    <primary>seeds.rb</primary>
  </indexterm>

  <para>Die Rails-Götter haben mit der Datei <filename>db/seeds.rb</filename>
  einen Weg geschaffen, eine frische Installation einfach und schnell mit
  Default-Werten zu füttern. Es handelt sich um ein normales Ruby-Programm
  innerhalb der Rails-Umgebung. Sie haben also vollen Zugriff auf alle Klassen
  und Methoden aus Ihrer Applikation.</para>

  <para>Um die in <xref linkend="activerecord_create" /> erstellten Datensätze
  in einer neuen Rails-Applikation zur Verfügung zu stellen, müssen Sie so
  nicht manuel mit <command>rails console</command> alles eingeben, sondern es
  reicht die folgende Datei <filename>db/seeds.rb</filename>:<programlisting># This file should contain all the record creation needed to seed the database with its default values.
# The data can then be loaded with the rake db:seed (or created alongside the db with db:setup).
#
# Examples:
#
#   cities = City.create([{ name: 'Chicago' }, { name: 'Copenhagen' }])
#   Mayor.create(name: 'Emanuel', city: cities.first)

Country.create({"name"=&gt;"Deutschland", "population"=&gt;81831000})
Country.create({"name"=&gt;"Frankreich", "population"=&gt;65447374})
Country.create({"name"=&gt;"Belgien", "population"=&gt;10839905})
Country.create({"name"=&gt;"Niederlande", "population"=&gt;16680000})</programlisting></para>

  <para>Das Einspielen der Daten erfolgt dann mit <command>rake
  db:seed</command>. Um ganz sicher zu sein, sollten Sie im Rahmen dieses
  Buches immer mit <command>rake db:setup</command> die Datenbank neu
  aufsetzen und dann automatisch mit der <filename>seeds.rb</filename>
  füttern. Das sieht dann so aus:<screen>Stefan-Wintermeyers-MacBook-Air:europe xyz$ <command>rake db:setup</command>
db/development.sqlite3 already exists
-- create_table("countries", {:force=&gt;true})
   -&gt; 0.0327s
-- initialize_schema_migrations_table()
   -&gt; 0.0004s
-- assume_migrated_upto_version(20120426092916, ["/Users/xyz/europe/db/migrate"])
   -&gt; 0.0004s
Stefan-Wintermeyers-MacBook-Air:europe xyz$</screen>Die Datei
  <filename>db/seeds.rb</filename> bringe ich an dieser Stelle ein, weil sie
  einen einfachen Mechanismus bietet, eine leere Datenbank mit Default-Werten
  zu füllen. Das erleichtert uns im weiteren Verlauf des Buches das schnelle
  Setup von Beispiel-Szenarien.</para>

  <section>
    <title>Alternative Programmierung</title>

    <indexterm>
      <primary>seeds.rb</primary>
    </indexterm>

    <para>Die <filename>seeds.rb</filename> ist ein Ruby-Programm.
    Entsprechend können wir alternativ auch folgenden Weg
    gehen:<programlisting># This file should contain all the record creation needed to seed the database with its default values.
# The data can then be loaded with the rake db:seed (or created alongside the db with db:setup).
#
# Examples:
#
#   cities = City.create([{ :name =&gt; 'Chicago' }, { :name =&gt; 'Copenhagen' }])
#   Mayor.create(:name =&gt; 'Daley', :city =&gt; cities.first)

country_list = [
  [ "Deutschland", 81831000 ],
  [ "Frankreich", 65447374 ],
  [ "Belgien", 10839905 ],
  [ "Niederlande", 16680000 ]
]

country_list.each do |country|
  Country.create( :name =&gt; country[0], :population =&gt; country[1] )
end</programlisting></para>

    <para>Das Ergebnis ist das gleiche. Ich zeige Ihnen dieses Beispiel hier,
    um noch mal klar herauszuarbeiten, dass Sie innerhalb der
    <filename>seeds.rb</filename> ganz normal programmieren können.</para>
  </section>

  <section>
    <title>seeds.rb aus bestehenden Daten erstellen</title>

    <indexterm>
      <primary>seeds.rb</primary>
    </indexterm>

    <para>Manchmal ist es praktisch, den aktuellen Datenbestand einer
    Rails-Applikation in eine <filename>seeds.rb</filename> zu exportieren.
    Beim Schreiben dieses Buches hatte ich dieses Problem fast in jedem
    Kapitel. Es gibt dafür leider keinen Standardweg. Ich zeige Ihnen, wie man
    es in diesem Fall machen kann. Komplexere Szenarien lassen sich daraus
    ableiten.</para>

    <para>Füllen Sie die Datei <filename>lib/tasks/apfelmus.rake</filename>
    mit folgendem Inhalt:<programlisting>namespace :album do
  desc "Prints all the Albums in a seeds.rb way."
  task :seed_format =&gt; :environment do
    Album.order('position').all.each do |album|
      puts "Album.create(#{album.serializable_hash.delete_if {|key, value| ['created_at','updated_at','id'].include?(key)}.to_s.gsub(/[{}]/,'')})"
    end
  end
end</programlisting></para>

    <para>Danach können Sie mit dem Befehl <command>rake
    album:seed_format</command> den entsprechenden
    <literal>rake</literal>-<quote><foreignphrase
    xml:lang="en">Task</foreignphrase></quote> abrufen:<screen>stefan@swmbp 0 1.9.2-p0 jukebox$ <command>rake album:seed_format</command>
(in /Users/stefan/jukebox)
Album.create("name"=&gt;"Sgt. Pepper's Lonely Hearts Club Band", "position"=&gt;1, "release_year"=&gt;1967)
Album.create("name"=&gt;"Pet Sounds", "position"=&gt;2, "release_year"=&gt;1966)
Album.create("name"=&gt;"Revolver", "position"=&gt;3, "release_year"=&gt;1966)
Album.create("name"=&gt;"Highway 61 Revisited", "position"=&gt;4, "release_year"=&gt;1965)
stefan@swmbp 0 1.9.2-p0 jukebox$ </screen></para>

    <para>Entweder können Sie dieses Programm so erweitern, dass die Ausgabe
    direkt in die <filename>seeds.rb</filename> geschrieben wird oder Sie
    benutzen einfach die Shell:<screen>stefan@swmbp 0 1.9.2-p0 jukebox$ <command>rake album:seed_format &gt;&gt; db/seeds.rb</command>
stefan@swmbp 0 1.9.2-p0 jukebox$ </screen></para>
  </section>
</section>
